[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "tarfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tarfile",
        "description": "tarfile",
        "detail": "tarfile",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "sys,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.",
        "description": "sys.",
        "detail": "sys.",
        "documentation": {}
    },
    {
        "label": "os,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.",
        "description": "os.",
        "detail": "os.",
        "documentation": {}
    },
    {
        "label": "glob",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "glob",
        "description": "glob",
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "glob",
        "importPath": "glob",
        "description": "glob",
        "isExtraImport": true,
        "detail": "glob",
        "documentation": {}
    },
    {
        "label": "distutils.sysconfig",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "distutils.sysconfig",
        "description": "distutils.sysconfig",
        "detail": "distutils.sysconfig",
        "documentation": {}
    },
    {
        "label": "get_python_inc",
        "importPath": "distutils.sysconfig",
        "description": "distutils.sysconfig",
        "isExtraImport": true,
        "detail": "distutils.sysconfig",
        "documentation": {}
    },
    {
        "label": "get_python_inc",
        "importPath": "distutils.sysconfig",
        "description": "distutils.sysconfig",
        "isExtraImport": true,
        "detail": "distutils.sysconfig",
        "documentation": {}
    },
    {
        "label": "get_python_inc",
        "importPath": "distutils.sysconfig",
        "description": "distutils.sysconfig",
        "isExtraImport": true,
        "detail": "distutils.sysconfig",
        "documentation": {}
    },
    {
        "label": "get_python_inc",
        "importPath": "distutils.sysconfig",
        "description": "distutils.sysconfig",
        "isExtraImport": true,
        "detail": "distutils.sysconfig",
        "documentation": {}
    },
    {
        "label": "dll",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "dll",
        "description": "dll",
        "detail": "dll",
        "documentation": {}
    },
    {
        "label": "get_definitions",
        "importPath": "setup_win_common",
        "description": "setup_win_common",
        "isExtraImport": true,
        "detail": "setup_win_common",
        "documentation": {}
    },
    {
        "label": "msys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "msys",
        "description": "msys",
        "detail": "msys",
        "documentation": {}
    },
    {
        "label": "platform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "platform",
        "description": "platform",
        "detail": "platform",
        "documentation": {}
    },
    {
        "label": "shutil",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "shutil",
        "description": "shutil",
        "detail": "shutil",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "subprocess",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess",
        "description": "subprocess",
        "detail": "subprocess",
        "documentation": {}
    },
    {
        "label": "MSVCCompiler",
        "importPath": "distutils.msvccompiler",
        "description": "distutils.msvccompiler",
        "isExtraImport": true,
        "detail": "distutils.msvccompiler",
        "documentation": {}
    },
    {
        "label": "get_build_architecture",
        "importPath": "distutils.msvccompiler",
        "description": "distutils.msvccompiler",
        "isExtraImport": true,
        "detail": "distutils.msvccompiler",
        "documentation": {}
    },
    {
        "label": "Visitor",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "_unicode",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "as_unicode",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "get_name",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "GetError",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "get_refid",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "as_refid",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "as_refuri",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "get_sectionname",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "isections",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "Visitor",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "get_fullname",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "get_refid",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "as_refid",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "geterror",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "GetError",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "EMPTYSTR",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "as_unicode",
        "importPath": "ext.utils",
        "description": "ext.utils",
        "isExtraImport": true,
        "detail": "ext.utils",
        "documentation": {}
    },
    {
        "label": "get_descinfo",
        "importPath": "ext.indexer",
        "description": "ext.indexer",
        "isExtraImport": true,
        "detail": "ext.indexer",
        "documentation": {}
    },
    {
        "label": "get_descinfo_refid",
        "importPath": "ext.indexer",
        "description": "ext.indexer",
        "isExtraImport": true,
        "detail": "ext.indexer",
        "documentation": {}
    },
    {
        "label": "tour_descinfo",
        "importPath": "ext.indexer",
        "description": "ext.indexer",
        "isExtraImport": true,
        "detail": "ext.indexer",
        "documentation": {}
    },
    {
        "label": "sphinx.addnodes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sphinx.addnodes",
        "description": "sphinx.addnodes",
        "detail": "sphinx.addnodes",
        "documentation": {}
    },
    {
        "label": "desc",
        "importPath": "sphinx.addnodes",
        "description": "sphinx.addnodes",
        "isExtraImport": true,
        "detail": "sphinx.addnodes",
        "documentation": {}
    },
    {
        "label": "desc_signature",
        "importPath": "sphinx.addnodes",
        "description": "sphinx.addnodes",
        "isExtraImport": true,
        "detail": "sphinx.addnodes",
        "documentation": {}
    },
    {
        "label": "desc_content",
        "importPath": "sphinx.addnodes",
        "description": "sphinx.addnodes",
        "isExtraImport": true,
        "detail": "sphinx.addnodes",
        "documentation": {}
    },
    {
        "label": "PyClasslike",
        "importPath": "sphinx.domains.python",
        "description": "sphinx.domains.python",
        "isExtraImport": true,
        "detail": "sphinx.domains.python",
        "documentation": {}
    },
    {
        "label": "docutils.nodes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "section",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "literal",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "reference",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "paragraph",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "title",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "document",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "Text",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "TextElement",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "inline",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "table",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "tgroup",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "colspec",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "tbody",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "row",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "entry",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "whitespace_normalize_name",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "SkipNode",
        "importPath": "docutils.nodes",
        "description": "docutils.nodes",
        "isExtraImport": true,
        "detail": "docutils.nodes",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "deque",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "OrderedDict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "versionlabels",
        "importPath": "sphinx.domains.changeset",
        "description": "sphinx.domains.changeset",
        "isExtraImport": true,
        "detail": "sphinx.domains.changeset",
        "documentation": {}
    },
    {
        "label": "VersionChange",
        "importPath": "sphinx.domains.changeset",
        "description": "sphinx.domains.changeset",
        "isExtraImport": true,
        "detail": "sphinx.domains.changeset",
        "documentation": {}
    },
    {
        "label": "_",
        "importPath": "sphinx.locale",
        "description": "sphinx.locale",
        "isExtraImport": true,
        "detail": "sphinx.locale",
        "documentation": {}
    },
    {
        "label": "warnings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "warnings",
        "description": "warnings",
        "detail": "warnings",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "basename",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "exists",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "splitext",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "normpath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "join",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "dirname",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "abspath",
        "importPath": "os.path",
        "description": "os.path",
        "isExtraImport": true,
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Surface",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "surfarray",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sndarray",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "compat",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "encode_file_path",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Surface",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Color",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "SRCALPHA",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sdlmain_osx",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Rect",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "compat",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "display",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "draw",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "draw_py",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "event",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "fastevent",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "font",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "mixer",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Rect",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "encode_string",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "encode_file_path",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "scrap",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "sprite",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "threads",
        "importPath": "pygame",
        "description": "pygame",
        "isExtraImport": true,
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "math",
        "description": "math",
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sqrt",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "atan2",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "ceil",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "random,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random.",
        "description": "random.",
        "detail": "random.",
        "documentation": {}
    },
    {
        "label": "pygame.locals",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "SRCALPHA",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Extension",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "Command",
        "importPath": "distutils.core",
        "description": "distutils.core",
        "isExtraImport": true,
        "detail": "distutils.core",
        "documentation": {}
    },
    {
        "label": "py2app",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "py2app",
        "description": "py2app",
        "detail": "py2app",
        "documentation": {}
    },
    {
        "label": "pygame.surfarray",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.surfarray",
        "description": "pygame.surfarray",
        "detail": "pygame.surfarray",
        "documentation": {}
    },
    {
        "label": "blit_array",
        "importPath": "pygame.surfarray",
        "description": "pygame.surfarray",
        "isExtraImport": true,
        "detail": "pygame.surfarray",
        "documentation": {}
    },
    {
        "label": "make_surface",
        "importPath": "pygame.surfarray",
        "description": "pygame.surfarray",
        "isExtraImport": true,
        "detail": "pygame.surfarray",
        "documentation": {}
    },
    {
        "label": "pixels3d",
        "importPath": "pygame.surfarray",
        "description": "pygame.surfarray",
        "isExtraImport": true,
        "detail": "pygame.surfarray",
        "documentation": {}
    },
    {
        "label": "pixels2d",
        "importPath": "pygame.surfarray",
        "description": "pygame.surfarray",
        "isExtraImport": true,
        "detail": "pygame.surfarray",
        "documentation": {}
    },
    {
        "label": "Numeric",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "Numeric",
        "description": "Numeric",
        "detail": "Numeric",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "Foundation",
        "description": "Foundation",
        "isExtraImport": true,
        "detail": "Foundation",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "AppKit",
        "description": "AppKit",
        "isExtraImport": true,
        "detail": "AppKit",
        "documentation": {}
    },
    {
        "label": "pygame.gfxdraw",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.gfxdraw",
        "description": "pygame.gfxdraw",
        "detail": "pygame.gfxdraw",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "clock",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "perf_counter",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "get_audio_device_name",
        "importPath": "pygame._sdl2",
        "description": "pygame._sdl2",
        "isExtraImport": true,
        "detail": "pygame._sdl2",
        "documentation": {}
    },
    {
        "label": "get_num_audio_devices",
        "importPath": "pygame._sdl2",
        "description": "pygame._sdl2",
        "isExtraImport": true,
        "detail": "pygame._sdl2",
        "documentation": {}
    },
    {
        "label": "AudioDevice",
        "importPath": "pygame._sdl2",
        "description": "pygame._sdl2",
        "isExtraImport": true,
        "detail": "pygame._sdl2",
        "documentation": {}
    },
    {
        "label": "AUDIO_F32",
        "importPath": "pygame._sdl2",
        "description": "pygame._sdl2",
        "isExtraImport": true,
        "detail": "pygame._sdl2",
        "documentation": {}
    },
    {
        "label": "AUDIO_ALLOW_FORMAT_CHANGE",
        "importPath": "pygame._sdl2",
        "description": "pygame._sdl2",
        "isExtraImport": true,
        "detail": "pygame._sdl2",
        "documentation": {}
    },
    {
        "label": "Window",
        "importPath": "pygame._sdl2",
        "description": "pygame._sdl2",
        "isExtraImport": true,
        "detail": "pygame._sdl2",
        "documentation": {}
    },
    {
        "label": "Texture",
        "importPath": "pygame._sdl2",
        "description": "pygame._sdl2",
        "isExtraImport": true,
        "detail": "pygame._sdl2",
        "documentation": {}
    },
    {
        "label": "Renderer",
        "importPath": "pygame._sdl2",
        "description": "pygame._sdl2",
        "isExtraImport": true,
        "detail": "pygame._sdl2",
        "documentation": {}
    },
    {
        "label": "get_drivers",
        "importPath": "pygame._sdl2",
        "description": "pygame._sdl2",
        "isExtraImport": true,
        "detail": "pygame._sdl2",
        "documentation": {}
    },
    {
        "label": "messagebox",
        "importPath": "pygame._sdl2",
        "description": "pygame._sdl2",
        "isExtraImport": true,
        "detail": "pygame._sdl2",
        "documentation": {}
    },
    {
        "label": "touch",
        "importPath": "pygame._sdl2",
        "description": "pygame._sdl2",
        "isExtraImport": true,
        "detail": "pygame._sdl2",
        "documentation": {}
    },
    {
        "label": "pygame.camera",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.camera",
        "description": "pygame.camera",
        "detail": "pygame.camera",
        "documentation": {}
    },
    {
        "label": "pygame.compat",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "geterror",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unichr_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unicode_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "xrange_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "xrange_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_bytes",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "xrange_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unicode_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "bytes_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unicode_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_unicode",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_bytes",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "get_BytesIO",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "xrange_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "PY_MAJOR_VERSION",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "bytes_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "geterror",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "imap_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_bytes",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "long_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "long_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unicode_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_unicode",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "geterror",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_unicode",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unicode_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_bytes",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "xrange_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "filesystem_errors",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "PY_MAJOR_VERSION",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_unicode",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "bytes_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unichr_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unicode_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_unicode",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unicode_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "xrange_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "ord_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unicode_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_unicode",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unicode_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "filesystem_encode",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "unicode_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_bytes",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "bytes_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "xrange_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "bytes_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_bytes",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_unicode",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_bytes",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_bytes",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "xrange_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_bytes",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "as_unicode",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "xrange_",
        "importPath": "pygame.compat",
        "description": "pygame.compat",
        "isExtraImport": true,
        "detail": "pygame.compat",
        "documentation": {}
    },
    {
        "label": "Thread",
        "importPath": "threading",
        "description": "threading",
        "isExtraImport": true,
        "detail": "threading",
        "documentation": {}
    },
    {
        "label": "locale",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "locale",
        "description": "locale",
        "detail": "locale",
        "documentation": {}
    },
    {
        "label": "pygame.transform",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.transform",
        "description": "pygame.transform",
        "detail": "pygame.transform",
        "documentation": {}
    },
    {
        "label": "scale",
        "importPath": "pygame.transform",
        "description": "pygame.transform",
        "isExtraImport": true,
        "detail": "pygame.transform",
        "documentation": {}
    },
    {
        "label": "pygame,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.",
        "description": "pygame.",
        "detail": "pygame.",
        "documentation": {}
    },
    {
        "label": "pygame.midi",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.midi",
        "description": "pygame.midi",
        "detail": "pygame.midi",
        "documentation": {}
    },
    {
        "label": "print_function",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "division",
        "importPath": "__future__",
        "description": "__future__",
        "isExtraImport": true,
        "detail": "__future__",
        "documentation": {}
    },
    {
        "label": "pygame.freetype",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.freetype",
        "description": "pygame.freetype",
        "detail": "pygame.freetype",
        "documentation": {}
    },
    {
        "label": "pygame.scrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.scrap",
        "description": "pygame.scrap",
        "detail": "pygame.scrap",
        "documentation": {}
    },
    {
        "label": "os.path,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path.",
        "description": "os.path.",
        "detail": "os.path.",
        "documentation": {}
    },
    {
        "label": "pygame.mixer,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.mixer.",
        "description": "pygame.mixer.",
        "detail": "pygame.mixer.",
        "documentation": {}
    },
    {
        "label": "pygame.surfarray,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.surfarray.",
        "description": "pygame.surfarray.",
        "detail": "pygame.surfarray.",
        "documentation": {}
    },
    {
        "label": "numpy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "numpy",
        "description": "numpy",
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "zeros",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "int32",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "int16",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "array",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "empty",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "int8",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "int16",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "uint8",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "uint16",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "float32",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "array",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "alltrue",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "numpy",
        "description": "numpy",
        "isExtraImport": true,
        "detail": "numpy",
        "documentation": {}
    },
    {
        "label": "random",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "random",
        "description": "random",
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "uniform",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "uniform",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "uniform",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "uniform",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "pygame.joystick",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.joystick",
        "description": "pygame.joystick",
        "detail": "pygame.joystick",
        "documentation": {}
    },
    {
        "label": "pygame.sprite",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.sprite",
        "description": "pygame.sprite",
        "detail": "pygame.sprite",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.gp2x.constants",
        "description": "pygame.gp2x.constants",
        "isExtraImport": true,
        "detail": "pygame.gp2x.constants",
        "documentation": {}
    },
    {
        "label": "Font",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "STYLE_NORMAL",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "STYLE_OBLIQUE",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "STYLE_STRONG",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "STYLE_UNDERLINE",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "STYLE_WIDE",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "STYLE_DEFAULT",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "quit",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "get_init",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "was_init",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "get_cache_size",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "get_default_font",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "get_default_resolution",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "get_error",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "get_version",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "set_default_resolution",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "_PYGAME_C_API",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "__PYGAMEinit__",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "init",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "Font",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "get_default_resolution",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "quit",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "get_default_font",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "get_init",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "__PYGAMEinit__",
        "importPath": "pygame._freetype",
        "description": "pygame._freetype",
        "isExtraImport": true,
        "detail": "pygame._freetype",
        "documentation": {}
    },
    {
        "label": "match_font",
        "importPath": "pygame.sysfont",
        "description": "pygame.sysfont",
        "isExtraImport": true,
        "detail": "pygame.sysfont",
        "documentation": {}
    },
    {
        "label": "get_fonts",
        "importPath": "pygame.sysfont",
        "description": "pygame.sysfont",
        "isExtraImport": true,
        "detail": "pygame.sysfont",
        "documentation": {}
    },
    {
        "label": "SysFont",
        "importPath": "pygame.sysfont",
        "description": "pygame.sysfont",
        "isExtraImport": true,
        "detail": "pygame.sysfont",
        "documentation": {}
    },
    {
        "label": "match_font",
        "importPath": "pygame.sysfont",
        "description": "pygame.sysfont",
        "isExtraImport": true,
        "detail": "pygame.sysfont",
        "documentation": {}
    },
    {
        "label": "get_fonts",
        "importPath": "pygame.sysfont",
        "description": "pygame.sysfont",
        "isExtraImport": true,
        "detail": "pygame.sysfont",
        "documentation": {}
    },
    {
        "label": "SysFont",
        "importPath": "pygame.sysfont",
        "description": "pygame.sysfont",
        "isExtraImport": true,
        "detail": "pygame.sysfont",
        "documentation": {}
    },
    {
        "label": "pygame.constants",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.constants",
        "description": "pygame.constants",
        "detail": "pygame.constants",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.constants",
        "description": "pygame.constants",
        "isExtraImport": true,
        "detail": "pygame.constants",
        "documentation": {}
    },
    {
        "label": "Rect",
        "importPath": "pygame.rect",
        "description": "pygame.rect",
        "isExtraImport": true,
        "detail": "pygame.rect",
        "documentation": {}
    },
    {
        "label": "pygame.color",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.color",
        "description": "pygame.color",
        "detail": "pygame.color",
        "documentation": {}
    },
    {
        "label": "getResource",
        "importPath": "pygame.pkgdata",
        "description": "pygame.pkgdata",
        "isExtraImport": true,
        "detail": "pygame.pkgdata",
        "documentation": {}
    },
    {
        "label": "atexit",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "atexit",
        "description": "atexit",
        "detail": "atexit",
        "documentation": {}
    },
    {
        "label": "pygame._numpysndarray",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame._numpysndarray",
        "description": "pygame._numpysndarray",
        "detail": "pygame._numpysndarray",
        "documentation": {}
    },
    {
        "label": "get_ticks",
        "importPath": "pygame.time",
        "description": "pygame.time",
        "isExtraImport": true,
        "detail": "pygame.time",
        "documentation": {}
    },
    {
        "label": "operator",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "operator",
        "description": "operator",
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "truth",
        "importPath": "operator",
        "description": "operator",
        "isExtraImport": true,
        "detail": "operator",
        "documentation": {}
    },
    {
        "label": "pygame._numpysurfarray",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame._numpysurfarray",
        "description": "pygame._numpysurfarray",
        "detail": "pygame._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "array_to_surface",
        "importPath": "pygame.pixelcopy",
        "description": "pygame.pixelcopy",
        "isExtraImport": true,
        "detail": "pygame.pixelcopy",
        "documentation": {}
    },
    {
        "label": "make_surface",
        "importPath": "pygame.pixelcopy",
        "description": "pygame.pixelcopy",
        "isExtraImport": true,
        "detail": "pygame.pixelcopy",
        "documentation": {}
    },
    {
        "label": "array_to_surface",
        "importPath": "pygame.pixelcopy",
        "description": "pygame.pixelcopy",
        "isExtraImport": true,
        "detail": "pygame.pixelcopy",
        "documentation": {}
    },
    {
        "label": "surface_to_array",
        "importPath": "pygame.pixelcopy",
        "description": "pygame.pixelcopy",
        "isExtraImport": true,
        "detail": "pygame.pixelcopy",
        "documentation": {}
    },
    {
        "label": "\\",
        "importPath": "pygame.pixelcopy",
        "description": "pygame.pixelcopy",
        "isExtraImport": true,
        "detail": "pygame.pixelcopy",
        "documentation": {}
    },
    {
        "label": "surface_to_array",
        "importPath": "pygame.pixelcopy",
        "description": "pygame.pixelcopy",
        "isExtraImport": true,
        "detail": "pygame.pixelcopy",
        "documentation": {}
    },
    {
        "label": "map_array",
        "importPath": "pygame.pixelcopy",
        "description": "pygame.pixelcopy",
        "isExtraImport": true,
        "detail": "pygame.pixelcopy",
        "documentation": {}
    },
    {
        "label": "array_to_surface",
        "importPath": "pygame.pixelcopy",
        "description": "pygame.pixelcopy",
        "isExtraImport": true,
        "detail": "pygame.pixelcopy",
        "documentation": {}
    },
    {
        "label": "make_surface",
        "importPath": "pygame.pixelcopy",
        "description": "pygame.pixelcopy",
        "isExtraImport": true,
        "detail": "pygame.pixelcopy",
        "documentation": {}
    },
    {
        "label": "xml.etree.ElementTree",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "xml.etree.ElementTree",
        "description": "xml.etree.ElementTree",
        "detail": "xml.etree.ElementTree",
        "documentation": {}
    },
    {
        "label": "opencv",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "opencv",
        "description": "opencv",
        "detail": "opencv",
        "documentation": {}
    },
    {
        "label": "highgui",
        "importPath": "opencv",
        "description": "opencv",
        "isExtraImport": true,
        "detail": "opencv",
        "documentation": {}
    },
    {
        "label": "pygame.mixer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.mixer",
        "description": "pygame.mixer",
        "detail": "pygame.mixer",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "TestCase",
        "importPath": "unittest",
        "description": "unittest",
        "isExtraImport": true,
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "subprocess,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "subprocess.",
        "description": "subprocess.",
        "detail": "subprocess.",
        "documentation": {}
    },
    {
        "label": "ctypes",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "ctypes",
        "description": "ctypes",
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "ctypes",
        "description": "ctypes",
        "isExtraImport": true,
        "detail": "ctypes",
        "documentation": {}
    },
    {
        "label": "errno",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "errno",
        "description": "errno",
        "detail": "errno",
        "documentation": {}
    },
    {
        "label": "tempfile",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tempfile",
        "description": "tempfile",
        "detail": "tempfile",
        "documentation": {}
    },
    {
        "label": "a",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "a",
        "description": "a",
        "detail": "a",
        "documentation": {}
    },
    {
        "label": "pygame.newbuffer",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_SIMPLE",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_FORMAT",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_ND",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_WRITABLE",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_STRIDES",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_C_CONTIGUOUS",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_F_CONTIGUOUS",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_ANY_CONTIGUOUS",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_INDIRECT",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_STRIDED",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_STRIDED_RO",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_RECORDS",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_RECORDS_RO",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_FULL",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_FULL_RO",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_CONTIG",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "PyBUF_CONTIG_RO",
        "importPath": "pygame.newbuffer",
        "description": "pygame.newbuffer",
        "isExtraImport": true,
        "detail": "pygame.newbuffer",
        "documentation": {}
    },
    {
        "label": "struct",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "struct",
        "description": "struct",
        "detail": "struct",
        "documentation": {}
    },
    {
        "label": "array",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "array",
        "description": "array",
        "detail": "array",
        "documentation": {}
    },
    {
        "label": "array",
        "importPath": "array",
        "description": "array",
        "isExtraImport": true,
        "detail": "array",
        "documentation": {}
    },
    {
        "label": "itertools",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "itertools",
        "description": "itertools",
        "detail": "itertools",
        "documentation": {}
    },
    {
        "label": "zlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "zlib",
        "description": "zlib",
        "detail": "zlib",
        "documentation": {}
    },
    {
        "label": "pygame.threads",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.threads",
        "description": "pygame.threads",
        "detail": "pygame.threads",
        "documentation": {}
    },
    {
        "label": "FuncResult",
        "importPath": "pygame.threads",
        "description": "pygame.threads",
        "isExtraImport": true,
        "detail": "pygame.threads",
        "documentation": {}
    },
    {
        "label": "tmap",
        "importPath": "pygame.threads",
        "description": "pygame.threads",
        "isExtraImport": true,
        "detail": "pygame.threads",
        "documentation": {}
    },
    {
        "label": "WorkerQueue",
        "importPath": "pygame.threads",
        "description": "pygame.threads",
        "isExtraImport": true,
        "detail": "pygame.threads",
        "documentation": {}
    },
    {
        "label": "Empty",
        "importPath": "pygame.threads",
        "description": "pygame.threads",
        "isExtraImport": true,
        "detail": "pygame.threads",
        "documentation": {}
    },
    {
        "label": "STOP",
        "importPath": "pygame.threads",
        "description": "pygame.threads",
        "isExtraImport": true,
        "detail": "pygame.threads",
        "documentation": {}
    },
    {
        "label": "pprint",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pprint",
        "description": "pprint",
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "pformat",
        "importPath": "pprint",
        "description": "pprint",
        "isExtraImport": true,
        "detail": "pprint",
        "documentation": {}
    },
    {
        "label": "inspect",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "inspect",
        "description": "inspect",
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "isclass",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "ismodule",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "getdoc",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "isgetsetdescriptor",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "getmembers",
        "importPath": "inspect",
        "description": "inspect",
        "isExtraImport": true,
        "detail": "inspect",
        "documentation": {}
    },
    {
        "label": "optparse",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "optparse",
        "description": "optparse",
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "OptionParser",
        "importPath": "optparse",
        "description": "optparse",
        "isExtraImport": true,
        "detail": "optparse",
        "documentation": {}
    },
    {
        "label": "relative_indentation",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "relative_indentation",
        "description": "relative_indentation",
        "detail": "relative_indentation",
        "documentation": {}
    },
    {
        "label": "textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "textwrap",
        "description": "textwrap",
        "detail": "textwrap",
        "documentation": {}
    },
    {
        "label": "docs_as_dict",
        "importPath": "makeref",
        "description": "makeref",
        "isExtraImport": true,
        "detail": "makeref",
        "documentation": {}
    },
    {
        "label": "trunk_relative_path",
        "importPath": "test_utils",
        "description": "test_utils",
        "isExtraImport": true,
        "detail": "test_utils",
        "documentation": {}
    },
    {
        "label": "sys,os,glob,textwrap",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys.os.glob.textwrap",
        "description": "sys.os.glob.textwrap",
        "detail": "sys.os.glob.textwrap",
        "documentation": {}
    },
    {
        "label": "weakref",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "weakref",
        "description": "weakref",
        "detail": "weakref",
        "documentation": {}
    },
    {
        "label": "gc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "gc",
        "description": "gc",
        "detail": "gc",
        "documentation": {}
    },
    {
        "label": "BufferProxy",
        "importPath": "pygame.bufferproxy",
        "description": "pygame.bufferproxy",
        "isExtraImport": true,
        "detail": "pygame.bufferproxy",
        "documentation": {}
    },
    {
        "label": "BufferProxy",
        "importPath": "pygame.bufferproxy",
        "description": "pygame.bufferproxy",
        "isExtraImport": true,
        "detail": "pygame.bufferproxy",
        "documentation": {}
    },
    {
        "label": "question",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "prompt",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "fixture_path",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "SurfaceSubclass",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "example_path",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "example_path",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "png",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "example_path",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "example_path",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "AssertRaisesRegexMixin",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "SurfaceSubclass",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "trunk_relative_path",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "example_path",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "AssertRaisesRegexMixin",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "SurfaceSubclass",
        "importPath": "pygame.tests.test_utils",
        "description": "pygame.tests.test_utils",
        "isExtraImport": true,
        "detail": "pygame.tests.test_utils",
        "documentation": {}
    },
    {
        "label": "test_utils",
        "importPath": "pygame.tests",
        "description": "pygame.tests",
        "isExtraImport": true,
        "detail": "pygame.tests",
        "documentation": {}
    },
    {
        "label": "font_test",
        "importPath": "pygame.tests",
        "description": "pygame.tests",
        "isExtraImport": true,
        "detail": "pygame.tests",
        "documentation": {}
    },
    {
        "label": "test_utils",
        "importPath": "pygame.tests",
        "description": "pygame.tests",
        "isExtraImport": true,
        "detail": "pygame.tests",
        "documentation": {}
    },
    {
        "label": "test_utils",
        "importPath": "pygame.tests",
        "description": "pygame.tests",
        "isExtraImport": true,
        "detail": "pygame.tests",
        "documentation": {}
    },
    {
        "label": "test_utils",
        "importPath": "pygame.tests",
        "description": "pygame.tests",
        "isExtraImport": true,
        "detail": "pygame.tests",
        "documentation": {}
    },
    {
        "label": "race_condition_notification",
        "importPath": "pygame.tests.event_test",
        "description": "pygame.tests.event_test",
        "isExtraImport": true,
        "detail": "pygame.tests.event_test",
        "documentation": {}
    },
    {
        "label": "pygame.ftfont",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.ftfont",
        "description": "pygame.ftfont",
        "detail": "pygame.ftfont",
        "documentation": {}
    },
    {
        "label": "pygame.key",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.key",
        "description": "pygame.key",
        "detail": "pygame.key",
        "documentation": {}
    },
    {
        "label": "pygame.mask",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.mask",
        "description": "pygame.mask",
        "detail": "pygame.mask",
        "documentation": {}
    },
    {
        "label": "pygame.math",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.math",
        "description": "pygame.math",
        "detail": "pygame.math",
        "documentation": {}
    },
    {
        "label": "Vector2",
        "importPath": "pygame.math",
        "description": "pygame.math",
        "isExtraImport": true,
        "detail": "pygame.math",
        "documentation": {}
    },
    {
        "label": "Vector3",
        "importPath": "pygame.math",
        "description": "pygame.math",
        "isExtraImport": true,
        "detail": "pygame.math",
        "documentation": {}
    },
    {
        "label": "pygame.sndarray",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.sndarray",
        "description": "pygame.sndarray",
        "detail": "pygame.sndarray",
        "documentation": {}
    },
    {
        "label": "read_setup_file",
        "importPath": "distutils.extension",
        "description": "distutils.extension",
        "isExtraImport": true,
        "detail": "distutils.extension",
        "documentation": {}
    },
    {
        "label": "install_data",
        "importPath": "distutils.command.install_data",
        "description": "distutils.command.install_data",
        "isExtraImport": true,
        "detail": "distutils.command.install_data",
        "documentation": {}
    },
    {
        "label": "sdist",
        "importPath": "distutils.command.sdist",
        "description": "distutils.command.sdist",
        "isExtraImport": true,
        "detail": "distutils.command.sdist",
        "documentation": {}
    },
    {
        "label": "setup",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "find_packages",
        "importPath": "setuptools",
        "description": "setuptools",
        "isExtraImport": true,
        "detail": "setuptools",
        "documentation": {}
    },
    {
        "label": "Simulation",
        "importPath": "simulation",
        "description": "simulation",
        "isExtraImport": true,
        "detail": "simulation",
        "documentation": {}
    },
    {
        "label": "Source",
        "importPath": "sources",
        "description": "sources",
        "isExtraImport": true,
        "detail": "sources",
        "documentation": {}
    },
    {
        "label": "Graph",
        "importPath": "graph",
        "description": "graph",
        "isExtraImport": true,
        "detail": "graph",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "people",
        "description": "people",
        "isExtraImport": true,
        "detail": "people",
        "documentation": {}
    },
    {
        "label": "Genes",
        "importPath": "people",
        "description": "people",
        "isExtraImport": true,
        "detail": "people",
        "documentation": {}
    },
    {
        "label": "add_files",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.bundle_docs",
        "description": "pygame-1.9.6.buildconfig.bundle_docs",
        "peekOfCode": "def add_files(bundle, root, alias, file_names):\n    for file_name in file_names:\n        file_alias = os.path.join(alias, file_name)\n        print \" \", file_name, \"-->\", file_alias\n        bundle.add(os.path.join(root, file_name), file_alias)\ndef add_directory(bundle, root, alias):\n    reject_dirs = re.compile(r'(.svn)$')\n    # Since it is the file extension that is of interest the reversed\n    # file name is checked.\n    reject_files_reversed = re.compile(r'((~.*)|(cyp\\..*))')",
        "detail": "pygame-1.9.6.buildconfig.bundle_docs",
        "documentation": {}
    },
    {
        "label": "add_directory",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.bundle_docs",
        "description": "pygame-1.9.6.buildconfig.bundle_docs",
        "peekOfCode": "def add_directory(bundle, root, alias):\n    reject_dirs = re.compile(r'(.svn)$')\n    # Since it is the file extension that is of interest the reversed\n    # file name is checked.\n    reject_files_reversed = re.compile(r'((~.*)|(cyp\\..*))')\n    for sub_root, directories, files in os.walk(root):\n        directories[:] = [d for d in directories if reject_dirs.match(d) is None]\n        files[:] = [f for f in files if reject_files_reversed.match(f[-1::-1]) is None]\n        sub_alias = os.path.join(alias, sub_root[len(root)+1:])\n        add_files(bundle, sub_root, sub_alias, files)",
        "detail": "pygame-1.9.6.buildconfig.bundle_docs",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.bundle_docs",
        "description": "pygame-1.9.6.buildconfig.bundle_docs",
        "peekOfCode": "def main():\n    bundle_name_elements = ['pygame', 'docs']\n    setup = open('setup.py', 'r')\n    try:\n        match = re.search(r'\"version\":[ \\t]+\"([0-9]+\\.[0-9]+)\\.[^\"]+\"', setup.read())\n    finally:\n        setup.close()\n    if match is None:\n        print \"*** Unable to find Pygame version in setup.py\"\n        version = ''",
        "detail": "pygame-1.9.6.buildconfig.bundle_docs",
        "documentation": {}
    },
    {
        "label": "print_",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config",
        "description": "pygame-1.9.6.buildconfig.config",
        "peekOfCode": "def print_(*args, **kwds):\n    \"\"\"Simular to the Python 3.0 print function\"\"\"\n    # This not only supports MSYS but is also a head start on the move to\n    # Python 3.0. Also, this function can be overridden for testing.\n    msysio.print_(*args, **kwds)\ndef confirm(message, default=None):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():\n        if default is None:\n            raise RuntimeError(\"Non interactive, tried to ask: %s\" % message)",
        "detail": "pygame-1.9.6.buildconfig.config",
        "documentation": {}
    },
    {
        "label": "confirm",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config",
        "description": "pygame-1.9.6.buildconfig.config",
        "peekOfCode": "def confirm(message, default=None):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():\n        if default is None:\n            raise RuntimeError(\"Non interactive, tried to ask: %s\" % message)\n        return default\n    reply = msysio.raw_input_(\"\\n%s [Y/n]:\" % message)\n    if reply and reply[0].lower() == 'n':\n        return False\n    return True",
        "detail": "pygame-1.9.6.buildconfig.config",
        "documentation": {}
    },
    {
        "label": "is_msys_mingw",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config",
        "description": "pygame-1.9.6.buildconfig.config",
        "peekOfCode": "def is_msys_mingw():\n    \"\"\"Return true if this in an MinGW/MSYS build\n    The user may prompted for confirmation so only call this function\n    once.\n    \"\"\"\n    return False\n    # if msysio.is_msys():\n    #     return 1\n    # if ('MINGW_ROOT_DIRECTORY' in os.environ or\n    #     os.path.isfile(mingwcfg.path)):",
        "detail": "pygame-1.9.6.buildconfig.config",
        "documentation": {}
    },
    {
        "label": "prepdep",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config",
        "description": "pygame-1.9.6.buildconfig.config",
        "peekOfCode": "def prepdep(dep, basepath):\n    \"add some vars to a dep\"\n    if dep.libs:\n        dep.line = dep.name + ' ='\n        for lib in dep.libs:\n            dep.line += ' -l' + lib\n    else:\n        dep.line = dep.name + ' = -I.'\n    dep.varname = '$('+dep.name+')'\n    if not dep.found:",
        "detail": "pygame-1.9.6.buildconfig.config",
        "documentation": {}
    },
    {
        "label": "writesetupfile",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config",
        "description": "pygame-1.9.6.buildconfig.config",
        "peekOfCode": "def writesetupfile(deps, basepath, additional_lines, sdl2=False):\n    \"create a modified copy of Setup.SDLx.in\"\n    if sdl2:\n        origsetup = open(os.path.join(BASE_PATH, 'buildconfig', 'Setup.SDL2.in'), 'r')\n    else:\n        origsetup = open(os.path.join(BASE_PATH, 'buildconfig', 'Setup.SDL1.in'), 'r')\n    newsetup = open(os.path.join(BASE_PATH, 'Setup'), 'w')\n    line = ''\n    while line.find('#--StartConfig') == -1:\n        newsetup.write(line)",
        "detail": "pygame-1.9.6.buildconfig.config",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config",
        "description": "pygame-1.9.6.buildconfig.config",
        "peekOfCode": "def main(auto=False):\n    additional_platform_setup = []\n    sdl2 = \"-sdl2\" in sys.argv\n    kwds = {}\n    if sdl2:\n        kwds['sdl2'] = True\n    if (sys.platform == 'win32' and\n        # Note that msys builds supported for 2.6 and greater. Use prebuilt.\n        (sys.version_info >= (2, 6) or not is_msys_mingw())):\n        print_('Using WINDOWS configuration...\\n')",
        "detail": "pygame-1.9.6.buildconfig.config",
        "documentation": {}
    },
    {
        "label": "BASE_PATH",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.config",
        "description": "pygame-1.9.6.buildconfig.config",
        "peekOfCode": "BASE_PATH = '.'\ndef print_(*args, **kwds):\n    \"\"\"Simular to the Python 3.0 print function\"\"\"\n    # This not only supports MSYS but is also a head start on the move to\n    # Python 3.0. Also, this function can be overridden for testing.\n    msysio.print_(*args, **kwds)\ndef confirm(message, default=None):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():\n        if default is None:",
        "detail": "pygame-1.9.6.buildconfig.config",
        "documentation": {}
    },
    {
        "label": "Dependency",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_darwin",
        "description": "pygame-1.9.6.buildconfig.config_darwin",
        "peekOfCode": "class Dependency:\n    libext = '.dylib'\n    def __init__(self, name, checkhead, checklib, libs):\n        self.name = name\n        self.inc_dir = None\n        self.lib_dir = None\n        self.libs = libs\n        self.found = 0\n        self.checklib = checklib + self.libext\n        self.checkhead = checkhead",
        "detail": "pygame-1.9.6.buildconfig.config_darwin",
        "documentation": {}
    },
    {
        "label": "FrameworkDependency",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_darwin",
        "description": "pygame-1.9.6.buildconfig.config_darwin",
        "peekOfCode": "class FrameworkDependency(Dependency):\n    def configure(self, incdirs, libdirs):\n        BASE_DIRS = '/', os.path.expanduser('~/'), '/System/'\n        for n in BASE_DIRS:\n            n += 'Library/Frameworks/'\n            fmwk = n + self.libs + '.framework/Versions/Current/'\n            if os.path.isfile(fmwk + self.libs):\n                print ('Framework ' + self.libs + ' found')\n                self.found = 1\n                self.inc_dir = fmwk + 'Headers'",
        "detail": "pygame-1.9.6.buildconfig.config_darwin",
        "documentation": {}
    },
    {
        "label": "DependencyPython",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_darwin",
        "description": "pygame-1.9.6.buildconfig.config_darwin",
        "peekOfCode": "class DependencyPython:\n    def __init__(self, name, module, header):\n        self.name = name\n        self.lib_dir = ''\n        self.inc_dir = ''\n        self.libs = []\n        self.cflags = ''\n        self.found = 0\n        self.ver = '0'\n        self.module = module",
        "detail": "pygame-1.9.6.buildconfig.config_darwin",
        "documentation": {}
    },
    {
        "label": "find_freetype",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_darwin",
        "description": "pygame-1.9.6.buildconfig.config_darwin",
        "peekOfCode": "def find_freetype():\n    \"\"\" modern freetype uses pkg-config. However, some older systems don't have that.\n    \"\"\"\n    pkg_config = DependencyProg(\n        'FREETYPE', 'FREETYPE_CONFIG', 'pkg-config freetype2', '2.0',\n        ['freetype2'], '--modversion'\n    )\n    if pkg_config.found:\n        return pkg_config\n    #DependencyProg('FREETYPE', 'FREETYPE_CONFIG', '/usr/X11R6/bin/freetype-config', '2.0',",
        "detail": "pygame-1.9.6.buildconfig.config_darwin",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_darwin",
        "description": "pygame-1.9.6.buildconfig.config_darwin",
        "peekOfCode": "def main(sdl2=False):\n    if sdl2:\n        DEPS = [\n            [DependencyProg('SDL', 'SDL_CONFIG', 'sdl2-config', '2.0', ['sdl'])],\n            [Dependency('FONT', ['SDL_ttf.h', 'SDL2/SDL_ttf.h'], 'libSDL2_ttf', ['SDL2_ttf'])],\n            [Dependency('IMAGE', ['SDL_image.h', 'SDL2/SDL_image.h'], 'libSDL2_image', ['SDL2_image'])],\n            [Dependency('MIXER', ['SDL_mixer.h', 'SDL2/SDL_mixer.h'], 'libSDL2_mixer', ['SDL2_mixer'])],\n        ]\n    else:\n        DEPS = [",
        "detail": "pygame-1.9.6.buildconfig.config_darwin",
        "documentation": {}
    },
    {
        "label": "ConfigError",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "class ConfigError(Exception):\n    pass\ndef path_join(a, *p):\n    return os.path.join(a, *p).replace(os.sep, '/')\npath_split = os.path.split\ndef print_(*args, **kwds):\n    return msys.msys_print(*args, **kwds)\ndef confirm(message):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "DependencyProg",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "class DependencyProg:\n    needs_dll = True\n    def __init__(self, name, envname, exename, minver, msys, defaultlibs=None):\n        if defaultlibs is None:\n            defaultlibs = [dll.name_to_root(name)]\n        self.name = name\n        try:\n            command = os.environ[envname]\n        except KeyError:\n            command = exename",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "Dependency",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "class Dependency:\n    needs_dll = True\n    def __init__(self, name, checkhead, checklib, libs=None):\n        if libs is None:\n            libs = [dll.name_to_root(name)]\n        self.name = name\n        self.inc_dir = None\n        self.lib_dir = None\n        self.libs = libs\n        self.found = 0",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "DependencyPython",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "class DependencyPython:\n    needs_dll = False\n    def __init__(self, name, module, header):\n        self.name = name\n        self.lib_dir = ''\n        self.inc_dir = ''\n        self.libs = []\n        self.cflags = ''\n        self.found = 0\n        self.ver = '0'",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "DependencyDLL",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "class DependencyDLL:\n    needs_dll = False\n    def __init__(self, name, libs=None):\n        if libs is None:\n            libs = dll.libraries(name)\n        self.name = 'COPYLIB_' + dll.name_to_root(name)\n        self.inc_dir = None\n        self.lib_dir = '_'\n        self.libs = libs\n        self.found = 1  # Alway found to make its COPYLIB work",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "DependencyWin",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "class DependencyWin:\n    needs_dll = False\n    def __init__(self, name, cflags):\n        self.name = name\n        self.inc_dir = None\n        self.lib_dir = None\n        self.libs = []\n        self.found = 1\n        self.cflags = cflags\n    def configure(self, incdirs, libdirs):",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "path_join",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "def path_join(a, *p):\n    return os.path.join(a, *p).replace(os.sep, '/')\npath_split = os.path.split\ndef print_(*args, **kwds):\n    return msys.msys_print(*args, **kwds)\ndef confirm(message):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():\n        return False\n    reply = msys.msys_raw_input(\"\\n%s [Y/n]:\" % message)",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "print_",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "def print_(*args, **kwds):\n    return msys.msys_print(*args, **kwds)\ndef confirm(message):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():\n        return False\n    reply = msys.msys_raw_input(\"\\n%s [Y/n]:\" % message)\n    if reply and string.lower(reply[0]) == 'n':\n        return False\n    return True",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "confirm",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "def confirm(message):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():\n        return False\n    reply = msys.msys_raw_input(\"\\n%s [Y/n]:\" % message)\n    if reply and string.lower(reply[0]) == 'n':\n        return False\n    return True\nclass DependencyProg:\n    needs_dll = True",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "def main():\n    m = msys.Msys(require_mingw=False)\n    print_('\\nHunting dependencies...')\n    DEPS = [\n        DependencyProg('SDL', 'SDL_CONFIG', 'sdl-config', '1.2.13', m),\n        Dependency('FONT', 'SDL_ttf.h', 'libSDL_ttf.dll.a'),\n        Dependency('IMAGE', 'SDL_image.h', 'libSDL_image.dll.a'),\n        Dependency('MIXER', 'SDL_mixer.h', 'libSDL_mixer.dll.a'),\n        Dependency('PNG', 'png.h', 'libpng.dll.a'),\n        Dependency('JPEG', 'jpeglib.h', 'libjpeg.dll.a'),",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "configcommand",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "configcommand = os.environ.get('SDL_CONFIG', 'sdl-config',)\nconfigcommand = configcommand + ' --version --cflags --libs'\nlocalbase = os.environ.get('LOCALBASE', '')\n#these get prefixes with '/usr/local' and /mingw or the $LOCALBASE\norigincdirs = ['/include', '/include/SDL', '/include/SDL11',\n               '/include/libpng12', ]\noriglibdirs = ['/lib']\nclass ConfigError(Exception):\n    pass\ndef path_join(a, *p):",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "configcommand",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "configcommand = configcommand + ' --version --cflags --libs'\nlocalbase = os.environ.get('LOCALBASE', '')\n#these get prefixes with '/usr/local' and /mingw or the $LOCALBASE\norigincdirs = ['/include', '/include/SDL', '/include/SDL11',\n               '/include/libpng12', ]\noriglibdirs = ['/lib']\nclass ConfigError(Exception):\n    pass\ndef path_join(a, *p):\n    return os.path.join(a, *p).replace(os.sep, '/')",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "localbase",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "localbase = os.environ.get('LOCALBASE', '')\n#these get prefixes with '/usr/local' and /mingw or the $LOCALBASE\norigincdirs = ['/include', '/include/SDL', '/include/SDL11',\n               '/include/libpng12', ]\noriglibdirs = ['/lib']\nclass ConfigError(Exception):\n    pass\ndef path_join(a, *p):\n    return os.path.join(a, *p).replace(os.sep, '/')\npath_split = os.path.split",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "origincdirs",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "origincdirs = ['/include', '/include/SDL', '/include/SDL11',\n               '/include/libpng12', ]\noriglibdirs = ['/lib']\nclass ConfigError(Exception):\n    pass\ndef path_join(a, *p):\n    return os.path.join(a, *p).replace(os.sep, '/')\npath_split = os.path.split\ndef print_(*args, **kwds):\n    return msys.msys_print(*args, **kwds)",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "origlibdirs",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "origlibdirs = ['/lib']\nclass ConfigError(Exception):\n    pass\ndef path_join(a, *p):\n    return os.path.join(a, *p).replace(os.sep, '/')\npath_split = os.path.split\ndef print_(*args, **kwds):\n    return msys.msys_print(*args, **kwds)\ndef confirm(message):\n    \"ask a yes/no question, return result\"",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "path_split",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.config_msys",
        "description": "pygame-1.9.6.buildconfig.config_msys",
        "peekOfCode": "path_split = os.path.split\ndef print_(*args, **kwds):\n    return msys.msys_print(*args, **kwds)\ndef confirm(message):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():\n        return False\n    reply = msys.msys_raw_input(\"\\n%s [Y/n]:\" % message)\n    if reply and string.lower(reply[0]) == 'n':\n        return False",
        "detail": "pygame-1.9.6.buildconfig.config_msys",
        "documentation": {}
    },
    {
        "label": "DependencyProg",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_unix",
        "description": "pygame-1.9.6.buildconfig.config_unix",
        "peekOfCode": "class DependencyProg:\n    def __init__(self, name, envname, exename, minver, defaultlibs, version_flag=\"--version\"):\n        self.name = name\n        command = os.environ.get(envname, exename)\n        self.lib_dir = ''\n        self.inc_dir = ''\n        self.libs = []\n        self.cflags = ''\n        try:\n            # freetype-config for freetype2 version 2.3.7 on Debian lenny",
        "detail": "pygame-1.9.6.buildconfig.config_unix",
        "documentation": {}
    },
    {
        "label": "Dependency",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_unix",
        "description": "pygame-1.9.6.buildconfig.config_unix",
        "peekOfCode": "class Dependency:\n    def __init__(self, name, checkhead, checklib, libs):\n        self.name = name\n        self.inc_dir = None\n        self.lib_dir = None\n        self.libs = libs\n        self.found = 0\n        self.checklib = checklib\n        self.checkhead = checkhead\n        self.cflags = ''",
        "detail": "pygame-1.9.6.buildconfig.config_unix",
        "documentation": {}
    },
    {
        "label": "DependencyPython",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_unix",
        "description": "pygame-1.9.6.buildconfig.config_unix",
        "peekOfCode": "class DependencyPython:\n    def __init__(self, name, module, header):\n        self.name = name\n        self.lib_dir = ''\n        self.inc_dir = ''\n        self.libs = []\n        self.cflags = ''\n        self.found = 0\n        self.ver = '0'\n        self.module = module",
        "detail": "pygame-1.9.6.buildconfig.config_unix",
        "documentation": {}
    },
    {
        "label": "confirm",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_unix",
        "description": "pygame-1.9.6.buildconfig.config_unix",
        "peekOfCode": "def confirm(message):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():\n        return False\n    reply = raw_input('\\n' + message + ' [Y/n]:')\n    if reply and (reply[0].lower()) == 'n':\n        return False\n    return True\nclass DependencyProg:\n    def __init__(self, name, envname, exename, minver, defaultlibs, version_flag=\"--version\"):",
        "detail": "pygame-1.9.6.buildconfig.config_unix",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_unix",
        "description": "pygame-1.9.6.buildconfig.config_unix",
        "peekOfCode": "def main(sdl2=False):\n    global origincdirs, origlibdirs\n    #these get prefixes with '/usr' and '/usr/local' or the $LOCALBASE\n    if sdl2:\n        origincdirs = ['/include', '/include/SDL2']\n        origlibdirs = ['/lib','/lib64','/X11R6/lib',\n                       '/lib/i386-linux-gnu', '/lib/x86_64-linux-gnu']\n    else:\n        origincdirs = ['/include', '/include/SDL', '/include/SDL']\n        origlibdirs = ['/lib','/lib64','/X11R6/lib']",
        "detail": "pygame-1.9.6.buildconfig.config_unix",
        "documentation": {}
    },
    {
        "label": "configcommand",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.config_unix",
        "description": "pygame-1.9.6.buildconfig.config_unix",
        "peekOfCode": "configcommand = os.environ.get('SDL_CONFIG', 'sdl-config',)\nconfigcommand = configcommand + ' --version --cflags --libs'\nlocalbase = os.environ.get('LOCALBASE', '')\nif os.environ.get('PYGAME_EXTRA_BASE', ''):\n    extrabases = os.environ['PYGAME_EXTRA_BASE'].split(':')\nelse:\n    extrabases = []\ndef confirm(message):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():",
        "detail": "pygame-1.9.6.buildconfig.config_unix",
        "documentation": {}
    },
    {
        "label": "configcommand",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.config_unix",
        "description": "pygame-1.9.6.buildconfig.config_unix",
        "peekOfCode": "configcommand = configcommand + ' --version --cflags --libs'\nlocalbase = os.environ.get('LOCALBASE', '')\nif os.environ.get('PYGAME_EXTRA_BASE', ''):\n    extrabases = os.environ['PYGAME_EXTRA_BASE'].split(':')\nelse:\n    extrabases = []\ndef confirm(message):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():\n        return False",
        "detail": "pygame-1.9.6.buildconfig.config_unix",
        "documentation": {}
    },
    {
        "label": "localbase",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.config_unix",
        "description": "pygame-1.9.6.buildconfig.config_unix",
        "peekOfCode": "localbase = os.environ.get('LOCALBASE', '')\nif os.environ.get('PYGAME_EXTRA_BASE', ''):\n    extrabases = os.environ['PYGAME_EXTRA_BASE'].split(':')\nelse:\n    extrabases = []\ndef confirm(message):\n    \"ask a yes/no question, return result\"\n    if not sys.stdout.isatty():\n        return False\n    reply = raw_input('\\n' + message + ' [Y/n]:')",
        "detail": "pygame-1.9.6.buildconfig.config_unix",
        "documentation": {}
    },
    {
        "label": "sdl_lib_name",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.config_unix",
        "description": "pygame-1.9.6.buildconfig.config_unix",
        "peekOfCode": "sdl_lib_name = 'SDL'\ndef main(sdl2=False):\n    global origincdirs, origlibdirs\n    #these get prefixes with '/usr' and '/usr/local' or the $LOCALBASE\n    if sdl2:\n        origincdirs = ['/include', '/include/SDL2']\n        origlibdirs = ['/lib','/lib64','/X11R6/lib',\n                       '/lib/i386-linux-gnu', '/lib/x86_64-linux-gnu']\n    else:\n        origincdirs = ['/include', '/include/SDL', '/include/SDL']",
        "detail": "pygame-1.9.6.buildconfig.config_unix",
        "documentation": {}
    },
    {
        "label": "Dependency",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "class Dependency(object):\n    huntpaths = ['..', '..\\\\..', '..\\\\*', '..\\\\..\\\\*']\n    inc_hunt = ['include']\n    lib_hunt = ['VisualC\\\\SDL\\\\Release', 'VisualC\\\\Release', 'Release', 'lib']\n    check_hunt_roots = True\n    def __init__(self, name, wildcards, libs=None, required=0, find_header='', find_lib=''):\n        if libs is None:\n            libs = []\n        self.name = name\n        self.wildcards = wildcards",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "DependencyPython",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "class DependencyPython(object):\n    def __init__(self, name, module, header):\n        self.name = name\n        self.lib_dir = ''\n        self.inc_dir = ''\n        self.libs = []\n        self.cflags = ''\n        self.found = False\n        self.ver = '0'\n        self.module = module",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "DependencyDLL",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "class DependencyDLL(Dependency):\n    def __init__(self, dll_regex, lib=None, wildcards=None, libs=None, link=None):\n        if lib is None:\n            lib = link.libs[0]\n        Dependency.__init__(self, 'COPYLIB_' + lib, wildcards, libs)\n        self.lib_name = lib\n        self.test = re.compile(dll_regex, re.I).match\n        self.lib_dir = '_'\n        self.link = link\n    def configure(self):",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "DependencyDummy",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "class DependencyDummy(object):\n    def __init__(self, name):\n        self.name = name\n        self.inc_dir = None\n        self.lib_dir = None\n        self.libs = []\n        self.found = True\n        self.cflags = ''\n    def configure(self):\n        pass",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "DependencyWin",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "class DependencyWin(object):\n    def __init__(self, name, cflags):\n        self.name = name\n        self.inc_dir = None\n        self.lib_dir = None\n        self.libs = []\n        self.found = True\n        self.cflags = cflags\n    def configure(self):\n        pass",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "DependencyGroup",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "class DependencyGroup(object):\n    def __init__(self):\n        self.dependencies =[]\n        self.dlls = []\n    def add(self, name, lib, wildcards, dll_regex, libs=None, required=0, find_header='', find_lib=''):\n        if libs is None:\n            libs = []\n        if dll_regex:\n            dep = Dependency(name, wildcards, [lib], required, find_header, find_lib)\n            self.dependencies.append(dep)",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "get_ptr_size",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "def get_ptr_size():\n    return 64 if sys.maxsize > 2**32 else 32\ndef as_machine_type(size):\n    \"\"\"Return pointer bit size as a Windows machine type\"\"\"\n    if size == 32:\n        return \"x86\"\n    if size == 64:\n        return \"x64\"\n    raise BuildError(\"Unknown pointer size {}\".format(size))\ndef get_machine_type():",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "as_machine_type",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "def as_machine_type(size):\n    \"\"\"Return pointer bit size as a Windows machine type\"\"\"\n    if size == 32:\n        return \"x86\"\n    if size == 64:\n        return \"x64\"\n    raise BuildError(\"Unknown pointer size {}\".format(size))\ndef get_machine_type():\n    return as_machine_type(get_ptr_size())\nclass Dependency(object):",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "get_machine_type",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "def get_machine_type():\n    return as_machine_type(get_ptr_size())\nclass Dependency(object):\n    huntpaths = ['..', '..\\\\..', '..\\\\*', '..\\\\..\\\\*']\n    inc_hunt = ['include']\n    lib_hunt = ['VisualC\\\\SDL\\\\Release', 'VisualC\\\\Release', 'Release', 'lib']\n    check_hunt_roots = True\n    def __init__(self, name, wildcards, libs=None, required=0, find_header='', find_lib=''):\n        if libs is None:\n            libs = []",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "def setup(sdl2):\n    DEPS = DependencyGroup()\n    if not sdl2:\n        DEPS.add('SDL', 'SDL', ['SDL-[1-9].*'], r'(lib){0,1}SDL\\.dll$', required=1,\n                 find_header='SDL\\.h')\n        DEPS.add('FONT', 'SDL_ttf', ['SDL_ttf-[2-9].*'], r'(lib){0,1}SDL_ttf\\.dll$', ['SDL', 'z'],\n                 find_header='SDL_ttf\\.h')\n        DEPS.add('IMAGE', 'SDL_image', ['SDL_image-[1-9].*'], r'(lib){0,1}SDL_image\\.dll$',\n                 ['SDL', 'jpeg', 'png', 'tiff'], 0, find_header='SDL_image\\.h'),\n        DEPS.add('MIXER', 'SDL_mixer', ['SDL_mixer-[1-9].*'], r'(lib){0,1}SDL_mixer\\.dll$',",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "setup_prebuilt_sdl2",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "def setup_prebuilt_sdl2(prebuilt_dir):\n    Dependency.huntpaths[:] = [prebuilt_dir]\n    Dependency.lib_hunt.extend([\n        '',\n        'lib',\n        os.path.join('lib', get_machine_type()),\n    ])\n    Dependency.inc_hunt.append('')\n    DEPS = DependencyGroup()\n    DEPS.add('SDL', 'SDL2', ['SDL2-[1-9].*'], r'(lib){0,1}SDL2\\.dll$', required=1)",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "setup_prebuilt_sdl1",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "def setup_prebuilt_sdl1(prebuilt_dir):\n    setup_ = open('Setup', 'w')\n    is_pypy = '__pypy__' in sys.builtin_module_names\n    import platform\n    is_python3 = platform.python_version().startswith('3')\n    try:\n        try:\n            setup_win_in = open(os.path.join(prebuilt_dir, 'Setup_Win.in'))\n        except IOError:\n            raise IOError(\"%s missing required Setup_Win.in\" % prebuilt_dir)",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.config_win",
        "description": "pygame-1.9.6.buildconfig.config_win",
        "peekOfCode": "def main(sdl2=False):\n    machine_type = get_machine_type()\n    prebuilt_dir = 'prebuilt-%s' % machine_type\n    use_prebuilt = '-prebuilt' in sys.argv\n    auto_download = 'PYGAME_DOWNLOAD_PREBUILT' in os.environ\n    if auto_download:\n        auto_download = os.environ['PYGAME_DOWNLOAD_PREBUILT'] == '1'\n    try:\n        from . import download_win_prebuilt\n    except ImportError:",
        "detail": "pygame-1.9.6.buildconfig.config_win",
        "documentation": {}
    },
    {
        "label": "download_sha1_unzip",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "description": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "peekOfCode": "def download_sha1_unzip(url, checksum, save_to_directory, unzip=True):\n    \"\"\" This\n    - downloads a url,\n    - sha1 checksum check,\n    - save_to_directory,\n    - then unzips it.\n    Does not download again if the file is there.\n    Does not unzip again if the file is there.\n    \"\"\"\n    import requests",
        "detail": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "documentation": {}
    },
    {
        "label": "get_urls",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "description": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "peekOfCode": "def get_urls(x86=True, x64=True, sdl2=True):\n    url_sha1 = []\n    if sdl2:\n        url_sha1.extend([\n            [\n            'https://www.libsdl.org/release/SDL2-devel-2.0.9-VC.zip',\n            '0b4d2a9bd0c66847d669ae664c5b9e2ae5cc8f00',\n            ],\n            [\n            'https://www.libsdl.org/projects/SDL_image/release/SDL2_image-devel-2.0.4-VC.zip',",
        "detail": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "documentation": {}
    },
    {
        "label": "download_prebuilts",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "description": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "peekOfCode": "def download_prebuilts(temp_dir, x86=True, x64=True, sdl2=True):\n    \"\"\" For downloading prebuilt dependencies.\n    \"\"\"\n    from distutils.dir_util import mkpath\n    if not os.path.exists(temp_dir):\n        print(\"Making dir :%s:\" % temp_dir)\n        mkpath(temp_dir)\n    for url, checksum in get_urls(x86=x86, x64=x64, sdl2=sdl2):\n        download_sha1_unzip(url, checksum, temp_dir, 1)\ndef create_ignore_target_fnc(x64=False, x86=False):",
        "detail": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "documentation": {}
    },
    {
        "label": "create_ignore_target_fnc",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "description": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "peekOfCode": "def create_ignore_target_fnc(x64=False, x86=False):\n    if not x64 and not x86:\n        return None\n    strs = []\n    if x64:\n        strs.append('x64')\n    if x86:\n        strs.append('x86')\n    def ignore_func(dir, contents):\n        for target in strs:",
        "detail": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "documentation": {}
    },
    {
        "label": "copytree",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "description": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "peekOfCode": "def copytree(src, dst, symlinks=False, ignore=None):\n    \"\"\"like shutil.copytree() but ignores existing files\n    https://stackoverflow.com/a/22331852/1239986\n    \"\"\"\n    if not os.path.exists(dst):\n        os.makedirs(dst)\n        shutil.copystat(src, dst)\n    lst = os.listdir(src)\n    if ignore:\n        excl = ignore(src, lst)",
        "detail": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "documentation": {}
    },
    {
        "label": "place_downloaded_prebuilts",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "description": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "peekOfCode": "def place_downloaded_prebuilts(temp_dir, move_to_dir, x86=True, x64=True, sdl2=True):\n    \"\"\" puts the downloaded prebuilt files into the right place.\n    Leaves the files in temp_dir. copies to move_to_dir\n    \"\"\"\n    prebuilt_x64 = os.path.join(\n        temp_dir,\n        'prebuilt-x64-pygame-1.9.2-20150922',\n        'prebuilt-x64'\n    )\n    prebuilt_x86 = os.path.join(",
        "detail": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "documentation": {}
    },
    {
        "label": "update",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "description": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "peekOfCode": "def update(x86=True, x64=True, sdl2=True):\n    move_to_dir = \".\"\n    download_prebuilts(download_dir, x86=x86, x64=x64, sdl2=sdl2)\n    place_downloaded_prebuilts(download_dir, move_to_dir, x86=x86, x64=x64, sdl2=sdl2)\ndef ask(x86=True, x64=True, sdl2=True):\n    move_to_dir = \".\"\n    if x64:\n        dest_str = \"\\\"%s/prebuilt-x64\\\"\" % move_to_dir\n    else:\n        dest_str = \"\"",
        "detail": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "documentation": {}
    },
    {
        "label": "ask",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "description": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "peekOfCode": "def ask(x86=True, x64=True, sdl2=True):\n    move_to_dir = \".\"\n    if x64:\n        dest_str = \"\\\"%s/prebuilt-x64\\\"\" % move_to_dir\n    else:\n        dest_str = \"\"\n    if x86:\n        if dest_str:\n            dest_str = \"%s and \" % dest_str\n        dest_str = \"%s\\\"%s/prebuilt-x86\\\"\" % (dest_str, move_to_dir)",
        "detail": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "documentation": {}
    },
    {
        "label": "cached",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "description": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "peekOfCode": "def cached(x86=True, x64=True, sdl2=True):\n    move_to_dir = \".\"\n    if not os.path.isdir(download_dir):\n        return False\n    for url, check in get_urls(x86=x86, x64=x64, sdl2=sdl2):\n        filename = os.path.split(url)[-1]\n        save_to = os.path.join(download_dir, filename)\n        if not os.path.exists(save_to):\n            return False\n    return True",
        "detail": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "documentation": {}
    },
    {
        "label": "download_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "description": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "peekOfCode": "download_dir = \"prebuilt_downloads\"\ndef download_sha1_unzip(url, checksum, save_to_directory, unzip=True):\n    \"\"\" This\n    - downloads a url,\n    - sha1 checksum check,\n    - save_to_directory,\n    - then unzips it.\n    Does not download again if the file is there.\n    Does not unzip again if the file is there.\n    \"\"\"",
        "detail": "pygame-1.9.6.buildconfig.download_win_prebuilt",
        "documentation": {}
    },
    {
        "label": "Run",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.makeref",
        "description": "pygame-1.9.6.buildconfig.makeref",
        "peekOfCode": "def Run():\n    try:\n        return subprocess.run(['sphinx-build',\n                            '-b', 'html',\n                            '-d', rst_doctree_dir,\n                            '-D', 'headers_dest=%s' % (c_header_dir,),\n                            '-D', 'headers_mkdirs=0',\n                            rst_source_dir,\n                            html_dir,]).returncode\n    except:",
        "detail": "pygame-1.9.6.buildconfig.makeref",
        "documentation": {}
    },
    {
        "label": "rst_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.makeref",
        "description": "pygame-1.9.6.buildconfig.makeref",
        "peekOfCode": "rst_dir = 'docs'\nrst_source_dir = os.path.join(rst_dir, 'reST')\nrst_build_dir = rst_dir\nrst_doctree_dir = os.path.join(rst_build_dir, 'doctrees')\nhtml_dir = 'docs'\nc_header_dir = os.path.join('src_c', 'doc')\ndef Run():\n    try:\n        return subprocess.run(['sphinx-build',\n                            '-b', 'html',",
        "detail": "pygame-1.9.6.buildconfig.makeref",
        "documentation": {}
    },
    {
        "label": "rst_source_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.makeref",
        "description": "pygame-1.9.6.buildconfig.makeref",
        "peekOfCode": "rst_source_dir = os.path.join(rst_dir, 'reST')\nrst_build_dir = rst_dir\nrst_doctree_dir = os.path.join(rst_build_dir, 'doctrees')\nhtml_dir = 'docs'\nc_header_dir = os.path.join('src_c', 'doc')\ndef Run():\n    try:\n        return subprocess.run(['sphinx-build',\n                            '-b', 'html',\n                            '-d', rst_doctree_dir,",
        "detail": "pygame-1.9.6.buildconfig.makeref",
        "documentation": {}
    },
    {
        "label": "rst_build_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.makeref",
        "description": "pygame-1.9.6.buildconfig.makeref",
        "peekOfCode": "rst_build_dir = rst_dir\nrst_doctree_dir = os.path.join(rst_build_dir, 'doctrees')\nhtml_dir = 'docs'\nc_header_dir = os.path.join('src_c', 'doc')\ndef Run():\n    try:\n        return subprocess.run(['sphinx-build',\n                            '-b', 'html',\n                            '-d', rst_doctree_dir,\n                            '-D', 'headers_dest=%s' % (c_header_dir,),",
        "detail": "pygame-1.9.6.buildconfig.makeref",
        "documentation": {}
    },
    {
        "label": "rst_doctree_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.makeref",
        "description": "pygame-1.9.6.buildconfig.makeref",
        "peekOfCode": "rst_doctree_dir = os.path.join(rst_build_dir, 'doctrees')\nhtml_dir = 'docs'\nc_header_dir = os.path.join('src_c', 'doc')\ndef Run():\n    try:\n        return subprocess.run(['sphinx-build',\n                            '-b', 'html',\n                            '-d', rst_doctree_dir,\n                            '-D', 'headers_dest=%s' % (c_header_dir,),\n                            '-D', 'headers_mkdirs=0',",
        "detail": "pygame-1.9.6.buildconfig.makeref",
        "documentation": {}
    },
    {
        "label": "html_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.makeref",
        "description": "pygame-1.9.6.buildconfig.makeref",
        "peekOfCode": "html_dir = 'docs'\nc_header_dir = os.path.join('src_c', 'doc')\ndef Run():\n    try:\n        return subprocess.run(['sphinx-build',\n                            '-b', 'html',\n                            '-d', rst_doctree_dir,\n                            '-D', 'headers_dest=%s' % (c_header_dir,),\n                            '-D', 'headers_mkdirs=0',\n                            rst_source_dir,",
        "detail": "pygame-1.9.6.buildconfig.makeref",
        "documentation": {}
    },
    {
        "label": "c_header_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.makeref",
        "description": "pygame-1.9.6.buildconfig.makeref",
        "peekOfCode": "c_header_dir = os.path.join('src_c', 'doc')\ndef Run():\n    try:\n        return subprocess.run(['sphinx-build',\n                            '-b', 'html',\n                            '-d', rst_doctree_dir,\n                            '-D', 'headers_dest=%s' % (c_header_dir,),\n                            '-D', 'headers_mkdirs=0',\n                            rst_source_dir,\n                            html_dir,]).returncode",
        "detail": "pygame-1.9.6.buildconfig.makeref",
        "documentation": {}
    },
    {
        "label": "raw_input_",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.msysio",
        "description": "pygame-1.9.6.buildconfig.msysio",
        "peekOfCode": "def raw_input_(prompt=None):\n    \"\"\"Prompt for user input in an MSYS console friendly way\"\"\"\n    if prompt is None:\n        prompt = ''\n    print_(prompt, end='')\n    return raw_input()\ndef print_(*args, **kwds):\n    \"\"\"Print arguments in an MSYS console friendly way\n    Keyword arguments:\n        file, sep, end",
        "detail": "pygame-1.9.6.buildconfig.msysio",
        "documentation": {}
    },
    {
        "label": "print_",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.msysio",
        "description": "pygame-1.9.6.buildconfig.msysio",
        "peekOfCode": "def print_(*args, **kwds):\n    \"\"\"Print arguments in an MSYS console friendly way\n    Keyword arguments:\n        file, sep, end\n    \"\"\"\n    stream = kwds.get('file', sys.stdout)\n    sep = kwds.get('sep', ' ')\n    end = kwds.get('end', '\\n')\n    if args:\n        stream.write(sep.join([str(arg) for arg in args]))",
        "detail": "pygame-1.9.6.buildconfig.msysio",
        "documentation": {}
    },
    {
        "label": "is_msys",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.msysio",
        "description": "pygame-1.9.6.buildconfig.msysio",
        "peekOfCode": "def is_msys():\n    \"\"\"Return true if the execution environment is MSYS\"\"\"\n    try:\n        # Unfortunately there is no longer an MSYS specific identifier.\n        return os.environ['TERM'] == 'cygwin'\n    except KeyError:\n        return False",
        "detail": "pygame-1.9.6.buildconfig.msysio",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.msysio",
        "description": "pygame-1.9.6.buildconfig.msysio",
        "peekOfCode": "__all__ = ['raw_input_', 'print_', 'is_msys']\n# 2.x/3.x compatibility stuff\ntry:\n    raw_input\nexcept NameError:\n    raw_input = input\n# Exported functions\ndef raw_input_(prompt=None):\n    \"\"\"Prompt for user input in an MSYS console friendly way\"\"\"\n    if prompt is None:",
        "detail": "pygame-1.9.6.buildconfig.msysio",
        "documentation": {}
    },
    {
        "label": "Definition",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.setup_win_common",
        "description": "pygame-1.9.6.buildconfig.setup_win_common",
        "peekOfCode": "class Definition(object):\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\ndef read():\n    \"\"\"Return the contents of the Windows Common Setup as a string\"\"\"\n    setup_in = open(PATH)\n    try:\n        return setup_in.read()\n    finally:",
        "detail": "pygame-1.9.6.buildconfig.setup_win_common",
        "documentation": {}
    },
    {
        "label": "read",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.setup_win_common",
        "description": "pygame-1.9.6.buildconfig.setup_win_common",
        "peekOfCode": "def read():\n    \"\"\"Return the contents of the Windows Common Setup as a string\"\"\"\n    setup_in = open(PATH)\n    try:\n        return setup_in.read()\n    finally:\n        setup_in.close()\ndef get_definitions():\n    \"\"\"Return a list of definitions in the Windows Common Setup\n    Each macro definition object has a 'name' and 'value' attribute.",
        "detail": "pygame-1.9.6.buildconfig.setup_win_common",
        "documentation": {}
    },
    {
        "label": "get_definitions",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.setup_win_common",
        "description": "pygame-1.9.6.buildconfig.setup_win_common",
        "peekOfCode": "def get_definitions():\n    \"\"\"Return a list of definitions in the Windows Common Setup\n    Each macro definition object has a 'name' and 'value' attribute.\n    \"\"\"\n    import re\n    setup_in = open(PATH)\n    try:\n        deps = []\n        match = re.compile(r'([a-zA-Z0-9_]+) += +(.+)$').match\n        for line in setup_in:",
        "detail": "pygame-1.9.6.buildconfig.setup_win_common",
        "documentation": {}
    },
    {
        "label": "PATH",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.setup_win_common",
        "description": "pygame-1.9.6.buildconfig.setup_win_common",
        "peekOfCode": "PATH = os.path.join('buildconfig', 'Setup_Win_Common.in')\nclass Definition(object):\n    def __init__(self, name, value):\n        self.name = name\n        self.value = value\ndef read():\n    \"\"\"Return the contents of the Windows Common Setup as a string\"\"\"\n    setup_in = open(PATH)\n    try:\n        return setup_in.read()",
        "detail": "pygame-1.9.6.buildconfig.setup_win_common",
        "documentation": {}
    },
    {
        "label": "DumpbinError",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.vstools",
        "description": "pygame-1.9.6.buildconfig.vstools",
        "peekOfCode": "class DumpbinError(Exception):\n    pass\nclass DumpbinParseError(DumpbinError):\n    pass\ndef find_symbols(dll):\n    dumpbin_path = compiler.find_exe('dumpbin.exe')\n    try:\n        output = subprocess.check_output(\n            [dumpbin_path, '/nologo', '/exports', dll],\n            universal_newlines=True,",
        "detail": "pygame-1.9.6.buildconfig.vstools",
        "documentation": {}
    },
    {
        "label": "DumpbinParseError",
        "kind": 6,
        "importPath": "pygame-1.9.6.buildconfig.vstools",
        "description": "pygame-1.9.6.buildconfig.vstools",
        "peekOfCode": "class DumpbinParseError(DumpbinError):\n    pass\ndef find_symbols(dll):\n    dumpbin_path = compiler.find_exe('dumpbin.exe')\n    try:\n        output = subprocess.check_output(\n            [dumpbin_path, '/nologo', '/exports', dll],\n            universal_newlines=True,\n        )\n        if sys.version_info.major < 3:",
        "detail": "pygame-1.9.6.buildconfig.vstools",
        "documentation": {}
    },
    {
        "label": "find_symbols",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.vstools",
        "description": "pygame-1.9.6.buildconfig.vstools",
        "peekOfCode": "def find_symbols(dll):\n    dumpbin_path = compiler.find_exe('dumpbin.exe')\n    try:\n        output = subprocess.check_output(\n            [dumpbin_path, '/nologo', '/exports', dll],\n            universal_newlines=True,\n        )\n        if sys.version_info.major < 3:\n            output = output.decode()\n    except subprocess.CalledProcessError as e:",
        "detail": "pygame-1.9.6.buildconfig.vstools",
        "documentation": {}
    },
    {
        "label": "dump_def",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.vstools",
        "description": "pygame-1.9.6.buildconfig.vstools",
        "peekOfCode": "def dump_def(dll, def_file=None):\n    if not def_file:\n        def_file = '%s.def' % os.path.splitext(dll)[0]\n    dll_base = os.path.basename(dll)\n    with open(def_file, 'w') as f:\n        f.write(_fmt_header % dll_base)\n        f.write('LIBRARY \"%s\"\\n' % dll_base)\n        f.write('EXPORTS\\n')\n        f.writelines(\"%s\\n\" % line for line in find_symbols(dll))\ndef lib_from_def(def_file, arch=None):",
        "detail": "pygame-1.9.6.buildconfig.vstools",
        "documentation": {}
    },
    {
        "label": "lib_from_def",
        "kind": 2,
        "importPath": "pygame-1.9.6.buildconfig.vstools",
        "description": "pygame-1.9.6.buildconfig.vstools",
        "peekOfCode": "def lib_from_def(def_file, arch=None):\n    if not arch:\n        arch = get_build_architecture()\n        if arch == 'Intel':\n            arch = 'x86'\n        elif arch == 'Itanium':\n            arch = 'IA64'\n        else:\n            arch = 'x64'\n    lib_file = '%s.lib' % os.path.splitext(def_file)[0]",
        "detail": "pygame-1.9.6.buildconfig.vstools",
        "documentation": {}
    },
    {
        "label": "compiler",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.vstools",
        "description": "pygame-1.9.6.buildconfig.vstools",
        "peekOfCode": "compiler = MSVCCompiler()\ncompiler.initialize()\n_fmt_header = ';\\n; Definition file of %s\\n; Generated by vstools\\n;\\n'\nclass DumpbinError(Exception):\n    pass\nclass DumpbinParseError(DumpbinError):\n    pass\ndef find_symbols(dll):\n    dumpbin_path = compiler.find_exe('dumpbin.exe')\n    try:",
        "detail": "pygame-1.9.6.buildconfig.vstools",
        "documentation": {}
    },
    {
        "label": "_fmt_header",
        "kind": 5,
        "importPath": "pygame-1.9.6.buildconfig.vstools",
        "description": "pygame-1.9.6.buildconfig.vstools",
        "peekOfCode": "_fmt_header = ';\\n; Definition file of %s\\n; Generated by vstools\\n;\\n'\nclass DumpbinError(Exception):\n    pass\nclass DumpbinParseError(DumpbinError):\n    pass\ndef find_symbols(dll):\n    dumpbin_path = compiler.find_exe('dumpbin.exe')\n    try:\n        output = subprocess.check_output(\n            [dumpbin_path, '/nologo', '/exports', dll],",
        "detail": "pygame-1.9.6.buildconfig.vstools",
        "documentation": {}
    },
    {
        "label": "PyGameClasslike",
        "kind": 6,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "class PyGameClasslike(PyClasslike):\n    \"\"\"\n    No signature prefix for classes.\n    \"\"\"\n    def get_signature_prefix(self, sig):\n        return '' if self.objtype == 'class' else PyClasslike(self, sig)\ndef setup(app):\n    # This extension uses indexer collected tables.\n    app.setup_extension('ext.indexer')\n    # Documents to leave untransformed by boilerplate",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "TocRef",
        "kind": 6,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "class TocRef(reference):\n    pass\ndef visit_toc_ref(self, node):\n    self.visit_reference(node)\ndef depart_toc_ref(self, node):\n    self.depart_reference(node)\ndef visit_toc_ref_html(self, node):\n    refuri = node['refuri']\n    refid = as_refid(refuri)\n    docname = get_descinfo_refid(refid, self.settings.env)['docname']",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "TocTable",
        "kind": 6,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "class TocTable(table):\n    pass\ndef visit_toc_table_html(self, node):\n    self.visit_table(node)\ndef depart_toc_table_html(self, node):\n    self.depart_table(node)\ndef visit_skip(self, node):\n    raise SkipNode()\ndepart_toc_ref_html = depart_toc_ref\nclass DocTitle(title):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "DocTitle",
        "kind": 6,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "class DocTitle(title):\n    pass\nvisit_doc_title_html = visit_skip\ndepart_doc_title_html = None\ndef visit_doc_title(self, node):\n    self.visit_title(node)\ndef depart_doc_title(self, node):\n    self.depart_title(node)\ndef transform_document(app, doctree, docname):\n    if docname in app.config['boilerplate_skip_transform']:",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "DocumentTransformer",
        "kind": 6,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "class DocumentTransformer(Visitor):\n    _key_re = r'(?P<key>[a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z_][a-zA-Z0-9_]*)*)'\n    key_pat = re.compile(_key_re)\n    def __init__(self, app, document_node):\n        super(DocumentTransformer, self).__init__(app, document_node)\n        self.module_stack = deque()\n        self.title_stack = deque()\n    def visit_section(self, node):\n        self.title_stack.append(None)\n    def depart_section(self, node):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def setup(app):\n    # This extension uses indexer collected tables.\n    app.setup_extension('ext.indexer')\n    # Documents to leave untransformed by boilerplate\n    app.add_config_value('boilerplate_skip_transform', [], '')\n    # Custom class directive signature\n    app.add_directive_to_domain('py', 'class', PyGameClasslike)\n    # The stages of adding boilerplate markup.\n    app.connect('doctree-resolved', transform_document)\n    app.connect('html-page-context', inject_template_globals)",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "visit_toc_ref",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def visit_toc_ref(self, node):\n    self.visit_reference(node)\ndef depart_toc_ref(self, node):\n    self.depart_reference(node)\ndef visit_toc_ref_html(self, node):\n    refuri = node['refuri']\n    refid = as_refid(refuri)\n    docname = get_descinfo_refid(refid, self.settings.env)['docname']\n    link_suffix = self.builder.link_suffix\n    node['refuri'] = '%s%s%s' % (os.path.basename(docname), link_suffix, refuri)",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "depart_toc_ref",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def depart_toc_ref(self, node):\n    self.depart_reference(node)\ndef visit_toc_ref_html(self, node):\n    refuri = node['refuri']\n    refid = as_refid(refuri)\n    docname = get_descinfo_refid(refid, self.settings.env)['docname']\n    link_suffix = self.builder.link_suffix\n    node['refuri'] = '%s%s%s' % (os.path.basename(docname), link_suffix, refuri)\n    visit_toc_ref(self, node)\nclass TocTable(table):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "visit_toc_ref_html",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def visit_toc_ref_html(self, node):\n    refuri = node['refuri']\n    refid = as_refid(refuri)\n    docname = get_descinfo_refid(refid, self.settings.env)['docname']\n    link_suffix = self.builder.link_suffix\n    node['refuri'] = '%s%s%s' % (os.path.basename(docname), link_suffix, refuri)\n    visit_toc_ref(self, node)\nclass TocTable(table):\n    pass\ndef visit_toc_table_html(self, node):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "visit_toc_table_html",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def visit_toc_table_html(self, node):\n    self.visit_table(node)\ndef depart_toc_table_html(self, node):\n    self.depart_table(node)\ndef visit_skip(self, node):\n    raise SkipNode()\ndepart_toc_ref_html = depart_toc_ref\nclass DocTitle(title):\n    pass\nvisit_doc_title_html = visit_skip",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "depart_toc_table_html",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def depart_toc_table_html(self, node):\n    self.depart_table(node)\ndef visit_skip(self, node):\n    raise SkipNode()\ndepart_toc_ref_html = depart_toc_ref\nclass DocTitle(title):\n    pass\nvisit_doc_title_html = visit_skip\ndepart_doc_title_html = None\ndef visit_doc_title(self, node):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "visit_skip",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def visit_skip(self, node):\n    raise SkipNode()\ndepart_toc_ref_html = depart_toc_ref\nclass DocTitle(title):\n    pass\nvisit_doc_title_html = visit_skip\ndepart_doc_title_html = None\ndef visit_doc_title(self, node):\n    self.visit_title(node)\ndef depart_doc_title(self, node):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "visit_doc_title",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def visit_doc_title(self, node):\n    self.visit_title(node)\ndef depart_doc_title(self, node):\n    self.depart_title(node)\ndef transform_document(app, doctree, docname):\n    if docname in app.config['boilerplate_skip_transform']:\n        return\n    doctree.walkabout(DocumentTransformer(app, doctree))\nclass DocumentTransformer(Visitor):\n    _key_re = r'(?P<key>[a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z_][a-zA-Z0-9_]*)*)'",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "depart_doc_title",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def depart_doc_title(self, node):\n    self.depart_title(node)\ndef transform_document(app, doctree, docname):\n    if docname in app.config['boilerplate_skip_transform']:\n        return\n    doctree.walkabout(DocumentTransformer(app, doctree))\nclass DocumentTransformer(Visitor):\n    _key_re = r'(?P<key>[a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z_][a-zA-Z0-9_]*)*)'\n    key_pat = re.compile(_key_re)\n    def __init__(self, app, document_node):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "transform_document",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def transform_document(app, doctree, docname):\n    if docname in app.config['boilerplate_skip_transform']:\n        return\n    doctree.walkabout(DocumentTransformer(app, doctree))\nclass DocumentTransformer(Visitor):\n    _key_re = r'(?P<key>[a-zA-Z_][a-zA-Z0-9_]*(\\.[a-zA-Z_][a-zA-Z0-9_]*)*)'\n    key_pat = re.compile(_key_re)\n    def __init__(self, app, document_node):\n        super(DocumentTransformer, self).__init__(app, document_node)\n        self.module_stack = deque()",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "transform_module_section",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def transform_module_section(section_node, title_node, env):\n    fullmodname = section_node['names'][0]\n    where = section_node.first_child_matching_class(section_prelude_end_class)\n    content_children = list(ipop_child(section_node, where + 1))\n    if title_node is None:\n        signature_children = [literal('', fullmodname)]\n    else:\n        signature_children = list(ipop_child(title_node))\n    signature_node = desc_signature('', '', *signature_children,\n                                    classes=['title', 'module'],",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "ipop_child",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def ipop_child(node, start=0):\n    while len(node) > start:\n        yield node.pop(start)\ndef get_target_summary(reference_node, env):\n    try:\n        return get_descinfo_refid(reference_node['refid'], env)['summary']\n    except KeyError:\n        raise GetError(\"reference has no refid\")\ndef add_toc(desc_node, env, section_node=None):\n    \"\"\"Add a table of contents to a desc node\"\"\"",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "get_target_summary",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def get_target_summary(reference_node, env):\n    try:\n        return get_descinfo_refid(reference_node['refid'], env)['summary']\n    except KeyError:\n        raise GetError(\"reference has no refid\")\ndef add_toc(desc_node, env, section_node=None):\n    \"\"\"Add a table of contents to a desc node\"\"\"\n    if (section_node is not None):\n        refid = get_refid(section_node)\n    else:",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "add_toc",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def add_toc(desc_node, env, section_node=None):\n    \"\"\"Add a table of contents to a desc node\"\"\"\n    if (section_node is not None):\n        refid = get_refid(section_node)\n    else:\n        refid = get_refid(desc_node)\n    descinfo = get_descinfo_refid(refid, env)\n    toc = build_toc(descinfo, env)\n    if toc is None:\n        return",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "build_toc",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def build_toc(descinfo, env):\n    \"\"\"Return a desc table of contents node tree\"\"\"\n    separator = EMDASH\n    child_ids = descinfo['children']\n    if not child_ids:\n        return None\n    max_fullname_len = 0\n    max_summary_len = 0\n    rows = []\n    for fullname, refid, summary in ichild_ids(child_ids, env):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "ichild_ids",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def ichild_ids(child_ids, env):\n    for refid in child_ids:\n        descinfo = env.pyg_descinfo_tbl[refid]  # A KeyError would mean a bug.\n        yield descinfo['fullname'], descinfo['refid'], descinfo['summary']\ndef toc_ref(fullname, refid):\n    name = whitespace_normalize_name(fullname),\n    return TocRef('', fullname,\n                  name=name, refuri=as_refuri(refid), classes=['toc'])\n#>>===================================================\ndef decorate_signatures(desc, classname):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "toc_ref",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def toc_ref(fullname, refid):\n    name = whitespace_normalize_name(fullname),\n    return TocRef('', fullname,\n                  name=name, refuri=as_refuri(refid), classes=['toc'])\n#>>===================================================\ndef decorate_signatures(desc, classname):\n    prefix = classname + DOT\n    for child in desc.children:\n        if (isinstance(child, sphinx.addnodes.desc_signature) and\n            isinstance(child[0], sphinx.addnodes.desc_name)       ):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "decorate_signatures",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def decorate_signatures(desc, classname):\n    prefix = classname + DOT\n    for child in desc.children:\n        if (isinstance(child, sphinx.addnodes.desc_signature) and\n            isinstance(child[0], sphinx.addnodes.desc_name)       ):\n            new_desc_classname = sphinx.addnodes.desc_classname('', prefix)\n            child.insert(0, new_desc_classname)\n#<<==================================================================\ndef inject_template_globals(app, pagename, templatename, context, doctree):\n    def lowercase_name(d):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "inject_template_globals",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "def inject_template_globals(app, pagename, templatename, context, doctree):\n    def lowercase_name(d):\n        return get_name(d['fullname']).lower()\n    env = app.builder.env\n    try:\n        sections = env.pyg_sections\n    except AttributeError:\n        sections = []\n    else:\n        sections = sorted(sections, key=lowercase_name)",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "DOT",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "DOT = as_unicode('.')\nSPACE = as_unicode(' ')\nEMDASH = as_unicode(r'\\u2014')\nclass PyGameClasslike(PyClasslike):\n    \"\"\"\n    No signature prefix for classes.\n    \"\"\"\n    def get_signature_prefix(self, sig):\n        return '' if self.objtype == 'class' else PyClasslike(self, sig)\ndef setup(app):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "SPACE",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "SPACE = as_unicode(' ')\nEMDASH = as_unicode(r'\\u2014')\nclass PyGameClasslike(PyClasslike):\n    \"\"\"\n    No signature prefix for classes.\n    \"\"\"\n    def get_signature_prefix(self, sig):\n        return '' if self.objtype == 'class' else PyClasslike(self, sig)\ndef setup(app):\n    # This extension uses indexer collected tables.",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "EMDASH",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "EMDASH = as_unicode(r'\\u2014')\nclass PyGameClasslike(PyClasslike):\n    \"\"\"\n    No signature prefix for classes.\n    \"\"\"\n    def get_signature_prefix(self, sig):\n        return '' if self.objtype == 'class' else PyClasslike(self, sig)\ndef setup(app):\n    # This extension uses indexer collected tables.\n    app.setup_extension('ext.indexer')",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "depart_toc_ref_html",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "depart_toc_ref_html = depart_toc_ref\nclass DocTitle(title):\n    pass\nvisit_doc_title_html = visit_skip\ndepart_doc_title_html = None\ndef visit_doc_title(self, node):\n    self.visit_title(node)\ndef depart_doc_title(self, node):\n    self.depart_title(node)\ndef transform_document(app, doctree, docname):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "visit_doc_title_html",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "visit_doc_title_html = visit_skip\ndepart_doc_title_html = None\ndef visit_doc_title(self, node):\n    self.visit_title(node)\ndef depart_doc_title(self, node):\n    self.depart_title(node)\ndef transform_document(app, doctree, docname):\n    if docname in app.config['boilerplate_skip_transform']:\n        return\n    doctree.walkabout(DocumentTransformer(app, doctree))",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "depart_doc_title_html",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "description": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "peekOfCode": "depart_doc_title_html = None\ndef visit_doc_title(self, node):\n    self.visit_title(node)\ndef depart_doc_title(self, node):\n    self.depart_title(node)\ndef transform_document(app, doctree, docname):\n    if docname in app.config['boilerplate_skip_transform']:\n        return\n    doctree.walkabout(DocumentTransformer(app, doctree))\nclass DocumentTransformer(Visitor):",
        "detail": "pygame-1.9.6.docs.reST.ext.boilerplate",
        "documentation": {}
    },
    {
        "label": "set_version_formats",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.customversion",
        "description": "pygame-1.9.6.docs.reST.ext.customversion",
        "peekOfCode": "def set_version_formats(app, config):\n    for label in labels:\n        versionlabels[label] = \\\n            _(getattr(config, '{}_format'.format(label)))\ndef setup(app):\n    app.add_directive('versionextended', VersionChange)\n    versionlabels['versionextended'] = 'Extended in pygame %s'\n    for label in ('versionadded', 'versionchanged', 'deprecated', 'versionextended'):\n        app.add_config_value('{}_format'.format(label), str(versionlabels[label]), 'env')\n    app.connect('config-inited', set_version_formats)",
        "detail": "pygame-1.9.6.docs.reST.ext.customversion",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.customversion",
        "description": "pygame-1.9.6.docs.reST.ext.customversion",
        "peekOfCode": "def setup(app):\n    app.add_directive('versionextended', VersionChange)\n    versionlabels['versionextended'] = 'Extended in pygame %s'\n    for label in ('versionadded', 'versionchanged', 'deprecated', 'versionextended'):\n        app.add_config_value('{}_format'.format(label), str(versionlabels[label]), 'env')\n    app.connect('config-inited', set_version_formats)",
        "detail": "pygame-1.9.6.docs.reST.ext.customversion",
        "documentation": {}
    },
    {
        "label": "labels",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.customversion",
        "description": "pygame-1.9.6.docs.reST.ext.customversion",
        "peekOfCode": "labels = ('versionadded', 'versionchanged', 'deprecated', 'versionextended')\ndef set_version_formats(app, config):\n    for label in labels:\n        versionlabels[label] = \\\n            _(getattr(config, '{}_format'.format(label)))\ndef setup(app):\n    app.add_directive('versionextended', VersionChange)\n    versionlabels['versionextended'] = 'Extended in pygame %s'\n    for label in ('versionadded', 'versionchanged', 'deprecated', 'versionextended'):\n        app.add_config_value('{}_format'.format(label), str(versionlabels[label]), 'env')",
        "detail": "pygame-1.9.6.docs.reST.ext.customversion",
        "documentation": {}
    },
    {
        "label": "get_github_url",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "description": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "peekOfCode": "def get_github_url(app, view, path):\n    return 'https://github.com/{project}/{view}/{branch}/docs/reST/{path}'.format(\n        project=app.config.edit_on_github_project,\n        view=view,\n        branch=app.config.edit_on_github_branch,\n        path=path)\ndef html_page_context(app, pagename, templatename, context, doctree):\n    if templatename != 'page.html':\n        return\n    if not app.config.edit_on_github_project:",
        "detail": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "documentation": {}
    },
    {
        "label": "html_page_context",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "description": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "peekOfCode": "def html_page_context(app, pagename, templatename, context, doctree):\n    if templatename != 'page.html':\n        return\n    if not app.config.edit_on_github_project:\n        warnings.warn(\"edit_on_github_project not specified\")\n        return\n    path = os.path.relpath(doctree.get('source'), app.builder.srcdir)\n    show_url = get_github_url(app, 'blob', path)\n    edit_url = get_github_url(app, 'edit', path)\n    context['show_on_github_url'] = show_url",
        "detail": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "description": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "peekOfCode": "def setup(app):\n    app.add_config_value('edit_on_github_project', '', True)\n    app.add_config_value('edit_on_github_branch', 'master', True)\n    app.connect('html-page-context', html_page_context)",
        "detail": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "documentation": {}
    },
    {
        "label": "__licence__",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "description": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "peekOfCode": "__licence__ = 'BSD (3 clause)'\ndef get_github_url(app, view, path):\n    return 'https://github.com/{project}/{view}/{branch}/docs/reST/{path}'.format(\n        project=app.config.edit_on_github_project,\n        view=view,\n        branch=app.config.edit_on_github_branch,\n        path=path)\ndef html_page_context(app, pagename, templatename, context, doctree):\n    if templatename != 'page.html':\n        return",
        "detail": "pygame-1.9.6.docs.reST.ext.edit_on_github",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.headers",
        "description": "pygame-1.9.6.docs.reST.ext.headers",
        "peekOfCode": "def setup(app):\n    # This extension uses indexer collected tables.\n    app.setup_extension('ext.indexer')\n    # The target directory for the header files.\n    app.add_config_value('headers_dest', '.', 'html')\n    # Create directory tree if missing?\n    app.add_config_value('headers_mkdirs', False, '')\n    # Suffix to tag onto file name before the '.h' extension\n    app.add_config_value('headers_filename_sfx', '', 'html')\n    # Header template to use",
        "detail": "pygame-1.9.6.docs.reST.ext.headers",
        "documentation": {}
    },
    {
        "label": "writer",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.headers",
        "description": "pygame-1.9.6.docs.reST.ext.headers",
        "peekOfCode": "def writer(app, pagename, templatename, context, doctree):\n    if doctree is None:\n        return\n    env = app.builder.env\n    dirpath = os.path.abspath(app.config['headers_dest'])\n    if app.config['headers_mkdirs'] and not os.path.lexists(dirpath):\n        os.makedirs(dirpath)\n    filename_suffix = app.config['headers_filename_sfx']\n    items = []\n    for section in isections(doctree):",
        "detail": "pygame-1.9.6.docs.reST.ext.headers",
        "documentation": {}
    },
    {
        "label": "CollectInfo",
        "kind": 6,
        "importPath": "pygame-1.9.6.docs.reST.ext.indexer",
        "description": "pygame-1.9.6.docs.reST.ext.indexer",
        "peekOfCode": "class CollectInfo(Visitor):\n    \"\"\"Records the information for a document\"\"\"\n    desctypes = set(['data', 'function', 'exception', 'class',\n                     'attribute', 'method', 'staticmethod', 'classmethod'])\n    def __init__(self, app, document_node):\n        super(CollectInfo, self).__init__(app, document_node)\n        self.docname = self.env.docname\n        self.summary_stack = deque()\n        self.sig_stack = deque()\n        self.desc_stack = deque()",
        "detail": "pygame-1.9.6.docs.reST.ext.indexer",
        "documentation": {}
    },
    {
        "label": "setup",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.indexer",
        "description": "pygame-1.9.6.docs.reST.ext.indexer",
        "peekOfCode": "def setup(app):\n    app.connect('env-purge-doc', prep_document_info)\n    app.connect('doctree-read', collect_document_info)\ndef prep_document_info(app, env, docname):\n    try:\n        env.pyg_sections = [e for e in env.pyg_sections\n                            if e['docname'] != docname]\n    except AttributeError:\n        pass\n    except KeyError:",
        "detail": "pygame-1.9.6.docs.reST.ext.indexer",
        "documentation": {}
    },
    {
        "label": "prep_document_info",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.indexer",
        "description": "pygame-1.9.6.docs.reST.ext.indexer",
        "peekOfCode": "def prep_document_info(app, env, docname):\n    try:\n        env.pyg_sections = [e for e in env.pyg_sections\n                            if e['docname'] != docname]\n    except AttributeError:\n        pass\n    except KeyError:\n        pass\n    try:\n        descinfo_tbl = env.pyg_descinfo_tbl",
        "detail": "pygame-1.9.6.docs.reST.ext.indexer",
        "documentation": {}
    },
    {
        "label": "collect_document_info",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.indexer",
        "description": "pygame-1.9.6.docs.reST.ext.indexer",
        "peekOfCode": "def collect_document_info(app, doctree):\n    doctree.walkabout(CollectInfo(app, doctree))\nclass CollectInfo(Visitor):\n    \"\"\"Records the information for a document\"\"\"\n    desctypes = set(['data', 'function', 'exception', 'class',\n                     'attribute', 'method', 'staticmethod', 'classmethod'])\n    def __init__(self, app, document_node):\n        super(CollectInfo, self).__init__(app, document_node)\n        self.docname = self.env.docname\n        self.summary_stack = deque()",
        "detail": "pygame-1.9.6.docs.reST.ext.indexer",
        "documentation": {}
    },
    {
        "label": "tour_descinfo",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.indexer",
        "description": "pygame-1.9.6.docs.reST.ext.indexer",
        "peekOfCode": "def tour_descinfo(fn, node, env):\n    try:\n        descinfo = get_descinfo(node, env)\n    except GetError:\n        return\n    fn(descinfo)\n    for refid in descinfo['children']:\n        tour_descinfo_refid(fn, refid, env)\ndef tour_descinfo_refid(fn, refid, env):\n    descinfo = env.pyg_descinfo_tbl[refid]  # A KeyError would mean a bug.",
        "detail": "pygame-1.9.6.docs.reST.ext.indexer",
        "documentation": {}
    },
    {
        "label": "tour_descinfo_refid",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.indexer",
        "description": "pygame-1.9.6.docs.reST.ext.indexer",
        "peekOfCode": "def tour_descinfo_refid(fn, refid, env):\n    descinfo = env.pyg_descinfo_tbl[refid]  # A KeyError would mean a bug.\n    fn(descinfo)\n    for refid in descinfo['children']:\n        tour_descinfo_refid(fn, refid, env)\ndef get_descinfo(node, env):\n    return get_descinfo_refid(get_refid(node), env)\ndef get_descinfo_refid(refid, env):\n    if refid.startswith(MODULE_ID_PREFIX):\n        refid = refid[len(MODULE_ID_PREFIX):]",
        "detail": "pygame-1.9.6.docs.reST.ext.indexer",
        "documentation": {}
    },
    {
        "label": "get_descinfo",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.indexer",
        "description": "pygame-1.9.6.docs.reST.ext.indexer",
        "peekOfCode": "def get_descinfo(node, env):\n    return get_descinfo_refid(get_refid(node), env)\ndef get_descinfo_refid(refid, env):\n    if refid.startswith(MODULE_ID_PREFIX):\n        refid = refid[len(MODULE_ID_PREFIX):]\n    try:\n        return env.pyg_descinfo_tbl[refid]\n    except KeyError:\n        raise GetError(\"Not found\")",
        "detail": "pygame-1.9.6.docs.reST.ext.indexer",
        "documentation": {}
    },
    {
        "label": "get_descinfo_refid",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.indexer",
        "description": "pygame-1.9.6.docs.reST.ext.indexer",
        "peekOfCode": "def get_descinfo_refid(refid, env):\n    if refid.startswith(MODULE_ID_PREFIX):\n        refid = refid[len(MODULE_ID_PREFIX):]\n    try:\n        return env.pyg_descinfo_tbl[refid]\n    except KeyError:\n        raise GetError(\"Not found\")",
        "detail": "pygame-1.9.6.docs.reST.ext.indexer",
        "documentation": {}
    },
    {
        "label": "MODULE_ID_PREFIX",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.indexer",
        "description": "pygame-1.9.6.docs.reST.ext.indexer",
        "peekOfCode": "MODULE_ID_PREFIX = as_unicode(r'module-')\ndef setup(app):\n    app.connect('env-purge-doc', prep_document_info)\n    app.connect('doctree-read', collect_document_info)\ndef prep_document_info(app, env, docname):\n    try:\n        env.pyg_sections = [e for e in env.pyg_sections\n                            if e['docname'] != docname]\n    except AttributeError:\n        pass",
        "detail": "pygame-1.9.6.docs.reST.ext.indexer",
        "documentation": {}
    },
    {
        "label": "GetError",
        "kind": 6,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "class GetError(LookupError):\n    pass\ndef get_fullname(node):\n    if isinstance(node, docutils.nodes.section):\n        return get_sectionname(node)\n    if isinstance(node, sphinx.addnodes.desc):\n        return get_descname(node)\n    raise TypeError(\"Unrecognized node type '%s'\" % (node.__class__,))\ndef get_descname(desc):\n    try:",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "Visitor",
        "kind": 6,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "class Visitor(_SparseNodeVisitor):\n    skip_node = docutils.nodes.SkipNode()\n    skip_departure = docutils.nodes.SkipDeparture()\n    def __init__(self, app, document_node):\n        docutils.nodes.SparseNodeVisitor.__init__(self, document_node)\n        self.app = app\n        self.env = app.builder.env\n    def unknown_visit(self, node):\n        return\n    def unknown_departure(self, node):",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "get_fullname",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "def get_fullname(node):\n    if isinstance(node, docutils.nodes.section):\n        return get_sectionname(node)\n    if isinstance(node, sphinx.addnodes.desc):\n        return get_descname(node)\n    raise TypeError(\"Unrecognized node type '%s'\" % (node.__class__,))\ndef get_descname(desc):\n    try:\n        sig = desc[0]\n    except IndexError:",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "get_descname",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "def get_descname(desc):\n    try:\n        sig = desc[0]\n    except IndexError:\n        raise GetError(\"No fullname: missing children in desc\")\n    try:\n        names = sig['names']\n    except KeyError:\n        raise GetError(\n            \"No fullname: missing names attribute in desc's child\")",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "get_sectionname",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "def get_sectionname(section):\n    try:\n        names = section['names']\n    except KeyError:\n        raise GetError(\"No fullname: missing names attribute in section\")\n    try:\n        return names[0]\n    except IndexError:\n        raise GetError(\"No fullname: section has empty names list\")\ndef get_refuri(node):",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "get_refuri",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "def get_refuri(node):\n    return as_refuri(get_refid(node))\ndef get_refid(node):\n    try:\n        return get_ids(node)[0]\n    except IndexError:\n        raise GetError(\"Node has emtpy ids list\")\ndef as_refid(refuri):\n    return refuri[1:]\ndef as_refuri(refid):",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "get_refid",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "def get_refid(node):\n    try:\n        return get_ids(node)[0]\n    except IndexError:\n        raise GetError(\"Node has emtpy ids list\")\ndef as_refid(refuri):\n    return refuri[1:]\ndef as_refuri(refid):\n    return NUMBERSIGN + refid\ndef get_ids(node):",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "as_refid",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "def as_refid(refuri):\n    return refuri[1:]\ndef as_refuri(refid):\n    return NUMBERSIGN + refid\ndef get_ids(node):\n    if isinstance(node, docutils.nodes.section):\n        try:\n            return node['ids']\n        except KeyError:\n            raise GetError(\"No ids: section missing ids attribute\")",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "as_refuri",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "def as_refuri(refid):\n    return NUMBERSIGN + refid\ndef get_ids(node):\n    if isinstance(node, docutils.nodes.section):\n        try:\n            return node['ids']\n        except KeyError:\n            raise GetError(\"No ids: section missing ids attribute\")\n    if isinstance(node, sphinx.addnodes.desc):\n        try:",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "get_ids",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "def get_ids(node):\n    if isinstance(node, docutils.nodes.section):\n        try:\n            return node['ids']\n        except KeyError:\n            raise GetError(\"No ids: section missing ids attribute\")\n    if isinstance(node, sphinx.addnodes.desc):\n        try:\n            sig = node[0]\n        except IndexError:",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "isections",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "def isections(doctree):\n    for node in doctree:\n        if isinstance(node, docutils.nodes.section):\n            yield node\ndef get_name(fullname):\n    return fullname.split('.')[-1]\ndef geterror ():\n    return sys.exc_info()[1]\ntry:\n    _unicode = unicode",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "get_name",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "def get_name(fullname):\n    return fullname.split('.')[-1]\ndef geterror ():\n    return sys.exc_info()[1]\ntry:\n    _unicode = unicode\nexcept NameError:\n    _unicode = str\n# Represent escaped bytes and strings in a portable way.\n#",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "geterro",
        "kind": 2,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "def geterror ():\n    return sys.exc_info()[1]\ntry:\n    _unicode = unicode\nexcept NameError:\n    _unicode = str\n# Represent escaped bytes and strings in a portable way.\n#\n# as_bytes: Allow a Python 3.x string to represent a bytes object.\n#   e.g.: as_bytes(\"a\\x01\\b\") == b\"a\\x01b\" # Python 3.x",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "_SparseNodeVisitor",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "_SparseNodeVisitor = docutils.nodes.SparseNodeVisitor\nif not hasattr(_SparseNodeVisitor, '__class__'):\n    class _SparseNodeVisitor(object, docutils.nodes.SparseNodeVisitor):\n        pass\nclass Visitor(_SparseNodeVisitor):\n    skip_node = docutils.nodes.SkipNode()\n    skip_departure = docutils.nodes.SkipDeparture()\n    def __init__(self, app, document_node):\n        docutils.nodes.SparseNodeVisitor.__init__(self, document_node)\n        self.app = app",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "EMPTYSTR",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "EMPTYSTR = as_unicode('')\nNUMBERSIGN = as_unicode('#')",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "NUMBERSIGN",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ext.utils",
        "description": "pygame-1.9.6.docs.reST.ext.utils",
        "peekOfCode": "NUMBERSIGN = as_unicode('#')",
        "detail": "pygame-1.9.6.docs.reST.ext.utils",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "peekOfCode": "BLACK = (  0,   0,   0)\nWHITE = (255, 255, 255)\nBLUE =  (  0,   0, 255)\nGREEN = (  0, 255,   0)\nRED =   (255,   0,   0)\n# Set the height and width of the screen\nsize = [400, 300]\nscreen = pygame.display.set_mode(size)\npygame.display.set_caption(\"Example code for the draw module\")\n#Loop until the user clicks the close button.",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "peekOfCode": "WHITE = (255, 255, 255)\nBLUE =  (  0,   0, 255)\nGREEN = (  0, 255,   0)\nRED =   (255,   0,   0)\n# Set the height and width of the screen\nsize = [400, 300]\nscreen = pygame.display.set_mode(size)\npygame.display.set_caption(\"Example code for the draw module\")\n#Loop until the user clicks the close button.\ndone = False",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "documentation": {}
    },
    {
        "label": "BLUE",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "peekOfCode": "BLUE =  (  0,   0, 255)\nGREEN = (  0, 255,   0)\nRED =   (255,   0,   0)\n# Set the height and width of the screen\nsize = [400, 300]\nscreen = pygame.display.set_mode(size)\npygame.display.set_caption(\"Example code for the draw module\")\n#Loop until the user clicks the close button.\ndone = False\nclock = pygame.time.Clock()",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "peekOfCode": "GREEN = (  0, 255,   0)\nRED =   (255,   0,   0)\n# Set the height and width of the screen\nsize = [400, 300]\nscreen = pygame.display.set_mode(size)\npygame.display.set_caption(\"Example code for the draw module\")\n#Loop until the user clicks the close button.\ndone = False\nclock = pygame.time.Clock()\nwhile not done:",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "peekOfCode": "RED =   (255,   0,   0)\n# Set the height and width of the screen\nsize = [400, 300]\nscreen = pygame.display.set_mode(size)\npygame.display.set_caption(\"Example code for the draw module\")\n#Loop until the user clicks the close button.\ndone = False\nclock = pygame.time.Clock()\nwhile not done:\n    # This limits the while loop to a max of 10 times per second.",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "documentation": {}
    },
    {
        "label": "size",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "peekOfCode": "size = [400, 300]\nscreen = pygame.display.set_mode(size)\npygame.display.set_caption(\"Example code for the draw module\")\n#Loop until the user clicks the close button.\ndone = False\nclock = pygame.time.Clock()\nwhile not done:\n    # This limits the while loop to a max of 10 times per second.\n    # Leave this out and we will use all CPU we can.\n    clock.tick(10)",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "peekOfCode": "screen = pygame.display.set_mode(size)\npygame.display.set_caption(\"Example code for the draw module\")\n#Loop until the user clicks the close button.\ndone = False\nclock = pygame.time.Clock()\nwhile not done:\n    # This limits the while loop to a max of 10 times per second.\n    # Leave this out and we will use all CPU we can.\n    clock.tick(10)\n    for event in pygame.event.get(): # User did something",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "documentation": {}
    },
    {
        "label": "done",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "peekOfCode": "done = False\nclock = pygame.time.Clock()\nwhile not done:\n    # This limits the while loop to a max of 10 times per second.\n    # Leave this out and we will use all CPU we can.\n    clock.tick(10)\n    for event in pygame.event.get(): # User did something\n        if event.type == pygame.QUIT: # If user clicked close\n            done=True # Flag that we are done so we exit this loop\n    # All drawing code happens after the for loop and but",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "peekOfCode": "clock = pygame.time.Clock()\nwhile not done:\n    # This limits the while loop to a max of 10 times per second.\n    # Leave this out and we will use all CPU we can.\n    clock.tick(10)\n    for event in pygame.event.get(): # User did something\n        if event.type == pygame.QUIT: # If user clicked close\n            done=True # Flag that we are done so we exit this loop\n    # All drawing code happens after the for loop and but\n    # inside the main while done==False loop.",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.draw_module_example",
        "documentation": {}
    },
    {
        "label": "TextPrint",
        "kind": 6,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "peekOfCode": "class TextPrint(object):\n    def __init__(self):\n        self.reset()\n        self.font = pygame.font.Font(None, 20)\n    def tprint(self, screen, textString):\n        textBitmap = self.font.render(textString, True, BLACK)\n        screen.blit(textBitmap, (self.x, self.y))\n        self.y += self.line_height\n    def reset(self):\n        self.x = 10",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "documentation": {}
    },
    {
        "label": "BLACK",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "peekOfCode": "BLACK = pygame.Color('black')\nWHITE = pygame.Color('white')\n# This is a simple class that will help us print to the screen.\n# It has nothing to do with the joysticks, just outputting the\n# information.\nclass TextPrint(object):\n    def __init__(self):\n        self.reset()\n        self.font = pygame.font.Font(None, 20)\n    def tprint(self, screen, textString):",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "documentation": {}
    },
    {
        "label": "WHITE",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "peekOfCode": "WHITE = pygame.Color('white')\n# This is a simple class that will help us print to the screen.\n# It has nothing to do with the joysticks, just outputting the\n# information.\nclass TextPrint(object):\n    def __init__(self):\n        self.reset()\n        self.font = pygame.font.Font(None, 20)\n    def tprint(self, screen, textString):\n        textBitmap = self.font.render(textString, True, BLACK)",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "peekOfCode": "screen = pygame.display.set_mode((500, 700))\npygame.display.set_caption(\"My Game\")\n# Loop until the user clicks the close button.\ndone = False\n# Used to manage how fast the screen updates.\nclock = pygame.time.Clock()\n# Initialize the joysticks.\npygame.joystick.init()\n# Get ready to print.\ntextPrint = TextPrint()",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "documentation": {}
    },
    {
        "label": "done",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "peekOfCode": "done = False\n# Used to manage how fast the screen updates.\nclock = pygame.time.Clock()\n# Initialize the joysticks.\npygame.joystick.init()\n# Get ready to print.\ntextPrint = TextPrint()\n# -------- Main Program Loop -----------\nwhile not done:\n    #",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "peekOfCode": "clock = pygame.time.Clock()\n# Initialize the joysticks.\npygame.joystick.init()\n# Get ready to print.\ntextPrint = TextPrint()\n# -------- Main Program Loop -----------\nwhile not done:\n    #\n    # EVENT PROCESSING STEP\n    #",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "documentation": {}
    },
    {
        "label": "textPrint",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "description": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "peekOfCode": "textPrint = TextPrint()\n# -------- Main Program Loop -----------\nwhile not done:\n    #\n    # EVENT PROCESSING STEP\n    #\n    # Possible joystick actions: JOYAXISMOTION, JOYBALLMOTION, JOYBUTTONDOWN,\n    # JOYBUTTONUP, JOYHATMOTION\n    for event in pygame.event.get(): # User did something.\n        if event.type == pygame.QUIT: # If user clicked close.",
        "detail": "pygame-1.9.6.docs.reST.ref.code_examples.joystick_calls",
        "documentation": {}
    },
    {
        "label": "extensions",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "extensions = ['sphinx.ext.autodoc', 'sphinx.ext.doctest',\n              'sphinx.ext.coverage', 'ext.headers', 'ext.boilerplate',\n              'ext.customversion', 'ext.edit_on_github']\n# Add any paths that contain templates here, relative to this directory.\ntemplates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8'\n# The master toctree document.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "templates_path",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "templates_path = ['_templates']\n# The suffix of source filenames.\nsource_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'pygame'\ncopyright = u'2011-2019, pygame developers'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "source_suffix",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "source_suffix = '.rst'\n# The encoding of source files.\n#source_encoding = 'utf-8'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'pygame'\ncopyright = u'2011-2019, pygame developers'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#source_encoding",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#source_encoding = 'utf-8'\n# The master toctree document.\nmaster_doc = 'index'\n# General information about the project.\nproject = u'pygame'\ncopyright = u'2011-2019, pygame developers'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "master_doc",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "master_doc = 'index'\n# General information about the project.\nproject = u'pygame'\ncopyright = u'2011-2019, pygame developers'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.9.6'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "project",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "project = u'pygame'\ncopyright = u'2011-2019, pygame developers'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.9.6'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.9.6'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "copyright",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "copyright = u'2011-2019, pygame developers'\n# The version info for the project you're documenting, acts as replacement for\n# |version| and |release|, also used in various other places throughout the\n# built documents.\n#\n# The short X.Y version.\nversion = '1.9.6'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.9.6'\n# Format strings for the version directives",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "version",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "version = '1.9.6'\n# The full version, including alpha/beta/rc tags.\nrelease = '1.9.6'\n# Format strings for the version directives\nversionadded_format = 'New in pygame %s'\nversionchanged_format = 'Changed in pygame %s'\ndeprecated_format = 'Deprecated since pygame %s'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "release",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "release = '1.9.6'\n# Format strings for the version directives\nversionadded_format = 'New in pygame %s'\nversionchanged_format = 'Changed in pygame %s'\ndeprecated_format = 'Deprecated since pygame %s'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "versionadded_format",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "versionadded_format = 'New in pygame %s'\nversionchanged_format = 'Changed in pygame %s'\ndeprecated_format = 'Deprecated since pygame %s'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "versionchanged_format",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "versionchanged_format = 'Changed in pygame %s'\ndeprecated_format = 'Deprecated since pygame %s'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "deprecated_format",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "deprecated_format = 'Deprecated since pygame %s'\n# The language for content autogenerated by Sphinx. Refer to documentation\n# for a list of supported languages.\n#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#language",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#language = None\n# There are two options for replacing |today|: either, you set today to some\n# non-false value, then it is used:\n#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.\nunused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#today",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#today = ''\n# Else, today_fmt is used as the format for a strftime call.\n#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.\nunused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.\n#exclude_trees = []\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#today_fmt",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#today_fmt = '%B %d, %Y'\n# List of documents that shouldn't be included in the build.\nunused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.\n#exclude_trees = []\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "unused_docs",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "unused_docs = []\n# List of directories, relative to source directory, that shouldn't be searched\n# for source files.\n#exclude_trees = []\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#exclude_trees",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#exclude_trees = []\n# The reST default role (used for this markup: `text`) to use for all documents.\n#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\nadd_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#default_role",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#default_role = None\n# If true, '()' will be appended to :func: etc. cross-reference text.\n#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\nadd_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#add_function_parentheses",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#add_function_parentheses = True\n# If true, the current module name will be prepended to all description\n# unit titles (such as .. function::).\nadd_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "add_module_names",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "add_module_names = True\n# If true, sectionauthor and moduleauthor directives will be shown in the\n# output. They are ignored by default.\n#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\nmodindex_common_prefix = ['pygame']\n# Documents which are to be left undecorated\n# (e.g. adding tooltips to known document links):",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#show_authors",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#show_authors = False\n# The name of the Pygments (syntax highlighting) style to use.\npygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\nmodindex_common_prefix = ['pygame']\n# Documents which are to be left undecorated\n# (e.g. adding tooltips to known document links):\nboilerplate_skip_transform = ['index']\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "pygments_style",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "pygments_style = 'sphinx'\n# A list of ignored prefixes for module index sorting.\nmodindex_common_prefix = ['pygame']\n# Documents which are to be left undecorated\n# (e.g. adding tooltips to known document links):\nboilerplate_skip_transform = ['index']\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n# Sphinx are currently 'default' and 'sphinxdoc'.\nhtml_theme = 'classic'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "modindex_common_prefix",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "modindex_common_prefix = ['pygame']\n# Documents which are to be left undecorated\n# (e.g. adding tooltips to known document links):\nboilerplate_skip_transform = ['index']\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n# Sphinx are currently 'default' and 'sphinxdoc'.\nhtml_theme = 'classic'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "boilerplate_skip_transform",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "boilerplate_skip_transform = ['index']\n# -- Options for HTML output ---------------------------------------------------\n# The theme to use for HTML and HTML Help pages.  Major themes that come with\n# Sphinx are currently 'default' and 'sphinxdoc'.\nhtml_theme = 'classic'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\nhtml_theme_options = {'home_uri': 'https://www.pygame.org/'}\n# Add any paths that contain custom themes here, relative to this directory.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "html_theme",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "html_theme = 'classic'\n# Theme options are theme-specific and customize the look and feel of a theme\n# further.  For a list of options available for each theme, see the\n# documentation.\nhtml_theme_options = {'home_uri': 'https://www.pygame.org/'}\n# Add any paths that contain custom themes here, relative to this directory.\nhtml_theme_path = ['themes']\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\nhtml_title = \"%s v%s documentation\" % (project, version)",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_options",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "html_theme_options = {'home_uri': 'https://www.pygame.org/'}\n# Add any paths that contain custom themes here, relative to this directory.\nhtml_theme_path = ['themes']\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\nhtml_title = \"%s v%s documentation\" % (project, version)\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "html_theme_path",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "html_theme_path = ['themes']\n# The name for this set of Sphinx documents.  If None, it defaults to\n# \"<project> v<release> documentation\".\nhtml_title = \"%s v%s documentation\" % (project, version)\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\nhtml_logo = '_static/pygame_tiny.png'\n# The name of an image file (within the static path) to use as favicon of the",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "html_title",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "html_title = \"%s v%s documentation\" % (project, version)\n# A shorter title for the navigation bar.  Default is the same as html_title.\n#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\nhtml_logo = '_static/pygame_tiny.png'\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\nhtml_favicon = '_static/pygame.ico'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#html_short_title",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#html_short_title = None\n# The name of an image file (relative to this directory) to place at the top\n# of the sidebar.\nhtml_logo = '_static/pygame_tiny.png'\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\nhtml_favicon = '_static/pygame.ico'\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "html_logo",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "html_logo = '_static/pygame_tiny.png'\n# The name of an image file (within the static path) to use as favicon of the\n# docs.  This file should be a Windows icon file (.ico) being 16x16 or 32x32\n# pixels large.\nhtml_favicon = '_static/pygame.ico'\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "html_favicon",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "html_favicon = '_static/pygame.ico'\n# Add any paths that contain custom static files (such as style sheets) here,\n# relative to this directory. They are copied after the builtin static files,\n# so a file named \"default.css\" will overwrite the builtin \"default.css\".\nhtml_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "html_static_path",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "html_static_path = ['_static']\n# If not '', a 'Last updated on:' timestamp is inserted at every page bottom,\n# using the given strftime format.\n#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#html_last_updated_fmt",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#html_last_updated_fmt = '%b %d, %Y'\n# If true, SmartyPants will be used to convert quotes and dashes to\n# typographically correct entities.\n#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_smartypants",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#html_use_smartypants = True\n# Custom sidebar templates, maps document names to template names.\n#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\nhtml_use_modindex = False\n# If false, no index is generated.\n#html_use_index = True",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#html_sidebars",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#html_sidebars = {}\n# Additional templates that should be rendered to pages, maps page names to\n# template names.\n#html_additional_pages = {}\n# If false, no module index is generated.\nhtml_use_modindex = False\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#html_additional_pages",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#html_additional_pages = {}\n# If false, no module index is generated.\nhtml_use_modindex = False\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "html_use_modindex",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "html_use_modindex = False\n# If false, no index is generated.\n#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\nhtml_show_sphinx = False\n# If true, an OpenSearch description file will be output, and all pages will",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_index",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#html_use_index = True\n# If true, the index is split into individual pages for each letter.\n#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\nhtml_show_sphinx = False\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#html_split_index",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#html_split_index = False\n# If true, links to the reST sources are added to the pages.\n#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\nhtml_show_sphinx = False\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#html_show_sourcelink",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#html_show_sourcelink = True\n# If true, \"Created using Sphinx\" is shown in the HTML footer. Default is True.\nhtml_show_sphinx = False\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = ''\n# Output file base name for HTML help builder.",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "html_show_sphinx",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "html_show_sphinx = False\n# If true, an OpenSearch description file will be output, and all pages will\n# contain a <link> tag referring to it.  The value of this option must be the\n# base URL from which the finished HTML is served.\n#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = ''\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Pygamedoc'\n# -- Options for LaTeX output --------------------------------------------------",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#html_use_opensearch",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#html_use_opensearch = ''\n# If nonempty, this is the file name suffix for HTML files (e.g. \".xhtml\").\n#html_file_suffix = ''\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Pygamedoc'\n# -- Options for LaTeX output --------------------------------------------------\n# The paper size ('letter' or 'a4').\n#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#html_file_suffix",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#html_file_suffix = ''\n# Output file base name for HTML help builder.\nhtmlhelp_basename = 'Pygamedoc'\n# -- Options for LaTeX output --------------------------------------------------\n# The paper size ('letter' or 'a4').\n#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "htmlhelp_basename",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "htmlhelp_basename = 'Pygamedoc'\n# -- Options for LaTeX output --------------------------------------------------\n# The paper size ('letter' or 'a4').\n#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'Pygame.tex', u'Pygame Documentation',",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#latex_paper_size",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#latex_paper_size = 'letter'\n# The font size ('10pt', '11pt' or '12pt').\n#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'Pygame.tex', u'Pygame Documentation',\n   u'Pygame Developers', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#latex_font_size",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#latex_font_size = '10pt'\n# Grouping the document tree into LaTeX files. List of tuples\n# (source start file, target name, title, author, documentclass [howto/manual]).\nlatex_documents = [\n  ('index', 'Pygame.tex', u'Pygame Documentation',\n   u'Pygame Developers', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "latex_documents",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "latex_documents = [\n  ('index', 'Pygame.tex', u'Pygame Documentation',\n   u'Pygame Developers', 'manual'),\n]\n# The name of an image file (relative to this directory) to place at the top of\n# the title page.\n#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#latex_logo",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#latex_logo = None\n# For \"manual\" documents, if this is true, then toplevel headings are parts,\n# not chapters.\n#latex_use_parts = False\n# Additional stuff for the LaTeX preamble.\n#latex_preamble = ''\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#latex_use_parts",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#latex_use_parts = False\n# Additional stuff for the LaTeX preamble.\n#latex_preamble = ''\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True\n#-- Options for C header output ------------------------------------------------\n# Target directory for header files (default: current working directory).\nheaders_dest = './_headers'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#latex_preamble",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#latex_preamble = ''\n# Documents to append as an appendix to all manuals.\n#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True\n#-- Options for C header output ------------------------------------------------\n# Target directory for header files (default: current working directory).\nheaders_dest = './_headers'\n# Whether or not to create target directory tree if it does not exist\n# (default: no directory creation).",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#latex_appendices",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#latex_appendices = []\n# If false, no module index is generated.\n#latex_use_modindex = True\n#-- Options for C header output ------------------------------------------------\n# Target directory for header files (default: current working directory).\nheaders_dest = './_headers'\n# Whether or not to create target directory tree if it does not exist\n# (default: no directory creation).\nheaders_mkdirs = True\n# Suffix to add for header file names before the '.h' extension",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "#latex_use_modindex",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "#latex_use_modindex = True\n#-- Options for C header output ------------------------------------------------\n# Target directory for header files (default: current working directory).\nheaders_dest = './_headers'\n# Whether or not to create target directory tree if it does not exist\n# (default: no directory creation).\nheaders_mkdirs = True\n# Suffix to add for header file names before the '.h' extension\n# (default: no suffix).\nheaders_filename_sfx = '_doc'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "headers_dest",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "headers_dest = './_headers'\n# Whether or not to create target directory tree if it does not exist\n# (default: no directory creation).\nheaders_mkdirs = True\n# Suffix to add for header file names before the '.h' extension\n# (default: no suffix).\nheaders_filename_sfx = '_doc'\nsmartquotes = False\nedit_on_github_project = 'pygame/pygame'\nedit_on_github_branch = 'master'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "headers_mkdirs",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "headers_mkdirs = True\n# Suffix to add for header file names before the '.h' extension\n# (default: no suffix).\nheaders_filename_sfx = '_doc'\nsmartquotes = False\nedit_on_github_project = 'pygame/pygame'\nedit_on_github_branch = 'master'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "headers_filename_sfx",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "headers_filename_sfx = '_doc'\nsmartquotes = False\nedit_on_github_project = 'pygame/pygame'\nedit_on_github_branch = 'master'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "smartquotes",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "smartquotes = False\nedit_on_github_project = 'pygame/pygame'\nedit_on_github_branch = 'master'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "edit_on_github_project",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "edit_on_github_project = 'pygame/pygame'\nedit_on_github_branch = 'master'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "edit_on_github_branch",
        "kind": 5,
        "importPath": "pygame-1.9.6.docs.reST.conf",
        "description": "pygame-1.9.6.docs.reST.conf",
        "peekOfCode": "edit_on_github_branch = 'master'",
        "detail": "pygame-1.9.6.docs.reST.conf",
        "documentation": {}
    },
    {
        "label": "dummysound",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "peekOfCode": "class dummysound:\n    def play(self): pass\ndef load_sound(file):\n    if not pygame.mixer: return dummysound()\n    file = os.path.join('data', file)\n    try:\n        sound = pygame.mixer.Sound(file)\n        return sound\n    except pygame.error:\n        print ('Warning, unable to load,', file)",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "peekOfCode": "class Player(pygame.sprite.Sprite):\n    speed = 10\n    bounce = 24\n    gun_offset = -11\n    images = []\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self, self.containers)\n        self.image = self.images[0]\n        self.rect = self.image.get_rect()\n        self.reloading = 0",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "documentation": {}
    },
    {
        "label": "Alien",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "peekOfCode": "class Alien(pygame.sprite.Sprite):\n    speed = 13\n    animcycle = 12\n    images = []\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self, self.containers)\n        self.image = self.images[0]\n        self.rect = self.image.get_rect()\n        self.facing = random.choice((-1,1)) * Alien.speed\n        self.frame = 0",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "documentation": {}
    },
    {
        "label": "Explosion",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "peekOfCode": "class Explosion(pygame.sprite.Sprite):\n    defaultlife = 12\n    animcycle = 3\n    images = []\n    def __init__(self, actor):\n        pygame.sprite.Sprite.__init__(self, self.containers)\n        self.image = self.images[0]\n        self.rect = self.image.get_rect()\n        self.life = self.defaultlife\n        self.rect.center = actor.rect.center",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "documentation": {}
    },
    {
        "label": "Shot",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "peekOfCode": "class Shot(pygame.sprite.Sprite):\n    speed = -11\n    images = []\n    def __init__(self, pos):\n        pygame.sprite.Sprite.__init__(self, self.containers)\n        self.image = self.images[0]\n        self.rect = self.image.get_rect()\n        self.rect.midbottom = pos\n    def update(self):\n        self.rect.move_ip(0, self.speed)",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "documentation": {}
    },
    {
        "label": "Bomb",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "peekOfCode": "class Bomb(pygame.sprite.Sprite):\n    speed = 9\n    images = []\n    def __init__(self, alien):\n        pygame.sprite.Sprite.__init__(self, self.containers)\n        self.image = self.images[0]\n        self.rect = self.image.get_rect()\n        self.rect.centerx = alien.rect.centerx\n        self.rect.bottom = alien.rect.bottom + 5\n    def update(self):",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "documentation": {}
    },
    {
        "label": "Score",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "peekOfCode": "class Score(pygame.sprite.Sprite):\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self)\n        self.font = pygame.font.Font(None, 20)\n        self.font.set_italic(1)\n        self.color = Color('white')\n        self.lastscore = -1\n        self.update()\n        self.rect = self.image.get_rect().move(10, 450)\n    def update(self):",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "documentation": {}
    },
    {
        "label": "load_image",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "peekOfCode": "def load_image(file):\n    \"loads an image, prepares it for play\"\n    file = os.path.join('data', file)\n    try:\n        surface = pygame.image.load(file)\n    except pygame.error:\n        raise SystemExit('Could not load image \"%s\" %s'%(file, pygame.get_error()))\n    return surface.convert()\ndef load_images(*files):\n    imgs = []",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "documentation": {}
    },
    {
        "label": "load_images",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "peekOfCode": "def load_images(*files):\n    imgs = []\n    for file in files:\n        imgs.append(load_image(file))\n    return imgs\nclass dummysound:\n    def play(self): pass\ndef load_sound(file):\n    if not pygame.mixer: return dummysound()\n    file = os.path.join('data', file)",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "documentation": {}
    },
    {
        "label": "load_sound",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "peekOfCode": "def load_sound(file):\n    if not pygame.mixer: return dummysound()\n    file = os.path.join('data', file)\n    try:\n        sound = pygame.mixer.Sound(file)\n        return sound\n    except pygame.error:\n        print ('Warning, unable to load,', file)\n    return dummysound()\n# each type of game object gets an init and an",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "peekOfCode": "def main(winstyle = 0):\n    # Initialize pygame\n    pygame.init()\n    if pygame.mixer and not pygame.mixer.get_init():\n        print ('Warning, no sound')\n        pygame.mixer = None\n    # Set the display mode\n    winstyle = 0  # |FULLSCREEN\n    bestdepth = pygame.display.mode_ok(SCREENRECT.size, winstyle, 32)\n    screen = pygame.display.set_mode(SCREENRECT.size, winstyle, bestdepth)",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.aliens",
        "documentation": {}
    },
    {
        "label": "NAME",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.setup",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.setup",
        "peekOfCode": "NAME = 'aliens'\nVERSION = '0.1'\nplist = dict(\n    CFBundleIconFile=NAME,\n    CFBundleName=NAME,\n    CFBundleShortVersionString=VERSION,\n    CFBundleGetInfoString=' '.join([NAME, VERSION]),\n    CFBundleExecutable=NAME,\n    CFBundleIdentifier='org.pygame.examples.aliens',\n)",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.setup",
        "documentation": {}
    },
    {
        "label": "VERSION",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.setup",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.setup",
        "peekOfCode": "VERSION = '0.1'\nplist = dict(\n    CFBundleIconFile=NAME,\n    CFBundleName=NAME,\n    CFBundleShortVersionString=VERSION,\n    CFBundleGetInfoString=' '.join([NAME, VERSION]),\n    CFBundleExecutable=NAME,\n    CFBundleIdentifier='org.pygame.examples.aliens',\n)\nsetup(",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.setup",
        "documentation": {}
    },
    {
        "label": "plist",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.macosx.aliens_app_example.setup",
        "description": "pygame-1.9.6.examples.macosx.aliens_app_example.setup",
        "peekOfCode": "plist = dict(\n    CFBundleIconFile=NAME,\n    CFBundleName=NAME,\n    CFBundleShortVersionString=VERSION,\n    CFBundleGetInfoString=' '.join([NAME, VERSION]),\n    CFBundleExecutable=NAME,\n    CFBundleIdentifier='org.pygame.examples.aliens',\n)\nsetup(\n    data_files=['English.lproj', '../../data'],",
        "detail": "pygame-1.9.6.examples.macosx.aliens_app_example.setup",
        "documentation": {}
    },
    {
        "label": "SysFont",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.macosx.macfont",
        "description": "pygame-1.9.6.examples.macosx.macfont",
        "peekOfCode": "class SysFont(object):\n    def __init__(self, name, size):\n        self._font = NSFont.fontWithName_size_(name, size)\n        self._isBold = False\n        self._isOblique = False\n        self._isUnderline = False\n        self._family = name\n        self._size = size\n        self._setupFont()\n    def _setupFont(self):",
        "detail": "pygame-1.9.6.examples.macosx.macfont",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.aacircle",
        "description": "pygame-1.9.6.examples.aacircle",
        "peekOfCode": "def main():\n    pygame.init()\n    screen = pygame.display.set_mode((500,500))\n    screen.fill((255, 0, 0))\n    s = pygame.Surface(screen.get_size(), pygame.SRCALPHA, 32)\n    pygame.draw.line(s, (0,0,0), (250, 250), (250+200,250))\n    width = 1\n    for a_radius in range(width):\n        radius = 200\n        pygame.gfxdraw.aacircle(s, 250, 250, radius-a_radius, (0, 0, 0))",
        "detail": "pygame-1.9.6.examples.aacircle",
        "documentation": {}
    },
    {
        "label": "dummysound",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "class dummysound:\n    def play(self): pass\ndef load_sound(file):\n    if not pygame.mixer: return dummysound()\n    file = os.path.join(main_dir, 'data', file)\n    try:\n        sound = pygame.mixer.Sound(file)\n        return sound\n    except pygame.error:\n        print ('Warning, unable to load, %s' % file)",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "class Player(pygame.sprite.Sprite):\n    speed = 10\n    bounce = 24\n    gun_offset = -11\n    images = []\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self, self.containers)\n        self.image = self.images[0]\n        self.rect = self.image.get_rect(midbottom=SCREENRECT.midbottom)\n        self.reloading = 0",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "Alien",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "class Alien(pygame.sprite.Sprite):\n    speed = 13\n    animcycle = 12\n    images = []\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self, self.containers)\n        self.image = self.images[0]\n        self.rect = self.image.get_rect()\n        self.facing = random.choice((-1,1)) * Alien.speed\n        self.frame = 0",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "Explosion",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "class Explosion(pygame.sprite.Sprite):\n    defaultlife = 12\n    animcycle = 3\n    images = []\n    def __init__(self, actor):\n        pygame.sprite.Sprite.__init__(self, self.containers)\n        self.image = self.images[0]\n        self.rect = self.image.get_rect(center=actor.rect.center)\n        self.life = self.defaultlife\n    def update(self):",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "Shot",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "class Shot(pygame.sprite.Sprite):\n    speed = -11\n    images = []\n    def __init__(self, pos):\n        pygame.sprite.Sprite.__init__(self, self.containers)\n        self.image = self.images[0]\n        self.rect = self.image.get_rect(midbottom=pos)\n    def update(self):\n        self.rect.move_ip(0, self.speed)\n        if self.rect.top <= 0:",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "Bomb",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "class Bomb(pygame.sprite.Sprite):\n    speed = 9\n    images = []\n    def __init__(self, alien):\n        pygame.sprite.Sprite.__init__(self, self.containers)\n        self.image = self.images[0]\n        self.rect = self.image.get_rect(midbottom=\n                    alien.rect.move(0,5).midbottom)\n    def update(self):\n        self.rect.move_ip(0, self.speed)",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "Score",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "class Score(pygame.sprite.Sprite):\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self)\n        self.font = pygame.font.Font(None, 20)\n        self.font.set_italic(1)\n        self.color = Color('white')\n        self.lastscore = -1\n        self.update()\n        self.rect = self.image.get_rect().move(10, 450)\n    def update(self):",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "load_image",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "def load_image(file):\n    \"loads an image, prepares it for play\"\n    file = os.path.join(main_dir, 'data', file)\n    try:\n        surface = pygame.image.load(file)\n    except pygame.error:\n        raise SystemExit('Could not load image \"%s\" %s'%(file, pygame.get_error()))\n    return surface.convert()\ndef load_images(*files):\n    imgs = []",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "load_images",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "def load_images(*files):\n    imgs = []\n    for file in files:\n        imgs.append(load_image(file))\n    return imgs\nclass dummysound:\n    def play(self): pass\ndef load_sound(file):\n    if not pygame.mixer: return dummysound()\n    file = os.path.join(main_dir, 'data', file)",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "load_sound",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "def load_sound(file):\n    if not pygame.mixer: return dummysound()\n    file = os.path.join(main_dir, 'data', file)\n    try:\n        sound = pygame.mixer.Sound(file)\n        return sound\n    except pygame.error:\n        print ('Warning, unable to load, %s' % file)\n    return dummysound()\n# each type of game object gets an init and an",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "def main(winstyle = 0):\n    # Initialize pygame\n    if pygame.get_sdl_version()[0] == 2:\n        pygame.mixer.pre_init(44100, 32, 2, 1024)\n    pygame.init()\n    if pygame.mixer and not pygame.mixer.get_init():\n        print ('Warning, no sound')\n        pygame.mixer = None\n    fullscreen = False\n    # Set the display mode",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.aliens",
        "description": "pygame-1.9.6.examples.aliens",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]\ndef load_image(file):\n    \"loads an image, prepares it for play\"\n    file = os.path.join(main_dir, 'data', file)\n    try:\n        surface = pygame.image.load(file)\n    except pygame.error:\n        raise SystemExit('Could not load image \"%s\" %s'%(file, pygame.get_error()))\n    return surface.convert()\ndef load_images(*files):",
        "detail": "pygame-1.9.6.examples.aliens",
        "documentation": {}
    },
    {
        "label": "surfdemo_show",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.arraydemo",
        "description": "pygame-1.9.6.examples.arraydemo",
        "peekOfCode": "def surfdemo_show(array_img, name):\n    \"displays a surface, waits for user to continue\"\n    screen = pygame.display.set_mode(array_img.shape[:2], 0, 32)\n    surfarray.blit_array(screen, array_img)\n    pygame.display.flip()\n    pygame.display.set_caption(name)\n    while 1:\n        e = pygame.event.wait()\n        if e.type == MOUSEBUTTONDOWN: break\n        elif e.type == KEYDOWN and e.key == K_s:",
        "detail": "pygame-1.9.6.examples.arraydemo",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.arraydemo",
        "description": "pygame-1.9.6.examples.arraydemo",
        "peekOfCode": "def main(arraytype=None):\n    \"\"\"show various surfarray effects\n    If arraytype is provided then use that array package. Valid\n    values are 'numeric' or 'numpy'. Otherwise default to NumPy,\n    or fall back on Numeric if NumPy is not installed.\n    \"\"\"\n    if arraytype not in ('numpy', None):\n        raise ValueError('Array type not supported: %r' % arraytype)\n    import numpy as N\n    from numpy import int32, uint8, uint",
        "detail": "pygame-1.9.6.examples.arraydemo",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.arraydemo",
        "description": "pygame-1.9.6.examples.arraydemo",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]\ndef surfdemo_show(array_img, name):\n    \"displays a surface, waits for user to continue\"\n    screen = pygame.display.set_mode(array_img.shape[:2], 0, 32)\n    surfarray.blit_array(screen, array_img)\n    pygame.display.flip()\n    pygame.display.set_caption(name)\n    while 1:\n        e = pygame.event.wait()\n        if e.type == MOUSEBUTTONDOWN: break",
        "detail": "pygame-1.9.6.examples.arraydemo",
        "documentation": {}
    },
    {
        "label": "callback",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.audiocapture",
        "description": "pygame-1.9.6.examples.audiocapture",
        "peekOfCode": "def callback(audiodevice, audiomemoryview):\n    \"\"\" This is called in the sound thread.\n    Note, that the frequency and such you request may not be what you get.\n    \"\"\"\n    # print(type(audiomemoryview), len(audiomemoryview))\n    # print(audiodevice)\n    sound_chunks.append(bytes(audiomemoryview))\naudio = AudioDevice(\n    devicename=names[0],\n    iscapture=1,",
        "detail": "pygame-1.9.6.examples.audiocapture",
        "documentation": {}
    },
    {
        "label": "names",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.audiocapture",
        "description": "pygame-1.9.6.examples.audiocapture",
        "peekOfCode": "names = [get_audio_device_name(x, 1) for x in range(get_num_audio_devices(1))]\nprint(names)\niscapture = 1\nsounds = []\nsound_chunks = []\ndef callback(audiodevice, audiomemoryview):\n    \"\"\" This is called in the sound thread.\n    Note, that the frequency and such you request may not be what you get.\n    \"\"\"\n    # print(type(audiomemoryview), len(audiomemoryview))",
        "detail": "pygame-1.9.6.examples.audiocapture",
        "documentation": {}
    },
    {
        "label": "iscapture",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.audiocapture",
        "description": "pygame-1.9.6.examples.audiocapture",
        "peekOfCode": "iscapture = 1\nsounds = []\nsound_chunks = []\ndef callback(audiodevice, audiomemoryview):\n    \"\"\" This is called in the sound thread.\n    Note, that the frequency and such you request may not be what you get.\n    \"\"\"\n    # print(type(audiomemoryview), len(audiomemoryview))\n    # print(audiodevice)\n    sound_chunks.append(bytes(audiomemoryview))",
        "detail": "pygame-1.9.6.examples.audiocapture",
        "documentation": {}
    },
    {
        "label": "sounds",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.audiocapture",
        "description": "pygame-1.9.6.examples.audiocapture",
        "peekOfCode": "sounds = []\nsound_chunks = []\ndef callback(audiodevice, audiomemoryview):\n    \"\"\" This is called in the sound thread.\n    Note, that the frequency and such you request may not be what you get.\n    \"\"\"\n    # print(type(audiomemoryview), len(audiomemoryview))\n    # print(audiodevice)\n    sound_chunks.append(bytes(audiomemoryview))\naudio = AudioDevice(",
        "detail": "pygame-1.9.6.examples.audiocapture",
        "documentation": {}
    },
    {
        "label": "sound_chunks",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.audiocapture",
        "description": "pygame-1.9.6.examples.audiocapture",
        "peekOfCode": "sound_chunks = []\ndef callback(audiodevice, audiomemoryview):\n    \"\"\" This is called in the sound thread.\n    Note, that the frequency and such you request may not be what you get.\n    \"\"\"\n    # print(type(audiomemoryview), len(audiomemoryview))\n    # print(audiodevice)\n    sound_chunks.append(bytes(audiomemoryview))\naudio = AudioDevice(\n    devicename=names[0],",
        "detail": "pygame-1.9.6.examples.audiocapture",
        "documentation": {}
    },
    {
        "label": "audio",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.audiocapture",
        "description": "pygame-1.9.6.examples.audiocapture",
        "peekOfCode": "audio = AudioDevice(\n    devicename=names[0],\n    iscapture=1,\n    frequency=44100,\n    audioformat=AUDIO_F32,\n    numchannels=2,\n    chunksize=512,\n    allowed_changes=AUDIO_ALLOW_FORMAT_CHANGE,\n    callback=callback,\n)",
        "detail": "pygame-1.9.6.examples.audiocapture",
        "documentation": {}
    },
    {
        "label": "sound",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.audiocapture",
        "description": "pygame-1.9.6.examples.audiocapture",
        "peekOfCode": "sound = pg.mixer.Sound(buffer=b''.join(sound_chunks))\nprint('playing back recorded sound')\nsound.play()\ntime.sleep(5)",
        "detail": "pygame-1.9.6.examples.audiocapture",
        "documentation": {}
    },
    {
        "label": "usag",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.blend_fill",
        "description": "pygame-1.9.6.examples.blend_fill",
        "peekOfCode": "def usage ():\n    print (\"Press R, G, B to increase the color channel values,\")\n    print (\"1-9 to set the step range for the increment,\")\n    print (\"A - ADD, S- SUB, M- MULT, - MIN, + MAX\")\n    print (\"  to change the blend modes\")\nmain_dir = os.path.split(os.path.abspath(__file__))[0]\ndata_dir = os.path.join(main_dir, 'data')\ndef main():\n    color = [0, 0, 0]\n    changed = False",
        "detail": "pygame-1.9.6.examples.blend_fill",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.blend_fill",
        "description": "pygame-1.9.6.examples.blend_fill",
        "peekOfCode": "def main():\n    color = [0, 0, 0]\n    changed = False\n    blendtype = 0\n    step = 5\n    pygame.init ()\n    screen = pygame.display.set_mode ((640, 480), 0, 32)\n    screen.fill ((100, 100, 100))\n    image = pygame.image.load (os.path.join (data_dir, \"liquid.bmp\")).convert()\n    blendimage = pygame.image.load (os.path.join (data_dir, \"liquid.bmp\")).convert()",
        "detail": "pygame-1.9.6.examples.blend_fill",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.blend_fill",
        "description": "pygame-1.9.6.examples.blend_fill",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]\ndata_dir = os.path.join(main_dir, 'data')\ndef main():\n    color = [0, 0, 0]\n    changed = False\n    blendtype = 0\n    step = 5\n    pygame.init ()\n    screen = pygame.display.set_mode ((640, 480), 0, 32)\n    screen.fill ((100, 100, 100))",
        "detail": "pygame-1.9.6.examples.blend_fill",
        "documentation": {}
    },
    {
        "label": "data_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.blend_fill",
        "description": "pygame-1.9.6.examples.blend_fill",
        "peekOfCode": "data_dir = os.path.join(main_dir, 'data')\ndef main():\n    color = [0, 0, 0]\n    changed = False\n    blendtype = 0\n    step = 5\n    pygame.init ()\n    screen = pygame.display.set_mode ((640, 480), 0, 32)\n    screen.fill ((100, 100, 100))\n    image = pygame.image.load (os.path.join (data_dir, \"liquid.bmp\")).convert()",
        "detail": "pygame-1.9.6.examples.blend_fill",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.blit_blends",
        "description": "pygame-1.9.6.examples.blit_blends",
        "peekOfCode": "def main():\n    pygame.init()\n    pygame.mixer.quit() # remove ALSA underflow messages for Debian squeeze\n    screen = pygame.display.set_mode((640, 480))\n    im1= pygame.Surface(screen.get_size())\n    #im1= im1.convert()\n    im1.fill((100, 0, 0))\n    im2= pygame.Surface(screen.get_size())\n    im2.fill((0, 50, 0))\n    # we make a srcalpha copy of it.",
        "detail": "pygame-1.9.6.examples.blit_blends",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.blit_blends",
        "description": "pygame-1.9.6.examples.blit_blends",
        "peekOfCode": "def usage():\n    print (\"press keys 1-5 to change image to blit.\")\n    print (\"A - ADD, S- SUB, M- MULT, - MIN, + MAX\")\n    print (\"T - timing test for special blend modes.\")\nif __name__ == '__main__': \n    usage()\n    main()",
        "detail": "pygame-1.9.6.examples.blit_blends",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.blit_blends",
        "description": "pygame-1.9.6.examples.blit_blends",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]\ndata_dir = os.path.join(main_dir, 'data')\ndef main():\n    pygame.init()\n    pygame.mixer.quit() # remove ALSA underflow messages for Debian squeeze\n    screen = pygame.display.set_mode((640, 480))\n    im1= pygame.Surface(screen.get_size())\n    #im1= im1.convert()\n    im1.fill((100, 0, 0))\n    im2= pygame.Surface(screen.get_size())",
        "detail": "pygame-1.9.6.examples.blit_blends",
        "documentation": {}
    },
    {
        "label": "data_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.blit_blends",
        "description": "pygame-1.9.6.examples.blit_blends",
        "peekOfCode": "data_dir = os.path.join(main_dir, 'data')\ndef main():\n    pygame.init()\n    pygame.mixer.quit() # remove ALSA underflow messages for Debian squeeze\n    screen = pygame.display.set_mode((640, 480))\n    im1= pygame.Surface(screen.get_size())\n    #im1= im1.convert()\n    im1.fill((100, 0, 0))\n    im2= pygame.Surface(screen.get_size())\n    im2.fill((0, 50, 0))",
        "detail": "pygame-1.9.6.examples.blit_blends",
        "documentation": {}
    },
    {
        "label": "VideoCapturePlayer",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.camera",
        "description": "pygame-1.9.6.examples.camera",
        "peekOfCode": "class VideoCapturePlayer(object):\n    size = ( 640, 480 )\n    def __init__(self, **argd):\n        self.__dict__.update(**argd)\n        super(VideoCapturePlayer, self).__init__(**argd)\n        # create a display surface. standard pygame stuff\n        self.display = pygame.display.set_mode( self.size, 0 )\n        self.init_cams(0)\n    def init_cams(self, which_cam_idx):\n        # gets a list of available cameras.",
        "detail": "pygame-1.9.6.examples.camera",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.camera",
        "description": "pygame-1.9.6.examples.camera",
        "peekOfCode": "def main():\n    pygame.init()\n    pygame.camera.init()\n    VideoCapturePlayer().main()\n    pygame.quit()\nif __name__ == '__main__':\n    main()",
        "detail": "pygame-1.9.6.examples.camera",
        "documentation": {}
    },
    {
        "label": "Fist",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.chimp",
        "description": "pygame-1.9.6.examples.chimp",
        "peekOfCode": "class Fist(pygame.sprite.Sprite):\n    \"\"\"moves a clenched fist on the screen, following the mouse\"\"\"\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self) #call Sprite initializer\n        self.image, self.rect = load_image('fist.bmp', -1)\n        self.punching = 0\n    def update(self):\n        \"\"\"move the fist based on the mouse position\"\"\"\n        pos = pygame.mouse.get_pos()\n        self.rect.midtop = pos",
        "detail": "pygame-1.9.6.examples.chimp",
        "documentation": {}
    },
    {
        "label": "Chimp",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.chimp",
        "description": "pygame-1.9.6.examples.chimp",
        "peekOfCode": "class Chimp(pygame.sprite.Sprite):\n    \"\"\"moves a monkey critter across the screen. it can spin the\n       monkey when it is punched.\"\"\"\n    def __init__(self):\n        pygame.sprite.Sprite.__init__(self)  # call Sprite intializer\n        self.image, self.rect = load_image('chimp.bmp', -1)\n        screen = pygame.display.get_surface()\n        self.area = screen.get_rect()\n        self.rect.topleft = 10, 10\n        self.move = 9",
        "detail": "pygame-1.9.6.examples.chimp",
        "documentation": {}
    },
    {
        "label": "load_image",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.chimp",
        "description": "pygame-1.9.6.examples.chimp",
        "peekOfCode": "def load_image(name, colorkey=None):\n    fullname = os.path.join(data_dir, name)\n    try:\n        image = pygame.image.load(fullname)\n    except pygame.error:\n        print('Cannot load image:', fullname)\n        raise SystemExit(str(geterror()))\n    image = image.convert()\n    if colorkey is not None:\n        if colorkey is -1:",
        "detail": "pygame-1.9.6.examples.chimp",
        "documentation": {}
    },
    {
        "label": "load_sound",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.chimp",
        "description": "pygame-1.9.6.examples.chimp",
        "peekOfCode": "def load_sound(name):\n    class NoneSound:\n        def play(self): pass\n    if not pygame.mixer or not pygame.mixer.get_init():\n        return NoneSound()\n    fullname = os.path.join(data_dir, name)\n    try:\n        sound = pygame.mixer.Sound(fullname)\n    except pygame.error:\n        print('Cannot load sound: %s' % fullname)",
        "detail": "pygame-1.9.6.examples.chimp",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.chimp",
        "description": "pygame-1.9.6.examples.chimp",
        "peekOfCode": "def main():\n    \"\"\"this function is called when the program starts.\n       it initializes everything it needs, then runs in\n       a loop until the function returns.\"\"\"\n    # Initialize Everything\n    pygame.init()\n    screen = pygame.display.set_mode((468, 60))\n    pygame.display.set_caption('Monkey Fever')\n    pygame.mouse.set_visible(0)\n    # Create The Backgound",
        "detail": "pygame-1.9.6.examples.chimp",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.chimp",
        "description": "pygame-1.9.6.examples.chimp",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]\ndata_dir = os.path.join(main_dir, 'data')\n# functions to create our resources\ndef load_image(name, colorkey=None):\n    fullname = os.path.join(data_dir, name)\n    try:\n        image = pygame.image.load(fullname)\n    except pygame.error:\n        print('Cannot load image:', fullname)\n        raise SystemExit(str(geterror()))",
        "detail": "pygame-1.9.6.examples.chimp",
        "documentation": {}
    },
    {
        "label": "data_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.chimp",
        "description": "pygame-1.9.6.examples.chimp",
        "peekOfCode": "data_dir = os.path.join(main_dir, 'data')\n# functions to create our resources\ndef load_image(name, colorkey=None):\n    fullname = os.path.join(data_dir, name)\n    try:\n        image = pygame.image.load(fullname)\n    except pygame.error:\n        print('Cannot load image:', fullname)\n        raise SystemExit(str(geterror()))\n    image = image.convert()",
        "detail": "pygame-1.9.6.examples.chimp",
        "documentation": {}
    },
    {
        "label": "TestCursor",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.cursors",
        "description": "pygame-1.9.6.examples.cursors",
        "peekOfCode": "def TestCursor(arrow):\n    hotspot = None\n    for y in range(len(arrow)):\n        for x in range(len(arrow[y])):\n            if arrow[y][x] in ['x', ',', 'O']:\n                hotspot = x,y\n                break\n        if hotspot != None:\n            break\n    if hotspot == None:",
        "detail": "pygame-1.9.6.examples.cursors",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.cursors",
        "description": "pygame-1.9.6.examples.cursors",
        "peekOfCode": "def main():\n    pygame.init()\n    pygame.font.init()\n    font = pygame.font.Font(None, 24)\n    bg = pygame.display.set_mode((800, 600), 0, 24)\n    bg.fill((255,255,255))\n    bg.blit(font.render(\"Click to advance\", 1, (0, 0, 0)), (0, 0))\n    pygame.display.update()\n    for cursor in [no, arrow]:\n        TestCursor(cursor)",
        "detail": "pygame-1.9.6.examples.cursors",
        "documentation": {}
    },
    {
        "label": "arrow",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.cursors",
        "description": "pygame-1.9.6.examples.cursors",
        "peekOfCode": "arrow = ( \"xX                      \",\n          \"X.X                     \",\n          \"X..X                    \",\n          \"X...X                   \",\n          \"X....X                  \",\n          \"X.....X                 \",\n          \"X......X                \",\n          \"X.......X               \",\n          \"X........X              \",\n          \"X.........X             \",",
        "detail": "pygame-1.9.6.examples.cursors",
        "documentation": {}
    },
    {
        "label": "no",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.cursors",
        "description": "pygame-1.9.6.examples.cursors",
        "peekOfCode": "no = (\"                        \",\n         \"                        \",\n         \"         XXXXXX         \",\n         \"       XX......XX       \",\n         \"      X..........X      \",\n         \"     X....XXXX....X     \",\n         \"    X...XX    XX...X    \",\n         \"   X.....X      X...X   \",\n         \"   X..X...X      X..X   \",\n         \"  X...XX...X     X...X  \",",
        "detail": "pygame-1.9.6.examples.cursors",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.dropevent",
        "description": "pygame-1.9.6.examples.dropevent",
        "peekOfCode": "def main():\n    Running = True\n    surf = pg.display.set_mode((640,480))\n    font = pg.font.SysFont(\"Arial\", 24)\n    clock = pg.time.Clock()\n    spr_file_text = font.render(\"Feed me some file or image!\", 1, (255,255,255))\n    spr_file_text_rect = spr_file_text.get_rect()\n    spr_file_text_rect.center = surf.get_rect().center\n    spr_file_image = None\n    spr_file_image_rect = None",
        "detail": "pygame-1.9.6.examples.dropevent",
        "documentation": {}
    },
    {
        "label": "showtext",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.eventlist",
        "description": "pygame-1.9.6.examples.eventlist",
        "peekOfCode": "def showtext(win, pos, text, color, bgcolor):\n    textimg = Font.render(text, 1, color, bgcolor)\n    win.blit(textimg, pos)\n    return pos[0] + textimg.get_width() + 5, pos[1]\ndef drawstatus(win):\n    bgcolor = 50, 50, 50\n    win.fill(bgcolor, (0, 0, 640, 120))\n    win.blit(Font.render('Status Area', 1, (155, 155, 155), bgcolor), (2, 2))\n    pos = showtext(win, (10, 30), 'Mouse Focus', (255, 255, 255), bgcolor)\n    win.blit(ImgOnOff[mouse.get_focused()], pos)",
        "detail": "pygame-1.9.6.examples.eventlist",
        "documentation": {}
    },
    {
        "label": "drawstatus",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.eventlist",
        "description": "pygame-1.9.6.examples.eventlist",
        "peekOfCode": "def drawstatus(win):\n    bgcolor = 50, 50, 50\n    win.fill(bgcolor, (0, 0, 640, 120))\n    win.blit(Font.render('Status Area', 1, (155, 155, 155), bgcolor), (2, 2))\n    pos = showtext(win, (10, 30), 'Mouse Focus', (255, 255, 255), bgcolor)\n    win.blit(ImgOnOff[mouse.get_focused()], pos)\n    pos = showtext(win, (330, 30), 'Keyboard Focus', (255, 255, 255), bgcolor)\n    win.blit(ImgOnOff[key.get_focused()], pos)\n    pos = showtext(win, (10, 60), 'Mouse Position', (255, 255, 255), bgcolor)\n    p = '%s, %s' % mouse.get_pos()",
        "detail": "pygame-1.9.6.examples.eventlist",
        "documentation": {}
    },
    {
        "label": "drawhistory",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.eventlist",
        "description": "pygame-1.9.6.examples.eventlist",
        "peekOfCode": "def drawhistory(win, history):\n    win.blit(Font.render('Event History Area', 1, (155, 155, 155), (0,0,0)), (2, 132))\n    ypos = 450\n    h = list(history)\n    h.reverse()\n    for line in h:\n        r = win.blit(line, (10, ypos))\n        win.fill(0, (r.right, r.top, 620, r.height))\n        ypos -= Font.get_height()\ndef main():",
        "detail": "pygame-1.9.6.examples.eventlist",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.eventlist",
        "description": "pygame-1.9.6.examples.eventlist",
        "peekOfCode": "def main():\n    init()\n    win = display.set_mode((640, 480), RESIZABLE)\n    display.set_caption(\"Mouse Focus Workout\")\n    global Font\n    Font = font.Font(None, 26)\n    global ImgOnOff\n    ImgOnOff.append(Font.render(\"Off\", 1, (0, 0, 0), (255, 50, 50)))\n    ImgOnOff.append(Font.render(\"On\", 1, (0, 0, 0), (50, 255, 50)))\n    history = []",
        "detail": "pygame-1.9.6.examples.eventlist",
        "documentation": {}
    },
    {
        "label": "ImgOnOff",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.eventlist",
        "description": "pygame-1.9.6.examples.eventlist",
        "peekOfCode": "ImgOnOff = []\nFont = None\nLastKey = None\ndef showtext(win, pos, text, color, bgcolor):\n    textimg = Font.render(text, 1, color, bgcolor)\n    win.blit(textimg, pos)\n    return pos[0] + textimg.get_width() + 5, pos[1]\ndef drawstatus(win):\n    bgcolor = 50, 50, 50\n    win.fill(bgcolor, (0, 0, 640, 120))",
        "detail": "pygame-1.9.6.examples.eventlist",
        "documentation": {}
    },
    {
        "label": "Font",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.eventlist",
        "description": "pygame-1.9.6.examples.eventlist",
        "peekOfCode": "Font = None\nLastKey = None\ndef showtext(win, pos, text, color, bgcolor):\n    textimg = Font.render(text, 1, color, bgcolor)\n    win.blit(textimg, pos)\n    return pos[0] + textimg.get_width() + 5, pos[1]\ndef drawstatus(win):\n    bgcolor = 50, 50, 50\n    win.fill(bgcolor, (0, 0, 640, 120))\n    win.blit(Font.render('Status Area', 1, (155, 155, 155), bgcolor), (2, 2))",
        "detail": "pygame-1.9.6.examples.eventlist",
        "documentation": {}
    },
    {
        "label": "LastKey",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.eventlist",
        "description": "pygame-1.9.6.examples.eventlist",
        "peekOfCode": "LastKey = None\ndef showtext(win, pos, text, color, bgcolor):\n    textimg = Font.render(text, 1, color, bgcolor)\n    win.blit(textimg, pos)\n    return pos[0] + textimg.get_width() + 5, pos[1]\ndef drawstatus(win):\n    bgcolor = 50, 50, 50\n    win.fill(bgcolor, (0, 0, 640, 120))\n    win.blit(Font.render('Status Area', 1, (155, 155, 155), bgcolor), (2, 2))\n    pos = showtext(win, (10, 30), 'Mouse Focus', (255, 255, 255), bgcolor)",
        "detail": "pygame-1.9.6.examples.eventlist",
        "documentation": {}
    },
    {
        "label": "post_them",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.fastevents",
        "description": "pygame-1.9.6.examples.fastevents",
        "peekOfCode": "class post_them(Thread):\n    def __init__(self):\n        Thread.__init__(self)\n        self.done = []\n        self.stop = []\n    def run(self):\n        self.done = []\n        self.stop = []\n        for x in range(NUM_EVENTS_TO_POST):\n            ee = event.Event(USEREVENT)",
        "detail": "pygame-1.9.6.examples.fastevents",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.fastevents",
        "description": "pygame-1.9.6.examples.fastevents",
        "peekOfCode": "def main():\n    init()\n    if use_fast_events:\n        fastevent.init()\n    c = time.Clock()\n    win = display.set_mode((640, 480), RESIZABLE)\n    display.set_caption(\"fastevent Workout\")\n    poster = post_them()\n    t1 = pytime.time()\n    poster.start()",
        "detail": "pygame-1.9.6.examples.fastevents",
        "documentation": {}
    },
    {
        "label": "use_fast_events",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.fastevents",
        "description": "pygame-1.9.6.examples.fastevents",
        "peekOfCode": "use_fast_events = 1\n# use pygame.display.flip().\n#    otherwise we test raw event processing throughput.\nwith_display = 1\n# limit the game loop to 40 fps.\nslow_tick = 0\nNUM_EVENTS_TO_POST = 200000\nif use_fast_events:\n    event_module = fastevent\nelse:",
        "detail": "pygame-1.9.6.examples.fastevents",
        "documentation": {}
    },
    {
        "label": "with_display",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.fastevents",
        "description": "pygame-1.9.6.examples.fastevents",
        "peekOfCode": "with_display = 1\n# limit the game loop to 40 fps.\nslow_tick = 0\nNUM_EVENTS_TO_POST = 200000\nif use_fast_events:\n    event_module = fastevent\nelse:\n    event_module = event\nfrom threading import Thread\nclass post_them(Thread):",
        "detail": "pygame-1.9.6.examples.fastevents",
        "documentation": {}
    },
    {
        "label": "slow_tick",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.fastevents",
        "description": "pygame-1.9.6.examples.fastevents",
        "peekOfCode": "slow_tick = 0\nNUM_EVENTS_TO_POST = 200000\nif use_fast_events:\n    event_module = fastevent\nelse:\n    event_module = event\nfrom threading import Thread\nclass post_them(Thread):\n    def __init__(self):\n        Thread.__init__(self)",
        "detail": "pygame-1.9.6.examples.fastevents",
        "documentation": {}
    },
    {
        "label": "NUM_EVENTS_TO_POST",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.fastevents",
        "description": "pygame-1.9.6.examples.fastevents",
        "peekOfCode": "NUM_EVENTS_TO_POST = 200000\nif use_fast_events:\n    event_module = fastevent\nelse:\n    event_module = event\nfrom threading import Thread\nclass post_them(Thread):\n    def __init__(self):\n        Thread.__init__(self)\n        self.done = []",
        "detail": "pygame-1.9.6.examples.fastevents",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.fonty",
        "description": "pygame-1.9.6.examples.fonty",
        "peekOfCode": "def main():\n    #initialize\n    pygame.init()\n    resolution = 400, 200\n    screen = pygame.display.set_mode(resolution)\n##    pygame.mouse.set_cursor(*pygame.cursors.diamond)\n    fg = 250, 240, 230\n    bg = 5, 5, 5\n    wincolor = 40, 40, 90\n    #fill background",
        "detail": "pygame-1.9.6.examples.fonty",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.freetype_misc",
        "description": "pygame-1.9.6.examples.freetype_misc",
        "peekOfCode": "def run():\n    pygame.init()\n    fontdir = os.path.dirname(os.path.abspath (__file__))\n    font = freetype.Font(os.path.join (fontdir, \"data\", \"sans.ttf\"))\n    screen = pygame.display.set_mode((800, 600))\n    screen.fill (colors[\"grey_light\"])\n    font.underline_adjustment = 0.5\n    font.pad = True\n    font.render_to(screen, (32, 32), \"Hello World\", colors[\"red\"],\n                   colors['grey_dark'], size=64,",
        "detail": "pygame-1.9.6.examples.freetype_misc",
        "documentation": {}
    },
    {
        "label": "colors",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.freetype_misc",
        "description": "pygame-1.9.6.examples.freetype_misc",
        "peekOfCode": "colors = {\n    \"grey_light\"    :   pygame.Color(200, 200, 200),\n    \"grey_dark\"     :   pygame.Color(100, 100, 100),\n    \"green\"         :   pygame.Color(50, 255, 63),\n    \"red\"           :   pygame.Color(220, 30, 30),\n    \"blue\"          :   pygame.Color(50, 75, 245)\n}\ndef run():\n    pygame.init()\n    fontdir = os.path.dirname(os.path.abspath (__file__))",
        "detail": "pygame-1.9.6.examples.freetype_misc",
        "documentation": {}
    },
    {
        "label": "drawcube",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.glcube",
        "description": "pygame-1.9.6.examples.glcube",
        "peekOfCode": "def drawcube():\n    \"draw the cube\"\n    allpoints = list(zip(CUBE_POINTS, CUBE_COLORS))\n    glBegin(GL_QUADS)\n    for face in CUBE_QUAD_VERTS:\n        for vert in face:\n            pos, color = allpoints[vert]\n            glColor3fv(color)\n            glVertex3fv(pos)\n    glEnd()",
        "detail": "pygame-1.9.6.examples.glcube",
        "documentation": {}
    },
    {
        "label": "init_gl_stuff",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.glcube",
        "description": "pygame-1.9.6.examples.glcube",
        "peekOfCode": "def init_gl_stuff():\n    glEnable(GL_DEPTH_TEST)        #use our zbuffer\n    #setup the camera\n    glMatrixMode(GL_PROJECTION)\n    glLoadIdentity()\n    gluPerspective(45.0,640/480.0,0.1,100.0)    #setup lens\n    glTranslatef(0.0, 0.0, -3.0)                #move back\n    glRotatef(25, 1, 0, 0)                       #orbit higher\ndef main():\n    \"run the demo\"",
        "detail": "pygame-1.9.6.examples.glcube",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.glcube",
        "description": "pygame-1.9.6.examples.glcube",
        "peekOfCode": "def main():\n    \"run the demo\"\n    #initialize pygame and setup an opengl display\n    pygame.init()\n    fullscreen = True\n    pygame.display.set_mode((640,480), OPENGL|DOUBLEBUF|FULLSCREEN)\n    init_gl_stuff()\n    going = True\n    while going:\n        #check for quit'n events",
        "detail": "pygame-1.9.6.examples.glcube",
        "documentation": {}
    },
    {
        "label": "CUBE_POINTS",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.glcube",
        "description": "pygame-1.9.6.examples.glcube",
        "peekOfCode": "CUBE_POINTS = (\n    (0.5, -0.5, -0.5),  (0.5, 0.5, -0.5),\n    (-0.5, 0.5, -0.5),  (-0.5, -0.5, -0.5),\n    (0.5, -0.5, 0.5),   (0.5, 0.5, 0.5),\n    (-0.5, -0.5, 0.5),  (-0.5, 0.5, 0.5)\n)\n#colors are 0-1 floating values\nCUBE_COLORS = (\n    (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, 0),\n    (1, 0, 1), (1, 1, 1), (0, 0, 1), (0, 1, 1)",
        "detail": "pygame-1.9.6.examples.glcube",
        "documentation": {}
    },
    {
        "label": "CUBE_COLORS",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.glcube",
        "description": "pygame-1.9.6.examples.glcube",
        "peekOfCode": "CUBE_COLORS = (\n    (1, 0, 0), (1, 1, 0), (0, 1, 0), (0, 0, 0),\n    (1, 0, 1), (1, 1, 1), (0, 0, 1), (0, 1, 1)\n)\nCUBE_QUAD_VERTS = (\n    (0, 1, 2, 3), (3, 2, 7, 6), (6, 7, 5, 4),\n    (4, 5, 1, 0), (1, 5, 7, 2), (4, 0, 3, 6)\n)\nCUBE_EDGES = (\n    (0,1), (0,3), (0,4), (2,1), (2,3), (2,7),",
        "detail": "pygame-1.9.6.examples.glcube",
        "documentation": {}
    },
    {
        "label": "CUBE_QUAD_VERTS",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.glcube",
        "description": "pygame-1.9.6.examples.glcube",
        "peekOfCode": "CUBE_QUAD_VERTS = (\n    (0, 1, 2, 3), (3, 2, 7, 6), (6, 7, 5, 4),\n    (4, 5, 1, 0), (1, 5, 7, 2), (4, 0, 3, 6)\n)\nCUBE_EDGES = (\n    (0,1), (0,3), (0,4), (2,1), (2,3), (2,7),\n    (6,3), (6,4), (6,7), (5,1), (5,4), (5,7),\n)\ndef drawcube():\n    \"draw the cube\"",
        "detail": "pygame-1.9.6.examples.glcube",
        "documentation": {}
    },
    {
        "label": "CUBE_EDGES",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.glcube",
        "description": "pygame-1.9.6.examples.glcube",
        "peekOfCode": "CUBE_EDGES = (\n    (0,1), (0,3), (0,4), (2,1), (2,3), (2,7),\n    (6,3), (6,4), (6,7), (5,1), (5,4), (5,7),\n)\ndef drawcube():\n    \"draw the cube\"\n    allpoints = list(zip(CUBE_POINTS, CUBE_COLORS))\n    glBegin(GL_QUADS)\n    for face in CUBE_QUAD_VERTS:\n        for vert in face:",
        "detail": "pygame-1.9.6.examples.glcube",
        "documentation": {}
    },
    {
        "label": "scaleit",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.headless_no_windows_needed",
        "description": "pygame-1.9.6.examples.headless_no_windows_needed",
        "peekOfCode": "def scaleit(fin, fout, w, h):\n    i = pygame.image.load(fin)\n    if hasattr(pygame.transform, \"smoothscale\"):\n        scaled_image = pygame.transform.smoothscale(i, (w,h))\n    else:\n        scaled_image = pygame.transform.scale(i, (w,h))\n    pygame.image.save(scaled_image, fout)\ndef main(fin, fout, w, h):\n    \"\"\"smoothscale image file named fin as fout with new size (w,h)\"\"\"\n    scaleit(fin, fout, w, h)",
        "detail": "pygame-1.9.6.examples.headless_no_windows_needed",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.headless_no_windows_needed",
        "description": "pygame-1.9.6.examples.headless_no_windows_needed",
        "peekOfCode": "def main(fin, fout, w, h):\n    \"\"\"smoothscale image file named fin as fout with new size (w,h)\"\"\"\n    scaleit(fin, fout, w, h)\nif __name__ == \"__main__\":\n    if \"-scale\" in sys.argv:\n        fin, fout, w, h = sys.argv[2:]\n        w, h = map(int, [w,h])\n        main(fin, fout, w,h)\n    else:\n        print (useage)",
        "detail": "pygame-1.9.6.examples.headless_no_windows_needed",
        "documentation": {}
    },
    {
        "label": "useage",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.headless_no_windows_needed",
        "description": "pygame-1.9.6.examples.headless_no_windows_needed",
        "peekOfCode": "useage = \"\"\"-scale inputimage outputimage new_width new_height\neg.  -scale in.png out.png 50 50\n\"\"\"\nimport os, sys\n# set SDL to use the dummy NULL video driver, \n#   so it doesn't need a windowing system.\nos.environ[\"SDL_VIDEODRIVER\"] = \"dummy\"\nimport pygame.transform\nif 1:\n    #some platforms need to init the display for some parts of pygame.",
        "detail": "pygame-1.9.6.examples.headless_no_windows_needed",
        "documentation": {}
    },
    {
        "label": "os.environ[\"SDL_VIDEODRIVER\"]",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.headless_no_windows_needed",
        "description": "pygame-1.9.6.examples.headless_no_windows_needed",
        "peekOfCode": "os.environ[\"SDL_VIDEODRIVER\"] = \"dummy\"\nimport pygame.transform\nif 1:\n    #some platforms need to init the display for some parts of pygame.\n    import pygame.display\n    pygame.display.init()\n    screen = pygame.display.set_mode((1,1))\ndef scaleit(fin, fout, w, h):\n    i = pygame.image.load(fin)\n    if hasattr(pygame.transform, \"smoothscale\"):",
        "detail": "pygame-1.9.6.examples.headless_no_windows_needed",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.liquid",
        "description": "pygame-1.9.6.examples.liquid",
        "peekOfCode": "def main():\n    #initialize and setup screen\n    pygame.init()\n    screen = pygame.display.set_mode((640, 480), HWSURFACE|DOUBLEBUF)\n    #load image and quadruple\n    imagename = os.path.join(main_dir, 'data', 'liquid.bmp')\n    bitmap = pygame.image.load(imagename)\n    bitmap = pygame.transform.scale2x(bitmap)\n    bitmap = pygame.transform.scale2x(bitmap)\n    #get the image and screen in the same format",
        "detail": "pygame-1.9.6.examples.liquid",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.liquid",
        "description": "pygame-1.9.6.examples.liquid",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]\ndef main():\n    #initialize and setup screen\n    pygame.init()\n    screen = pygame.display.set_mode((640, 480), HWSURFACE|DOUBLEBUF)\n    #load image and quadruple\n    imagename = os.path.join(main_dir, 'data', 'liquid.bmp')\n    bitmap = pygame.image.load(imagename)\n    bitmap = pygame.transform.scale2x(bitmap)\n    bitmap = pygame.transform.scale2x(bitmap)",
        "detail": "pygame-1.9.6.examples.liquid",
        "documentation": {}
    },
    {
        "label": "Sprite",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.mask",
        "description": "pygame-1.9.6.examples.mask",
        "peekOfCode": "class Sprite:\n    def __init__(self, surface, mask = None):\n        self.surface = surface\n        if mask:\n            self.mask = mask\n        else:\n            self.mask = maskFromSurface(self.surface)\n        self.setPos([0,0])\n        self.setVelocity([0,0])\n    def setPos(self,pos):",
        "detail": "pygame-1.9.6.examples.mask",
        "documentation": {}
    },
    {
        "label": "maskFromSurface",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.mask",
        "description": "pygame-1.9.6.examples.mask",
        "peekOfCode": "def maskFromSurface(surface, threshold = 127):\n    #return pygame.mask.from_surface(surface, threshold)\n    mask = pygame.mask.Mask(surface.get_size())\n    key = surface.get_colorkey()\n    if key:\n        for y in range(surface.get_height()):\n            for x in range(surface.get_width()):\n                if surface.get_at((x,y)) != key:\n                    mask.set_at((x,y),1)\n    else:",
        "detail": "pygame-1.9.6.examples.mask",
        "documentation": {}
    },
    {
        "label": "vadd",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.mask",
        "description": "pygame-1.9.6.examples.mask",
        "peekOfCode": "def vadd(x,y):\n    return [x[0]+y[0],x[1]+y[1]]\ndef vsub(x,y):\n    return [x[0]-y[0],x[1]-y[1]]\ndef vdot(x,y):\n    return x[0]*y[0]+x[1]*y[1]\nclass Sprite:\n    def __init__(self, surface, mask = None):\n        self.surface = surface\n        if mask:",
        "detail": "pygame-1.9.6.examples.mask",
        "documentation": {}
    },
    {
        "label": "vsub",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.mask",
        "description": "pygame-1.9.6.examples.mask",
        "peekOfCode": "def vsub(x,y):\n    return [x[0]-y[0],x[1]-y[1]]\ndef vdot(x,y):\n    return x[0]*y[0]+x[1]*y[1]\nclass Sprite:\n    def __init__(self, surface, mask = None):\n        self.surface = surface\n        if mask:\n            self.mask = mask\n        else:",
        "detail": "pygame-1.9.6.examples.mask",
        "documentation": {}
    },
    {
        "label": "vdot",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.mask",
        "description": "pygame-1.9.6.examples.mask",
        "peekOfCode": "def vdot(x,y):\n    return x[0]*y[0]+x[1]*y[1]\nclass Sprite:\n    def __init__(self, surface, mask = None):\n        self.surface = surface\n        if mask:\n            self.mask = mask\n        else:\n            self.mask = maskFromSurface(self.surface)\n        self.setPos([0,0])",
        "detail": "pygame-1.9.6.examples.mask",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.mask",
        "description": "pygame-1.9.6.examples.mask",
        "peekOfCode": "def main(*args):\n    \"\"\"Display multiple images bounce off each other using collition detection\n    Positional arguments:\n      one or more image file names.\n    This pygame.masks demo will display multiple moving sprites bouncing\n    off each other. More than one sprite image can be provided.\n    \"\"\"\n    if len(args) == 0:\n        raise ValueError(\"Require at least one image file name: non given\")\n    print ('Press any key to quit')",
        "detail": "pygame-1.9.6.examples.mask",
        "documentation": {}
    },
    {
        "label": "NullKey",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "class NullKey(object):\n    \"\"\"A dummy key that ignores events passed to it by other keys\n    A NullKey instance is the left key instance used by default\n    for the left most keyboard key.\n    \"\"\"\n    def _right_white_down(self):\n        pass\n    def _right_white_up(self):\n        pass\n    def _right_black_down(self):",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "Keyboard",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "class Keyboard(object):\n    \"\"\"Musical keyboard widget\n    Constructor arguments:\n    start_note: midi note value of the starting note on the keyboard.\n    n_notes: number of notes (keys) on the keyboard.\n    A Keyboard instance draws the musical keyboard and maintains the state of\n    all the keyboard keys. Individual keys can be in a down (depressed) or\n    up (released) state.\n    \"\"\"\n    _image_strip, _rects = key_images()",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "print_device_info",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "def print_device_info():\n    pygame.midi.init()\n    _print_device_info()\n    pygame.midi.quit()\ndef _print_device_info():\n    for i in range( pygame.midi.get_count() ):\n        r = pygame.midi.get_device_info(i)\n        (interf, name, input, output, opened) = r\n        in_out = \"\"\n        if input:",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "input_main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "def input_main(device_id = None):\n    pygame.init()\n    pygame.fastevent.init()\n    event_get = pygame.fastevent.get\n    event_post = pygame.fastevent.post\n    pygame.midi.init()\n    _print_device_info()\n    if device_id is None:\n        input_id = pygame.midi.get_default_input_id()\n    else:",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "output_main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "def output_main(device_id = None):\n    \"\"\"Execute a musical keyboard example for the Church Organ instrument\n    This is a piano keyboard example, with a two octave keyboard, starting at\n    note F3. Left mouse down over a key starts a note, left up stops it. The\n    notes are also mapped to the computer keyboard keys, assuming an American\n    English PC keyboard (sorry everyone else, but I don't know if I can map to\n    absolute key position instead of value.) The white keys are on the second\n    row, TAB to BACKSLASH, starting with note F3. The black keys map to the top\n    row, '1' to BACKSPACE, starting with F#3. 'r' is middle C. Close the\n    window or press ESCAPE to quit the program. Key velocity (note",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "make_key_mapping",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "def make_key_mapping(key_list, start_note):\n    \"\"\"Return a dictionary of (note, velocity) by computer keyboard key code\"\"\"\n    mapping = {}\n    for i in range(len(key_list)):\n        mapping[key_list[i]] = (start_note + i, 127)\n    return mapping\nclass NullKey(object):\n    \"\"\"A dummy key that ignores events passed to it by other keys\n    A NullKey instance is the left key instance used by default\n    for the left most keyboard key.",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "key_class",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "def key_class(updates, image_strip, image_rects, is_white_key=True):\n    \"\"\"Return a keyboard key widget class\n    Arguments:\n    updates - a set into which a key instance adds itself if it needs\n        redrawing.\n    image_strip - The surface containing the images of all key states.\n    image_rects - A list of Rects giving the regions within image_strip that\n        are relevant to this key class.\n    is_white_key (default True) - Set false if this is a black key.\n    This function automates the creation of a key widget class for the",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "key_images",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "def key_images():\n    \"\"\"Return a keyboard keys image strip and a mapping of image locations\n    The return tuple is a surface and a dictionary of rects mapped to key\n    type.\n    This function encapsulates the constants relevant to the keyboard image\n    file. There are five key types. One is the black key. The other four\n    white keys are determined by the proximity of the black keys. The plain\n    white key has no black key adjacent to it. A white-left and white-right\n    key has a black key to the left or right of it respectively. A white-center\n    key has a black key on both sides. A key may have up to six related",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "fill_region",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "def fill_region(regions, note, rect, cutoff):\n    \"\"\"Fill the region defined by rect with a (note, velocity, 0) color\n    The velocity varies from a small value at the top of the region to\n    127 at the bottom. The vertical region 0 to cutoff is split into\n    three parts, with velocities 42, 84 and 127. Everything below cutoff\n    has velocity 127.\n    \"\"\"\n    x, y, width, height = rect\n    if cutoff is None:\n        cutoff = height",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "is_white_key",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "def is_white_key(note):\n    \"\"\"True if note is represented by a white key\"\"\"\n    key_pattern = [True, False, True, True, False, True,\n                   False, True, True, False, True, False]\n    return key_pattern[(note - 21) % len(key_pattern)]\ndef usage():\n    print (\"--input [device_id] : Midi message logger\")\n    print (\"--output [device_id] : Midi piano keyboard\")\n    print (\"--list : list available midi devices\")\ndef main(mode='output', device_id=None):",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "usage",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "def usage():\n    print (\"--input [device_id] : Midi message logger\")\n    print (\"--output [device_id] : Midi piano keyboard\")\n    print (\"--list : list available midi devices\")\ndef main(mode='output', device_id=None):\n    \"\"\"Run a Midi example\n    Arguments:\n    mode - if 'output' run a midi keyboard output example\n              'input' run a midi event logger input example\n              'list' list available midi devices",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "def main(mode='output', device_id=None):\n    \"\"\"Run a Midi example\n    Arguments:\n    mode - if 'output' run a midi keyboard output example\n              'input' run a midi event logger input example\n              'list' list available midi devices\n           (default 'output')\n    device_id - midi device number; if None then use the default midi input or\n                output device for the system\n    \"\"\"",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "null_key",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.midi",
        "description": "pygame-1.9.6.examples.midi",
        "peekOfCode": "null_key = NullKey()\ndef key_class(updates, image_strip, image_rects, is_white_key=True):\n    \"\"\"Return a keyboard key widget class\n    Arguments:\n    updates - a set into which a key instance adds itself if it needs\n        redrawing.\n    image_strip - The surface containing the images of all key states.\n    image_rects - A list of Rects giving the regions within image_strip that\n        are relevant to this key class.\n    is_white_key (default True) - Set false if this is a black key.",
        "detail": "pygame-1.9.6.examples.midi",
        "documentation": {}
    },
    {
        "label": "GameObject",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.moveit",
        "description": "pygame-1.9.6.examples.moveit",
        "peekOfCode": "class GameObject:\n    def __init__(self, image, height, speed):\n        self.speed = speed\n        self.image = image\n        self.pos = image.get_rect().move(0, height)\n    def move(self):\n        self.pos = self.pos.move(self.speed, 0)\n        if self.pos.right > 600:\n            self.pos.left = 0\n#quick function to load an image",
        "detail": "pygame-1.9.6.examples.moveit",
        "documentation": {}
    },
    {
        "label": "load_image",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.moveit",
        "description": "pygame-1.9.6.examples.moveit",
        "peekOfCode": "def load_image(name):\n    path = os.path.join(main_dir, 'data', name)\n    return pygame.image.load(path).convert()\n#here's the full code\ndef main():\n    pygame.init()\n    screen = pygame.display.set_mode((640, 480))\n    player = load_image('player1.gif')\n    background = load_image('liquid.bmp')\n    # scale the background image so that it fills the window and",
        "detail": "pygame-1.9.6.examples.moveit",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.moveit",
        "description": "pygame-1.9.6.examples.moveit",
        "peekOfCode": "def main():\n    pygame.init()\n    screen = pygame.display.set_mode((640, 480))\n    player = load_image('player1.gif')\n    background = load_image('liquid.bmp')\n    # scale the background image so that it fills the window and\n    #   successfully overwrites the old sprite position.\n    background = pygame.transform.scale2x(background)\n    background = pygame.transform.scale2x(background)\n    screen.blit(background, (0, 0))",
        "detail": "pygame-1.9.6.examples.moveit",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.moveit",
        "description": "pygame-1.9.6.examples.moveit",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]\n#our game object class\nclass GameObject:\n    def __init__(self, image, height, speed):\n        self.speed = speed\n        self.image = image\n        self.pos = image.get_rect().move(0, height)\n    def move(self):\n        self.pos = self.pos.move(self.speed, 0)\n        if self.pos.right > 600:",
        "detail": "pygame-1.9.6.examples.moveit",
        "documentation": {}
    },
    {
        "label": "Img",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "class Img: pass # container for images\nmain_dir = os.path.split(os.path.abspath(__file__))[0]  # Program's diretory\n#first, we define some utility functions\ndef load_image(file, transparent):\n    \"loads an image, prepares it for play\"\n    file = os.path.join(main_dir, 'data', file)\n    try:\n        surface = pygame.image.load(file)\n    except pygame.error:\n        raise SystemExit('Could not load image \"%s\" %s' %",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "Actor",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "class Actor:\n    \"An enhanced sort of sprite class\"\n    def __init__(self, image):\n        self.image = image\n        self.rect = image.get_rect()\n    def update(self):\n        \"update the sprite state for this frame\"\n        pass\n    def draw(self, screen):\n        \"draws the sprite into the screen\"",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "class Player(Actor):\n    \"Cheer for our hero\"\n    def __init__(self):\n        Actor.__init__(self, Img.player)\n        self.alive = 1\n        self.reloading = 0\n        self.rect.centerx = SCREENRECT.centerx\n        self.rect.bottom = SCREENRECT.bottom - 10\n    def move(self, direction):\n        self.rect = self.rect.move(direction*PLAYER_SPEED, 0).clamp(SCREENRECT)",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "Alien",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "class Alien(Actor):\n    \"Destroy him or suffer\"\n    def __init__(self):\n        Actor.__init__(self, Img.alien)\n        self.facing = random.choice((-1,1)) * ALIEN_SPEED\n        if self.facing < 0:\n            self.rect.right = SCREENRECT.right\n    def update(self):\n        global SCREENRECT\n        self.rect[0] = self.rect[0] + self.facing",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "Explosion",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "class Explosion(Actor):\n    \"Beware the fury\"\n    def __init__(self, actor):\n        Actor.__init__(self, Img.explosion)\n        self.life = EXPLODE_TIME\n        self.rect.center = actor.rect.center\n    def update(self):\n        self.life = self.life - 1\nclass Shot(Actor):\n    \"The big payload\"",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "Shot",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "class Shot(Actor):\n    \"The big payload\"\n    def __init__(self, player):\n        Actor.__init__(self, Img.shot)\n        self.rect.centerx = player.rect.centerx\n        self.rect.top = player.rect.top - 10\n    def update(self):\n        self.rect.top = self.rect.top - SHOT_SPEED\ndef main():\n    \"Run me for adrenaline\"",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "load_image",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "def load_image(file, transparent):\n    \"loads an image, prepares it for play\"\n    file = os.path.join(main_dir, 'data', file)\n    try:\n        surface = pygame.image.load(file)\n    except pygame.error:\n        raise SystemExit('Could not load image \"%s\" %s' %\n                         (file, pygame.get_error()))\n    if transparent:\n        corner = surface.get_at((0, 0))",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "def main():\n    \"Run me for adrenaline\"\n    global dirtyrects\n    # Initialize SDL components\n    pygame.init()\n    screen = pygame.display.set_mode(SCREENRECT.size, 0)\n    clock = pygame.time.Clock()\n    # Load the Resources\n    Img.background = load_image('background.gif', 0)\n    Img.shot = load_image('shot.gif', 1)",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "FRAMES_PER_SEC",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "FRAMES_PER_SEC = 40\nPLAYER_SPEED   = 12\nMAX_SHOTS      = 2\nSHOT_SPEED     = 10\nALIEN_SPEED    = 12\nALIEN_ODDS     = 45\nEXPLODE_TIME   = 6\nSCREENRECT     = Rect(0, 0, 640, 480)\n#some globals for friendly access\ndirtyrects = [] # list of update_rects",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "dirtyrects",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "dirtyrects = [] # list of update_rects\nnext_tick = 0   # used for timing\nclass Img: pass # container for images\nmain_dir = os.path.split(os.path.abspath(__file__))[0]  # Program's diretory\n#first, we define some utility functions\ndef load_image(file, transparent):\n    \"loads an image, prepares it for play\"\n    file = os.path.join(main_dir, 'data', file)\n    try:\n        surface = pygame.image.load(file)",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "next_tick",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "next_tick = 0   # used for timing\nclass Img: pass # container for images\nmain_dir = os.path.split(os.path.abspath(__file__))[0]  # Program's diretory\n#first, we define some utility functions\ndef load_image(file, transparent):\n    \"loads an image, prepares it for play\"\n    file = os.path.join(main_dir, 'data', file)\n    try:\n        surface = pygame.image.load(file)\n    except pygame.error:",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.oldalien",
        "description": "pygame-1.9.6.examples.oldalien",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]  # Program's diretory\n#first, we define some utility functions\ndef load_image(file, transparent):\n    \"loads an image, prepares it for play\"\n    file = os.path.join(main_dir, 'data', file)\n    try:\n        surface = pygame.image.load(file)\n    except pygame.error:\n        raise SystemExit('Could not load image \"%s\" %s' %\n                         (file, pygame.get_error()))",
        "detail": "pygame-1.9.6.examples.oldalien",
        "documentation": {}
    },
    {
        "label": "vPlayer",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.overlay",
        "description": "pygame-1.9.6.examples.overlay",
        "peekOfCode": "def vPlayer( fName ):\n    global ovl\n    f= open( fName, 'rb' )\n    fmt= f.readline().strip()\n    res= f.readline().strip()\n    col= f.readline().strip()\n    if fmt!= \"P5\":\n        print ('Unknown format( len %d ). Exiting...' % len( fmt ))\n        return\n    w,h= [ int(x) for x in res.split( ' ' ) ]",
        "detail": "pygame-1.9.6.examples.overlay",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.overlay",
        "description": "pygame-1.9.6.examples.overlay",
        "peekOfCode": "def main(fname):\n    \"\"\"play video file fname\"\"\"\n    pygame.init()\n    try:\n        pygame.display.set_mode(SR)\n        vPlayer(fname)\n    finally:\n        pygame.quit()\n# Test all modules\nif __name__== '__main__':",
        "detail": "pygame-1.9.6.examples.overlay",
        "documentation": {}
    },
    {
        "label": "sho",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.pixelarray",
        "description": "pygame-1.9.6.examples.pixelarray",
        "peekOfCode": "def show (image):\n    screen = pygame.display.get_surface()\n    screen.fill ((255, 255, 255))\n    screen.blit (image, (0, 0))\n    pygame.display.flip ()\n    while 1:\n        event = pygame.event.wait ()\n        if event.type == pygame.QUIT:\n            raise SystemExit\n        if event.type == pygame.MOUSEBUTTONDOWN:",
        "detail": "pygame-1.9.6.examples.pixelarray",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.pixelarray",
        "description": "pygame-1.9.6.examples.pixelarray",
        "peekOfCode": "def main():\n    pygame.init ()\n    pygame.display.set_mode ((255, 255))\n    surface = pygame.Surface ((255, 255))\n    pygame.display.flip ()\n    # Create the PixelArray.\n    ar = pygame.PixelArray (surface)\n    r, g, b = 0, 0, 0\n    # Do some easy gradient effect.\n    for y in xrange_ (255):",
        "detail": "pygame-1.9.6.examples.pixelarray",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.pixelarray",
        "description": "pygame-1.9.6.examples.pixelarray",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]\ndata_dir = os.path.join(main_dir, 'data')\ndef show (image):\n    screen = pygame.display.get_surface()\n    screen.fill ((255, 255, 255))\n    screen.blit (image, (0, 0))\n    pygame.display.flip ()\n    while 1:\n        event = pygame.event.wait ()\n        if event.type == pygame.QUIT:",
        "detail": "pygame-1.9.6.examples.pixelarray",
        "documentation": {}
    },
    {
        "label": "data_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.pixelarray",
        "description": "pygame-1.9.6.examples.pixelarray",
        "peekOfCode": "data_dir = os.path.join(main_dir, 'data')\ndef show (image):\n    screen = pygame.display.get_surface()\n    screen.fill ((255, 255, 255))\n    screen.blit (image, (0, 0))\n    pygame.display.flip ()\n    while 1:\n        event = pygame.event.wait ()\n        if event.type == pygame.QUIT:\n            raise SystemExit",
        "detail": "pygame-1.9.6.examples.pixelarray",
        "documentation": {}
    },
    {
        "label": "Window",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.playmus",
        "description": "pygame-1.9.6.examples.playmus",
        "peekOfCode": "class Window(object):\n    \"\"\"The application's Pygame window\n    A Window instance manages the creation of and drawing to a\n    window. It is a singleton class. Only one instance can exist.\n    \"\"\"\n    instance = None\n    def __new__(cls, *args, **kwds):\n        \"\"\"Return an open Pygame window\"\"\"\n        if Window.instance is not None:\n            return Window.instance",
        "detail": "pygame-1.9.6.examples.playmus",
        "documentation": {}
    },
    {
        "label": "show_usage_message",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.playmus",
        "description": "pygame-1.9.6.examples.playmus",
        "peekOfCode": "def show_usage_message():\n    print(\"Usage: python playmus.py <file>\")\n    print(\"       python -m pygame.examples.playmus <file>\")\ndef main(file_path):\n    \"\"\"Play an audio file with pygame.mixer.music\"\"\"\n    with Window(file_path) as win:\n        win.write_lines('Loading ...', -1)\n        pygame.mixer.init(frequency=44100)\n        try:\n            paused = False",
        "detail": "pygame-1.9.6.examples.playmus",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.playmus",
        "description": "pygame-1.9.6.examples.playmus",
        "peekOfCode": "def main(file_path):\n    \"\"\"Play an audio file with pygame.mixer.music\"\"\"\n    with Window(file_path) as win:\n        win.write_lines('Loading ...', -1)\n        pygame.mixer.init(frequency=44100)\n        try:\n            paused = False\n            pygame.mixer.music.load(file_path)\n            # Make sure the event loop ticks over at least every 0.5 seconds.\n            pygame.time.set_timer(USEREVENT, 500)",
        "detail": "pygame-1.9.6.examples.playmus",
        "documentation": {}
    },
    {
        "label": "RESOLUTION",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.prevent_display_stretching",
        "description": "pygame-1.9.6.examples.prevent_display_stretching",
        "peekOfCode": "RESOLUTION = (350, 350)\nscreen = pygame.display.set_mode(RESOLUTION)\n# Render message onto a surface\npygame.font.init()\nfont = pygame.font.Font(None, 36)\nmsg_surf = font.render(msg, 1, pygame.Color('green'))\nres_surf = font.render('Intended resolution: %ix%i' % RESOLUTION, 1, pygame.Color('green'))\n# Control loop\nrunning = True\nclock = pygame.time.Clock()",
        "detail": "pygame-1.9.6.examples.prevent_display_stretching",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.prevent_display_stretching",
        "description": "pygame-1.9.6.examples.prevent_display_stretching",
        "peekOfCode": "screen = pygame.display.set_mode(RESOLUTION)\n# Render message onto a surface\npygame.font.init()\nfont = pygame.font.Font(None, 36)\nmsg_surf = font.render(msg, 1, pygame.Color('green'))\nres_surf = font.render('Intended resolution: %ix%i' % RESOLUTION, 1, pygame.Color('green'))\n# Control loop\nrunning = True\nclock = pygame.time.Clock()\ncounter = 0",
        "detail": "pygame-1.9.6.examples.prevent_display_stretching",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.prevent_display_stretching",
        "description": "pygame-1.9.6.examples.prevent_display_stretching",
        "peekOfCode": "font = pygame.font.Font(None, 36)\nmsg_surf = font.render(msg, 1, pygame.Color('green'))\nres_surf = font.render('Intended resolution: %ix%i' % RESOLUTION, 1, pygame.Color('green'))\n# Control loop\nrunning = True\nclock = pygame.time.Clock()\ncounter = 0\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:",
        "detail": "pygame-1.9.6.examples.prevent_display_stretching",
        "documentation": {}
    },
    {
        "label": "msg_surf",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.prevent_display_stretching",
        "description": "pygame-1.9.6.examples.prevent_display_stretching",
        "peekOfCode": "msg_surf = font.render(msg, 1, pygame.Color('green'))\nres_surf = font.render('Intended resolution: %ix%i' % RESOLUTION, 1, pygame.Color('green'))\n# Control loop\nrunning = True\nclock = pygame.time.Clock()\ncounter = 0\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False",
        "detail": "pygame-1.9.6.examples.prevent_display_stretching",
        "documentation": {}
    },
    {
        "label": "res_surf",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.prevent_display_stretching",
        "description": "pygame-1.9.6.examples.prevent_display_stretching",
        "peekOfCode": "res_surf = font.render('Intended resolution: %ix%i' % RESOLUTION, 1, pygame.Color('green'))\n# Control loop\nrunning = True\nclock = pygame.time.Clock()\ncounter = 0\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    screen.fill(pygame.Color('black'))",
        "detail": "pygame-1.9.6.examples.prevent_display_stretching",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.prevent_display_stretching",
        "description": "pygame-1.9.6.examples.prevent_display_stretching",
        "peekOfCode": "running = True\nclock = pygame.time.Clock()\ncounter = 0\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    screen.fill(pygame.Color('black'))\n    # Draw lines which will be blurry if the window is stretched\n    # or clear if the window is not stretched.",
        "detail": "pygame-1.9.6.examples.prevent_display_stretching",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.prevent_display_stretching",
        "description": "pygame-1.9.6.examples.prevent_display_stretching",
        "peekOfCode": "clock = pygame.time.Clock()\ncounter = 0\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    screen.fill(pygame.Color('black'))\n    # Draw lines which will be blurry if the window is stretched\n    # or clear if the window is not stretched.\n    pygame.draw.line(screen, pygame.Color('white'), (0, counter), (RESOLUTION[0] - 1, counter))",
        "detail": "pygame-1.9.6.examples.prevent_display_stretching",
        "documentation": {}
    },
    {
        "label": "counter",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.prevent_display_stretching",
        "description": "pygame-1.9.6.examples.prevent_display_stretching",
        "peekOfCode": "counter = 0\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n    screen.fill(pygame.Color('black'))\n    # Draw lines which will be blurry if the window is stretched\n    # or clear if the window is not stretched.\n    pygame.draw.line(screen, pygame.Color('white'), (0, counter), (RESOLUTION[0] - 1, counter))\n    pygame.draw.line(screen, pygame.Color('white'), (counter, 0), (counter, RESOLUTION[1] - 1))",
        "detail": "pygame-1.9.6.examples.prevent_display_stretching",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.scaletest",
        "description": "pygame-1.9.6.examples.scaletest",
        "peekOfCode": "def main(imagefile, convert_alpha=False, run_speed_test=False):\n    \"\"\"show an interactive image scaler\n    Args:\n        imagefile - name of source image (required)\n        convert_alpha - use convert_alpha() on the surf (default False)\n        run_speed_test - (default False)\n    \"\"\"\n    # initialize display\n    pygame.display.init()\n    # load background image",
        "detail": "pygame-1.9.6.examples.scaletest",
        "documentation": {}
    },
    {
        "label": "SpeedTest",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.scaletest",
        "description": "pygame-1.9.6.examples.scaletest",
        "peekOfCode": "def SpeedTest(image):\n    print(\"\\nImage Scaling Speed Test - Image Size %s\\n\" % str(\n          image.get_size()))\n    imgsize = [image.get_width(), image.get_height()]\n    duration = 0.0\n    for i in range(128):\n        shrinkx = (imgsize[0] * i) // 128\n        shrinky = (imgsize[1] * i) // 128\n        start = time.time()\n        tempimg = pygame.transform.smoothscale(image, (shrinkx, shrinky))",
        "detail": "pygame-1.9.6.examples.scaletest",
        "documentation": {}
    },
    {
        "label": "usag",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.scrap_clipboard",
        "description": "pygame-1.9.6.examples.scrap_clipboard",
        "peekOfCode": "def usage ():\n    print (\"Press the 'g' key to get all of the current clipboard data\")\n    print (\"Press the 'p' key to put a string into the clipboard\")\n    print (\"Press the 'a' key to get a list of the currently available types\")\n    print (\"Press the 'i' key to put an image into the clipboard\")\nmain_dir = os.path.split(os.path.abspath(__file__))[0]\npygame.init ()\nscreen = pygame.display.set_mode ((200, 200))\nc = pygame.time.Clock ()\ngoing = True",
        "detail": "pygame-1.9.6.examples.scrap_clipboard",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.scrap_clipboard",
        "description": "pygame-1.9.6.examples.scrap_clipboard",
        "peekOfCode": "BytesIO = pygame.compat.get_BytesIO()\ndef usage ():\n    print (\"Press the 'g' key to get all of the current clipboard data\")\n    print (\"Press the 'p' key to put a string into the clipboard\")\n    print (\"Press the 'a' key to get a list of the currently available types\")\n    print (\"Press the 'i' key to put an image into the clipboard\")\nmain_dir = os.path.split(os.path.abspath(__file__))[0]\npygame.init ()\nscreen = pygame.display.set_mode ((200, 200))\nc = pygame.time.Clock ()",
        "detail": "pygame-1.9.6.examples.scrap_clipboard",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.scrap_clipboard",
        "description": "pygame-1.9.6.examples.scrap_clipboard",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]\npygame.init ()\nscreen = pygame.display.set_mode ((200, 200))\nc = pygame.time.Clock ()\ngoing = True\n# Initialize the scrap module and use the clipboard mode.\nscrap.init ()\nscrap.set_mode (SCRAP_CLIPBOARD)\nusage ()\nwhile going:",
        "detail": "pygame-1.9.6.examples.scrap_clipboard",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.scrap_clipboard",
        "description": "pygame-1.9.6.examples.scrap_clipboard",
        "peekOfCode": "screen = pygame.display.set_mode ((200, 200))\nc = pygame.time.Clock ()\ngoing = True\n# Initialize the scrap module and use the clipboard mode.\nscrap.init ()\nscrap.set_mode (SCRAP_CLIPBOARD)\nusage ()\nwhile going:\n    for e in pygame.event.get ():\n        if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE):",
        "detail": "pygame-1.9.6.examples.scrap_clipboard",
        "documentation": {}
    },
    {
        "label": "c",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.scrap_clipboard",
        "description": "pygame-1.9.6.examples.scrap_clipboard",
        "peekOfCode": "c = pygame.time.Clock ()\ngoing = True\n# Initialize the scrap module and use the clipboard mode.\nscrap.init ()\nscrap.set_mode (SCRAP_CLIPBOARD)\nusage ()\nwhile going:\n    for e in pygame.event.get ():\n        if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE):\n            going = False",
        "detail": "pygame-1.9.6.examples.scrap_clipboard",
        "documentation": {}
    },
    {
        "label": "going",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.scrap_clipboard",
        "description": "pygame-1.9.6.examples.scrap_clipboard",
        "peekOfCode": "going = True\n# Initialize the scrap module and use the clipboard mode.\nscrap.init ()\nscrap.set_mode (SCRAP_CLIPBOARD)\nusage ()\nwhile going:\n    for e in pygame.event.get ():\n        if e.type == QUIT or (e.type == KEYDOWN and e.key == K_ESCAPE):\n            going = False\n        elif e.type == KEYDOWN and e.key == K_g:",
        "detail": "pygame-1.9.6.examples.scrap_clipboard",
        "documentation": {}
    },
    {
        "label": "draw_arrow",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.scroll",
        "description": "pygame-1.9.6.examples.scroll",
        "peekOfCode": "def draw_arrow(surf, color, posn, direction):\n    x, y = posn\n    if direction == DIR_UP:\n        pointlist = ((x - 29, y + 30), (x + 30, y + 30),\n                     (x + 1, y - 29), (x, y - 29))\n    elif direction == DIR_DOWN:\n        pointlist = ((x - 29, y - 29), (x + 30, y - 29),\n                     (x + 1, y + 30), (x, y + 30))\n    elif direction == DIR_LEFT:\n        pointlist = ((x + 30, y - 29), (x + 30, y + 30),",
        "detail": "pygame-1.9.6.examples.scroll",
        "documentation": {}
    },
    {
        "label": "add_arrow_button",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.scroll",
        "description": "pygame-1.9.6.examples.scroll",
        "peekOfCode": "def add_arrow_button(screen, regions, posn, direction):\n    draw_arrow(screen, Color('black'), posn, direction)\n    draw_arrow(regions, (direction, 0, 0), posn, direction)\ndef scroll_view(screen, image, direction, view_rect):\n    dx = dy = 0\n    src_rect = None\n    zoom_view_rect = screen.get_clip()\n    image_w, image_h = image.get_size()\n    if direction == DIR_UP:\n        if view_rect.top > 0:",
        "detail": "pygame-1.9.6.examples.scroll",
        "documentation": {}
    },
    {
        "label": "scroll_view",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.scroll",
        "description": "pygame-1.9.6.examples.scroll",
        "peekOfCode": "def scroll_view(screen, image, direction, view_rect):\n    dx = dy = 0\n    src_rect = None\n    zoom_view_rect = screen.get_clip()\n    image_w, image_h = image.get_size()\n    if direction == DIR_UP:\n        if view_rect.top > 0:\n            screen.scroll(dy=zoom_factor)\n            view_rect.move_ip(0, -1)\n            src_rect = view_rect.copy()",
        "detail": "pygame-1.9.6.examples.scroll",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.scroll",
        "description": "pygame-1.9.6.examples.scroll",
        "peekOfCode": "def main(image_file=None):\n    if image_file is None:\n        image_file = os.path.join(main_dir, 'data', 'arraydemo.bmp')\n    margin = 80\n    view_size = (30, 20)\n    zoom_view_size = (view_size[0] * zoom_factor,\n                      view_size[1] * zoom_factor)\n    win_size = (zoom_view_size[0] + 2 * margin,\n                zoom_view_size[1] + 2 * margin)\n    background_color = Color('beige')",
        "detail": "pygame-1.9.6.examples.scroll",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.scroll",
        "description": "pygame-1.9.6.examples.scroll",
        "peekOfCode": "main_dir = os.path.dirname(os.path.abspath(__file__))\nDIR_UP = 1\nDIR_DOWN = 2\nDIR_LEFT = 3\nDIR_RIGHT = 4\nzoom_factor = 8\ndef draw_arrow(surf, color, posn, direction):\n    x, y = posn\n    if direction == DIR_UP:\n        pointlist = ((x - 29, y + 30), (x + 30, y + 30),",
        "detail": "pygame-1.9.6.examples.scroll",
        "documentation": {}
    },
    {
        "label": "DIR_UP",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.scroll",
        "description": "pygame-1.9.6.examples.scroll",
        "peekOfCode": "DIR_UP = 1\nDIR_DOWN = 2\nDIR_LEFT = 3\nDIR_RIGHT = 4\nzoom_factor = 8\ndef draw_arrow(surf, color, posn, direction):\n    x, y = posn\n    if direction == DIR_UP:\n        pointlist = ((x - 29, y + 30), (x + 30, y + 30),\n                     (x + 1, y - 29), (x, y - 29))",
        "detail": "pygame-1.9.6.examples.scroll",
        "documentation": {}
    },
    {
        "label": "DIR_DOWN",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.scroll",
        "description": "pygame-1.9.6.examples.scroll",
        "peekOfCode": "DIR_DOWN = 2\nDIR_LEFT = 3\nDIR_RIGHT = 4\nzoom_factor = 8\ndef draw_arrow(surf, color, posn, direction):\n    x, y = posn\n    if direction == DIR_UP:\n        pointlist = ((x - 29, y + 30), (x + 30, y + 30),\n                     (x + 1, y - 29), (x, y - 29))\n    elif direction == DIR_DOWN:",
        "detail": "pygame-1.9.6.examples.scroll",
        "documentation": {}
    },
    {
        "label": "DIR_LEFT",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.scroll",
        "description": "pygame-1.9.6.examples.scroll",
        "peekOfCode": "DIR_LEFT = 3\nDIR_RIGHT = 4\nzoom_factor = 8\ndef draw_arrow(surf, color, posn, direction):\n    x, y = posn\n    if direction == DIR_UP:\n        pointlist = ((x - 29, y + 30), (x + 30, y + 30),\n                     (x + 1, y - 29), (x, y - 29))\n    elif direction == DIR_DOWN:\n        pointlist = ((x - 29, y - 29), (x + 30, y - 29),",
        "detail": "pygame-1.9.6.examples.scroll",
        "documentation": {}
    },
    {
        "label": "DIR_RIGHT",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.scroll",
        "description": "pygame-1.9.6.examples.scroll",
        "peekOfCode": "DIR_RIGHT = 4\nzoom_factor = 8\ndef draw_arrow(surf, color, posn, direction):\n    x, y = posn\n    if direction == DIR_UP:\n        pointlist = ((x - 29, y + 30), (x + 30, y + 30),\n                     (x + 1, y - 29), (x, y - 29))\n    elif direction == DIR_DOWN:\n        pointlist = ((x - 29, y - 29), (x + 30, y - 29),\n                     (x + 1, y + 30), (x, y + 30))",
        "detail": "pygame-1.9.6.examples.scroll",
        "documentation": {}
    },
    {
        "label": "zoom_factor",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.scroll",
        "description": "pygame-1.9.6.examples.scroll",
        "peekOfCode": "zoom_factor = 8\ndef draw_arrow(surf, color, posn, direction):\n    x, y = posn\n    if direction == DIR_UP:\n        pointlist = ((x - 29, y + 30), (x + 30, y + 30),\n                     (x + 1, y - 29), (x, y - 29))\n    elif direction == DIR_DOWN:\n        pointlist = ((x - 29, y - 29), (x + 30, y - 29),\n                     (x + 1, y + 30), (x, y + 30))\n    elif direction == DIR_LEFT:",
        "detail": "pygame-1.9.6.examples.scroll",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.sound",
        "description": "pygame-1.9.6.examples.sound",
        "peekOfCode": "def main(file_path=None):\n    \"\"\"Play an audio file as a buffered sound sample\n    Option argument:\n        the name of an audio file (default data/secosmic_low.wav\n    \"\"\"\n    if file_path is None:\n        file_path = os.path.join(main_dir,\n                                 'data',\n                                 'secosmic_lo.wav')\n    #choose a desired audio format",
        "detail": "pygame-1.9.6.examples.sound",
        "documentation": {}
    },
    {
        "label": "mixer",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.sound",
        "description": "pygame-1.9.6.examples.sound",
        "peekOfCode": "mixer = pygame.mixer\ntime = pygame.time\nmain_dir = os.path.split(os.path.abspath(__file__))[0]\ndef main(file_path=None):\n    \"\"\"Play an audio file as a buffered sound sample\n    Option argument:\n        the name of an audio file (default data/secosmic_low.wav\n    \"\"\"\n    if file_path is None:\n        file_path = os.path.join(main_dir,",
        "detail": "pygame-1.9.6.examples.sound",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.sound",
        "description": "pygame-1.9.6.examples.sound",
        "peekOfCode": "time = pygame.time\nmain_dir = os.path.split(os.path.abspath(__file__))[0]\ndef main(file_path=None):\n    \"\"\"Play an audio file as a buffered sound sample\n    Option argument:\n        the name of an audio file (default data/secosmic_low.wav\n    \"\"\"\n    if file_path is None:\n        file_path = os.path.join(main_dir,\n                                 'data',",
        "detail": "pygame-1.9.6.examples.sound",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.sound",
        "description": "pygame-1.9.6.examples.sound",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]\ndef main(file_path=None):\n    \"\"\"Play an audio file as a buffered sound sample\n    Option argument:\n        the name of an audio file (default data/secosmic_low.wav\n    \"\"\"\n    if file_path is None:\n        file_path = os.path.join(main_dir,\n                                 'data',\n                                 'secosmic_lo.wav')",
        "detail": "pygame-1.9.6.examples.sound",
        "documentation": {}
    },
    {
        "label": "make_echo",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.sound_array_demos",
        "description": "pygame-1.9.6.examples.sound_array_demos",
        "peekOfCode": "def make_echo(sound, samples_per_second,  mydebug = True):\n    \"\"\" returns a sound which is echoed of the last one.\n    \"\"\"\n    echo_length = 3.5\n    a1 = sndarray.array(sound)\n    if mydebug:\n        print ('SHAPE1: %s' % (a1.shape,))\n    length = a1.shape[0]\n    #myarr = zeros(length+12000)\n    myarr = zeros(a1.shape, int32)",
        "detail": "pygame-1.9.6.examples.sound_array_demos",
        "documentation": {}
    },
    {
        "label": "slow_down_sound",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.sound_array_demos",
        "description": "pygame-1.9.6.examples.sound_array_demos",
        "peekOfCode": "def slow_down_sound(sound, rate):\n    \"\"\"  returns a sound which is a slowed down version of the original.\n           rate - at which the sound should be slowed down.  eg. 0.5 would be half speed.\n    \"\"\"\n    raise NotImplementedError()\n    grow_rate = 1 / rate\n    # make it 1/rate times longer.\n    a1 = sndarray.array(sound)\n    surf = pygame.surfarray.make_surface(a1)\n    print (a1.shape[0] * grow_rate)",
        "detail": "pygame-1.9.6.examples.sound_array_demos",
        "documentation": {}
    },
    {
        "label": "sound_from_pos",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.sound_array_demos",
        "description": "pygame-1.9.6.examples.sound_array_demos",
        "peekOfCode": "def sound_from_pos(sound, start_pos, samples_per_second = None, inplace = 1):\n    \"\"\"  returns a sound which begins at the start_pos.\n         start_pos - in seconds from the begining.\n         samples_per_second - \n    \"\"\"\n    # see if we want to reuse the sound data or not.\n    if inplace:\n        a1 = pygame.sndarray.samples(sound)\n    else:\n        a1 = pygame.sndarray.array(sound)",
        "detail": "pygame-1.9.6.examples.sound_array_demos",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.sound_array_demos",
        "description": "pygame-1.9.6.examples.sound_array_demos",
        "peekOfCode": "def main(arraytype=None):\n    \"\"\"play various sndarray effects\n    If arraytype is provided then use that array package. Valid\n    values are 'numeric' or 'numpy'. Otherwise default to NumPy,\n    or fall back on Numeric if NumPy is not installed.\n    \"\"\"\n    main_dir = os.path.split(os.path.abspath(__file__))[0]\n    if arraytype not in ('numpy', None):\n        raise ValueError('Array type not supported: %r' % arraytype)\n    print (\"Using %s array package\" % sndarray.get_arraytype())",
        "detail": "pygame-1.9.6.examples.sound_array_demos",
        "documentation": {}
    },
    {
        "label": "__author__",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.sound_array_demos",
        "description": "pygame-1.9.6.examples.sound_array_demos",
        "peekOfCode": "__author__ = \"Pete 'ShredWheat' Shinners, Rene Dudfield\"\n__copyright__ = \"Copyright (C) 2004 Pete Shinners, Copyright (C) 2005 Rene Dudfield\"\n__license__ = \"Public Domain\"\n__version__ = \"2.0\"\nimport os.path\nimport pygame.mixer, pygame.time, pygame.sndarray, pygame\nimport pygame.surfarray, pygame.transform\nfrom pygame import sndarray, mixer\nfrom numpy import zeros, int32, int16\nimport time",
        "detail": "pygame-1.9.6.examples.sound_array_demos",
        "documentation": {}
    },
    {
        "label": "__copyright__",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.sound_array_demos",
        "description": "pygame-1.9.6.examples.sound_array_demos",
        "peekOfCode": "__copyright__ = \"Copyright (C) 2004 Pete Shinners, Copyright (C) 2005 Rene Dudfield\"\n__license__ = \"Public Domain\"\n__version__ = \"2.0\"\nimport os.path\nimport pygame.mixer, pygame.time, pygame.sndarray, pygame\nimport pygame.surfarray, pygame.transform\nfrom pygame import sndarray, mixer\nfrom numpy import zeros, int32, int16\nimport time\n#mixer.init(44100, -16, 0)",
        "detail": "pygame-1.9.6.examples.sound_array_demos",
        "documentation": {}
    },
    {
        "label": "__license__",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.sound_array_demos",
        "description": "pygame-1.9.6.examples.sound_array_demos",
        "peekOfCode": "__license__ = \"Public Domain\"\n__version__ = \"2.0\"\nimport os.path\nimport pygame.mixer, pygame.time, pygame.sndarray, pygame\nimport pygame.surfarray, pygame.transform\nfrom pygame import sndarray, mixer\nfrom numpy import zeros, int32, int16\nimport time\n#mixer.init(44100, -16, 0)\nmixer.init()",
        "detail": "pygame-1.9.6.examples.sound_array_demos",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.sound_array_demos",
        "description": "pygame-1.9.6.examples.sound_array_demos",
        "peekOfCode": "__version__ = \"2.0\"\nimport os.path\nimport pygame.mixer, pygame.time, pygame.sndarray, pygame\nimport pygame.surfarray, pygame.transform\nfrom pygame import sndarray, mixer\nfrom numpy import zeros, int32, int16\nimport time\n#mixer.init(44100, -16, 0)\nmixer.init()\n#mixer.init(11025, -16, 0)",
        "detail": "pygame-1.9.6.examples.sound_array_demos",
        "documentation": {}
    },
    {
        "label": "init_star",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.stars",
        "description": "pygame-1.9.6.examples.stars",
        "peekOfCode": "def init_star():\n    \"creates new star values\"\n    dir = random.randrange(100000)\n    velmult = random.random()*.6+.4\n    vel = [math.sin(dir) * velmult, math.cos(dir) * velmult]\n    return vel, WINCENTER[:]\ndef initialize_stars():\n    \"creates a new starfield\"\n    stars = []\n    for x in range(NUMSTARS):",
        "detail": "pygame-1.9.6.examples.stars",
        "documentation": {}
    },
    {
        "label": "initialize_stars",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.stars",
        "description": "pygame-1.9.6.examples.stars",
        "peekOfCode": "def initialize_stars():\n    \"creates a new starfield\"\n    stars = []\n    for x in range(NUMSTARS):\n        star = init_star()\n        vel, pos = star\n        steps = random.randint(0, WINCENTER[0])\n        pos[0] = pos[0] + (vel[0] * steps)\n        pos[1] = pos[1] + (vel[1] * steps)\n        vel[0] = vel[0] * (steps * .09)",
        "detail": "pygame-1.9.6.examples.stars",
        "documentation": {}
    },
    {
        "label": "draw_stars",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.stars",
        "description": "pygame-1.9.6.examples.stars",
        "peekOfCode": "def draw_stars(surface, stars, color):\n    \"used to draw (and clear) the stars\"\n    for vel, pos in stars:\n        pos = (int(pos[0]), int(pos[1]))\n        surface.set_at(pos, color)\ndef move_stars(stars):\n    \"animate the star values\"\n    for vel, pos in stars:\n        pos[0] = pos[0] + vel[0]\n        pos[1] = pos[1] + vel[1]",
        "detail": "pygame-1.9.6.examples.stars",
        "documentation": {}
    },
    {
        "label": "move_stars",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.stars",
        "description": "pygame-1.9.6.examples.stars",
        "peekOfCode": "def move_stars(stars):\n    \"animate the star values\"\n    for vel, pos in stars:\n        pos[0] = pos[0] + vel[0]\n        pos[1] = pos[1] + vel[1]\n        if not 0 <= pos[0] <= WINSIZE[0] or not 0 <= pos[1] <= WINSIZE[1]:\n            vel[:], pos[:] = init_star()\n        else:\n            vel[0] = vel[0] * 1.05\n            vel[1] = vel[1] * 1.05",
        "detail": "pygame-1.9.6.examples.stars",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.stars",
        "description": "pygame-1.9.6.examples.stars",
        "peekOfCode": "def main():\n    \"This is the starfield code\"\n    #create our starfield\n    random.seed()\n    stars = initialize_stars()\n    clock = pygame.time.Clock()\n    #initialize and prepare screen\n    pygame.init()\n    screen = pygame.display.set_mode(WINSIZE)\n    pygame.display.set_caption('pygame Stars Example')",
        "detail": "pygame-1.9.6.examples.stars",
        "documentation": {}
    },
    {
        "label": "WINSIZE",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.stars",
        "description": "pygame-1.9.6.examples.stars",
        "peekOfCode": "WINSIZE = [640, 480]\nWINCENTER = [320, 240]\nNUMSTARS = 150\ndef init_star():\n    \"creates new star values\"\n    dir = random.randrange(100000)\n    velmult = random.random()*.6+.4\n    vel = [math.sin(dir) * velmult, math.cos(dir) * velmult]\n    return vel, WINCENTER[:]\ndef initialize_stars():",
        "detail": "pygame-1.9.6.examples.stars",
        "documentation": {}
    },
    {
        "label": "WINCENTER",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.stars",
        "description": "pygame-1.9.6.examples.stars",
        "peekOfCode": "WINCENTER = [320, 240]\nNUMSTARS = 150\ndef init_star():\n    \"creates new star values\"\n    dir = random.randrange(100000)\n    velmult = random.random()*.6+.4\n    vel = [math.sin(dir) * velmult, math.cos(dir) * velmult]\n    return vel, WINCENTER[:]\ndef initialize_stars():\n    \"creates a new starfield\"",
        "detail": "pygame-1.9.6.examples.stars",
        "documentation": {}
    },
    {
        "label": "NUMSTARS",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.stars",
        "description": "pygame-1.9.6.examples.stars",
        "peekOfCode": "NUMSTARS = 150\ndef init_star():\n    \"creates new star values\"\n    dir = random.randrange(100000)\n    velmult = random.random()*.6+.4\n    vel = [math.sin(dir) * velmult, math.cos(dir) * velmult]\n    return vel, WINCENTER[:]\ndef initialize_stars():\n    \"creates a new starfield\"\n    stars = []",
        "detail": "pygame-1.9.6.examples.stars",
        "documentation": {}
    },
    {
        "label": "Thingy",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.testsprite",
        "description": "pygame-1.9.6.examples.testsprite",
        "peekOfCode": "class Thingy(FRG.DirtySprite):\n    images = None\n    def __init__(self):\n##        pygame.sprite.Sprite.__init__(self)\n        FRG.DirtySprite.__init__(self)\n        self.image = Thingy.images[0]\n        self.rect = self.image.get_rect()\n        self.rect.x = randint(0, screen_dims[0])\n        self.rect.y = randint(0, screen_dims[1])\n        #self.vel = [randint(-10, 10), randint(-10, 10)]",
        "detail": "pygame-1.9.6.examples.testsprite",
        "documentation": {}
    },
    {
        "label": "Static",
        "kind": 6,
        "importPath": "pygame-1.9.6.examples.testsprite",
        "description": "pygame-1.9.6.examples.testsprite",
        "peekOfCode": "class Static(FRG.DirtySprite):\n    images = None\n    def __init__(self):\n        FRG.DirtySprite.__init__(self)\n        self.image = Static.images[0]\n        self.rect = self.image.get_rect()\n        self.rect.x = randint(0, 3*screen_dims[0]/4)\n        self.rect.y = randint(0, 3*screen_dims[1]/4)\ndef main(update_rects = True, \n        use_static = False,",
        "detail": "pygame-1.9.6.examples.testsprite",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.testsprite",
        "description": "pygame-1.9.6.examples.testsprite",
        "peekOfCode": "def main(update_rects = True, \n        use_static = False,\n        use_FastRenderGroup = False,\n        screen_dims = [640, 480],\n        use_alpha = False,\n        flags = 0,\n        ):\n    \"\"\"Show lots of sprites moving around\n    Optional keyword arguments:\n    update_rects - use the RenderUpdate sprite group class (default True)",
        "detail": "pygame-1.9.6.examples.testsprite",
        "documentation": {}
    },
    {
        "label": "main_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.testsprite",
        "description": "pygame-1.9.6.examples.testsprite",
        "peekOfCode": "main_dir = os.path.split(os.path.abspath(__file__))[0]\ndata_dir = os.path.join(main_dir, 'data')\n# use this to use update rects or not.\n#  If the screen is mostly full, then update rects are not useful.\nupdate_rects = True\nif \"-update_rects\" in sys.argv:\n    update_rects = True\nif \"-noupdate_rects\" in sys.argv:\n    update_rects = False\nuse_static = False",
        "detail": "pygame-1.9.6.examples.testsprite",
        "documentation": {}
    },
    {
        "label": "data_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.testsprite",
        "description": "pygame-1.9.6.examples.testsprite",
        "peekOfCode": "data_dir = os.path.join(main_dir, 'data')\n# use this to use update rects or not.\n#  If the screen is mostly full, then update rects are not useful.\nupdate_rects = True\nif \"-update_rects\" in sys.argv:\n    update_rects = True\nif \"-noupdate_rects\" in sys.argv:\n    update_rects = False\nuse_static = False\nif \"-static\" in sys.argv:",
        "detail": "pygame-1.9.6.examples.testsprite",
        "documentation": {}
    },
    {
        "label": "update_rects",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.testsprite",
        "description": "pygame-1.9.6.examples.testsprite",
        "peekOfCode": "update_rects = True\nif \"-update_rects\" in sys.argv:\n    update_rects = True\nif \"-noupdate_rects\" in sys.argv:\n    update_rects = False\nuse_static = False\nif \"-static\" in sys.argv:\n    use_static = True\nuse_FastRenderGroup = False\nif \"-FastRenderGroup\" in sys.argv:",
        "detail": "pygame-1.9.6.examples.testsprite",
        "documentation": {}
    },
    {
        "label": "use_static",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.testsprite",
        "description": "pygame-1.9.6.examples.testsprite",
        "peekOfCode": "use_static = False\nif \"-static\" in sys.argv:\n    use_static = True\nuse_FastRenderGroup = False\nif \"-FastRenderGroup\" in sys.argv:\n    update_rects = True\n    use_FastRenderGroup = True\nflags = 0\nif \"-flip\" in sys.argv:\n    flags ^= DOUBLEBUF",
        "detail": "pygame-1.9.6.examples.testsprite",
        "documentation": {}
    },
    {
        "label": "use_FastRenderGroup",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.testsprite",
        "description": "pygame-1.9.6.examples.testsprite",
        "peekOfCode": "use_FastRenderGroup = False\nif \"-FastRenderGroup\" in sys.argv:\n    update_rects = True\n    use_FastRenderGroup = True\nflags = 0\nif \"-flip\" in sys.argv:\n    flags ^= DOUBLEBUF\nif \"-fullscreen\" in sys.argv:\n    flags ^= FULLSCREEN\nif \"-sw\" in sys.argv:",
        "detail": "pygame-1.9.6.examples.testsprite",
        "documentation": {}
    },
    {
        "label": "flags",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.testsprite",
        "description": "pygame-1.9.6.examples.testsprite",
        "peekOfCode": "flags = 0\nif \"-flip\" in sys.argv:\n    flags ^= DOUBLEBUF\nif \"-fullscreen\" in sys.argv:\n    flags ^= FULLSCREEN\nif \"-sw\" in sys.argv:\n    flags ^= SWSURFACE\nuse_rle = True\nif \"-hw\" in sys.argv:\n    flags ^= HWSURFACE",
        "detail": "pygame-1.9.6.examples.testsprite",
        "documentation": {}
    },
    {
        "label": "use_rle",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.testsprite",
        "description": "pygame-1.9.6.examples.testsprite",
        "peekOfCode": "use_rle = True\nif \"-hw\" in sys.argv:\n    flags ^= HWSURFACE\n    use_rle = False\nscreen_dims = [640, 480]\nif \"-height\" in sys.argv:\n    i = sys.argv.index(\"-height\")\n    screen_dims[1] = int(sys.argv[i+1])\nif \"-width\" in sys.argv:\n    i = sys.argv.index(\"-width\")",
        "detail": "pygame-1.9.6.examples.testsprite",
        "documentation": {}
    },
    {
        "label": "screen_dims",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.testsprite",
        "description": "pygame-1.9.6.examples.testsprite",
        "peekOfCode": "screen_dims = [640, 480]\nif \"-height\" in sys.argv:\n    i = sys.argv.index(\"-height\")\n    screen_dims[1] = int(sys.argv[i+1])\nif \"-width\" in sys.argv:\n    i = sys.argv.index(\"-width\")\n    screen_dims[0] = int(sys.argv[i+1])\nif \"-alpha\" in sys.argv:\n    use_alpha = True\nelse:",
        "detail": "pygame-1.9.6.examples.testsprite",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "def main():\n    global BGCOLOR, PRINT_EVENT, CHATBOX_POS, CHATLIST_POS, CHATLIST_MAXSIZE\n    global FPSClock , Font, Screen\n    \"\"\"\n    https://wiki.libsdl.org/SDL_HINT_IME_INTERNAL_EDITING\n    https://wiki.libsdl.org/Tutorials/TextInput\n    Candidate list not showing due to SDL2 problem ;w;\n    \"\"\"\n    pygame.key.start_text_input()\n    input_rect = pygame.Rect(80,80,320,40)",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "PRINT_EVENT",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "PRINT_EVENT = False\n# frames per second, the general speed of the program\nFPS = 50\n# size of window\nWINDOWWIDTH, WINDOWHEIGHT = 640, 480 \nBGCOLOR = (0, 0, 0)\n# position of chatlist and chatbox\nCHATLIST_POS = pygame.Rect(0, 20, WINDOWWIDTH, 400)\nCHATBOX_POS = pygame.Rect(0, 440, WINDOWWIDTH, 40)\nCHATLIST_MAXSIZE = 20",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "FPS",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "FPS = 50\n# size of window\nWINDOWWIDTH, WINDOWHEIGHT = 640, 480 \nBGCOLOR = (0, 0, 0)\n# position of chatlist and chatbox\nCHATLIST_POS = pygame.Rect(0, 20, WINDOWWIDTH, 400)\nCHATBOX_POS = pygame.Rect(0, 440, WINDOWWIDTH, 40)\nCHATLIST_MAXSIZE = 20\nTEXTCOLOR = (0,255,0)\n#Add fontname for each language, otherwise some text can't be correctly displayed.",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "BGCOLOR",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "BGCOLOR = (0, 0, 0)\n# position of chatlist and chatbox\nCHATLIST_POS = pygame.Rect(0, 20, WINDOWWIDTH, 400)\nCHATBOX_POS = pygame.Rect(0, 440, WINDOWWIDTH, 40)\nCHATLIST_MAXSIZE = 20\nTEXTCOLOR = (0,255,0)\n#Add fontname for each language, otherwise some text can't be correctly displayed.\nFONTNAMES = [\"notosanscjktcregular\", \"notosansmonocjktcregular\" ,\n            \"notosansregular,\", \n            \"microsoftjhengheimicrosoftjhengheiuilight\",",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "CHATLIST_POS",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "CHATLIST_POS = pygame.Rect(0, 20, WINDOWWIDTH, 400)\nCHATBOX_POS = pygame.Rect(0, 440, WINDOWWIDTH, 40)\nCHATLIST_MAXSIZE = 20\nTEXTCOLOR = (0,255,0)\n#Add fontname for each language, otherwise some text can't be correctly displayed.\nFONTNAMES = [\"notosanscjktcregular\", \"notosansmonocjktcregular\" ,\n            \"notosansregular,\", \n            \"microsoftjhengheimicrosoftjhengheiuilight\",\n            \"microsoftyaheimicrosoftyaheiuilight\",\n            \"msgothicmsuigothicmspgothic\",",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "CHATBOX_POS",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "CHATBOX_POS = pygame.Rect(0, 440, WINDOWWIDTH, 40)\nCHATLIST_MAXSIZE = 20\nTEXTCOLOR = (0,255,0)\n#Add fontname for each language, otherwise some text can't be correctly displayed.\nFONTNAMES = [\"notosanscjktcregular\", \"notosansmonocjktcregular\" ,\n            \"notosansregular,\", \n            \"microsoftjhengheimicrosoftjhengheiuilight\",\n            \"microsoftyaheimicrosoftyaheiuilight\",\n            \"msgothicmsuigothicmspgothic\",\n            \"msmincho\",",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "CHATLIST_MAXSIZE",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "CHATLIST_MAXSIZE = 20\nTEXTCOLOR = (0,255,0)\n#Add fontname for each language, otherwise some text can't be correctly displayed.\nFONTNAMES = [\"notosanscjktcregular\", \"notosansmonocjktcregular\" ,\n            \"notosansregular,\", \n            \"microsoftjhengheimicrosoftjhengheiuilight\",\n            \"microsoftyaheimicrosoftyaheiuilight\",\n            \"msgothicmsuigothicmspgothic\",\n            \"msmincho\",\n            \"Arial\"]",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "TEXTCOLOR",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "TEXTCOLOR = (0,255,0)\n#Add fontname for each language, otherwise some text can't be correctly displayed.\nFONTNAMES = [\"notosanscjktcregular\", \"notosansmonocjktcregular\" ,\n            \"notosansregular,\", \n            \"microsoftjhengheimicrosoftjhengheiuilight\",\n            \"microsoftyaheimicrosoftyaheiuilight\",\n            \"msgothicmsuigothicmspgothic\",\n            \"msmincho\",\n            \"Arial\"]\n#Version check",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "FONTNAMES",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "FONTNAMES = [\"notosanscjktcregular\", \"notosansmonocjktcregular\" ,\n            \"notosansregular,\", \n            \"microsoftjhengheimicrosoftjhengheiuilight\",\n            \"microsoftyaheimicrosoftyaheiuilight\",\n            \"msgothicmsuigothicmspgothic\",\n            \"msmincho\",\n            \"Arial\"]\n#Version check\nif (pygame.get_sdl_version() < (2,0,0)):\n    raise Exception(\"This example requires SDL2.\")",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "Screen",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "Screen = pygame.display.set_mode((WINDOWWIDTH,WINDOWHEIGHT))\npygame.display.set_caption(\"TextInput example\")\nFPSClock = pygame.time.Clock()\n#Freetype\n#\"The font name can be a comma separated list of font names to search for.\"\nFONTNAMES = \",\".join(str(x) for x in FONTNAMES)\nFont = pygame.freetype.SysFont(FONTNAMES, 24)\nFontSmall = pygame.freetype.SysFont(FONTNAMES, 16)\nprint(\"Using font: \" + Font.name)\n#Main loop process",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "FPSClock",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "FPSClock = pygame.time.Clock()\n#Freetype\n#\"The font name can be a comma separated list of font names to search for.\"\nFONTNAMES = \",\".join(str(x) for x in FONTNAMES)\nFont = pygame.freetype.SysFont(FONTNAMES, 24)\nFontSmall = pygame.freetype.SysFont(FONTNAMES, 16)\nprint(\"Using font: \" + Font.name)\n#Main loop process\ndef main():\n    global BGCOLOR, PRINT_EVENT, CHATBOX_POS, CHATLIST_POS, CHATLIST_MAXSIZE",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "FONTNAMES",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "FONTNAMES = \",\".join(str(x) for x in FONTNAMES)\nFont = pygame.freetype.SysFont(FONTNAMES, 24)\nFontSmall = pygame.freetype.SysFont(FONTNAMES, 16)\nprint(\"Using font: \" + Font.name)\n#Main loop process\ndef main():\n    global BGCOLOR, PRINT_EVENT, CHATBOX_POS, CHATLIST_POS, CHATLIST_MAXSIZE\n    global FPSClock , Font, Screen\n    \"\"\"\n    https://wiki.libsdl.org/SDL_HINT_IME_INTERNAL_EDITING",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "Font",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "Font = pygame.freetype.SysFont(FONTNAMES, 24)\nFontSmall = pygame.freetype.SysFont(FONTNAMES, 16)\nprint(\"Using font: \" + Font.name)\n#Main loop process\ndef main():\n    global BGCOLOR, PRINT_EVENT, CHATBOX_POS, CHATLIST_POS, CHATLIST_MAXSIZE\n    global FPSClock , Font, Screen\n    \"\"\"\n    https://wiki.libsdl.org/SDL_HINT_IME_INTERNAL_EDITING\n    https://wiki.libsdl.org/Tutorials/TextInput",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "FontSmall",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.textinput",
        "description": "pygame-1.9.6.examples.textinput",
        "peekOfCode": "FontSmall = pygame.freetype.SysFont(FONTNAMES, 16)\nprint(\"Using font: \" + Font.name)\n#Main loop process\ndef main():\n    global BGCOLOR, PRINT_EVENT, CHATBOX_POS, CHATLIST_POS, CHATLIST_MAXSIZE\n    global FPSClock , Font, Screen\n    \"\"\"\n    https://wiki.libsdl.org/SDL_HINT_IME_INTERNAL_EDITING\n    https://wiki.libsdl.org/Tutorials/TextInput\n    Candidate list not showing due to SDL2 problem ;w;",
        "detail": "pygame-1.9.6.examples.textinput",
        "documentation": {}
    },
    {
        "label": "stopwatch",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.vgrade",
        "description": "pygame-1.9.6.examples.vgrade",
        "peekOfCode": "def stopwatch(message = None):\n    \"simple routine to time python code\"\n    global timer\n    if not message:\n        timer = pygame.time.get_ticks()\n        return\n    now = pygame.time.get_ticks()\n    runtime = (now - timer)/1000.0 + .001\n    print (\"%s %s %s\" %\n           (message, runtime, ('seconds\\t(%.2ffps)'%(1.0/runtime))))",
        "detail": "pygame-1.9.6.examples.vgrade",
        "documentation": {}
    },
    {
        "label": "VertGradientColumn",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.vgrade",
        "description": "pygame-1.9.6.examples.vgrade",
        "peekOfCode": "def VertGradientColumn(surf, topcolor, bottomcolor):\n    \"creates a new 3d vertical gradient array\"\n    topcolor = array(topcolor, copy=0)\n    bottomcolor = array(bottomcolor, copy=0)\n    diff = bottomcolor - topcolor\n    width, height = surf.get_size()\n    # create array from 0.0 to 1.0 triplets\n    column = arange(height, dtype='float')/height\n    column = repeat(column[:, newaxis], [3], 1)\n    # create a single column of gradient",
        "detail": "pygame-1.9.6.examples.vgrade",
        "documentation": {}
    },
    {
        "label": "DisplayGradient",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.vgrade",
        "description": "pygame-1.9.6.examples.vgrade",
        "peekOfCode": "def DisplayGradient(surf):\n    \"choose random colors and show them\"\n    stopwatch()\n    colors = randint(0, 255, (2, 3))\n    column = VertGradientColumn(surf, colors[0], colors[1])\n    pygame.surfarray.blit_array(surf, column)\n    pygame.display.flip()\n    stopwatch('Gradient:')\ndef main():\n    pygame.init()",
        "detail": "pygame-1.9.6.examples.vgrade",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.vgrade",
        "description": "pygame-1.9.6.examples.vgrade",
        "peekOfCode": "def main():\n    pygame.init()\n    pygame.mixer.quit() # remove ALSA underflow messages for Debian squeeze\n    size = 600, 400\n    os.environ['SDL_VIDEO_CENTERED'] = '1'\n    screen = pygame.display.set_mode(size, NOFRAME, 0)\n    pygame.event.set_blocked(MOUSEMOTION) #keep our queue cleaner\n    pygame.time.set_timer(USEREVENT, 500)\n    while 1:\n        event = pygame.event.wait()",
        "detail": "pygame-1.9.6.examples.vgrade",
        "documentation": {}
    },
    {
        "label": "timer",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.vgrade",
        "description": "pygame-1.9.6.examples.vgrade",
        "peekOfCode": "timer = 0\ndef stopwatch(message = None):\n    \"simple routine to time python code\"\n    global timer\n    if not message:\n        timer = pygame.time.get_ticks()\n        return\n    now = pygame.time.get_ticks()\n    runtime = (now - timer)/1000.0 + .001\n    print (\"%s %s %s\" %",
        "detail": "pygame-1.9.6.examples.vgrade",
        "documentation": {}
    },
    {
        "label": "load_img",
        "kind": 2,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "def load_img(file):\n    return pygame.image.load(os.path.join(data_dir, file))\npygame.display.init()\npygame.key.set_repeat(1000, 10)\nfor driver in get_drivers():\n    print(driver)\nimport random\nanswer = messagebox(\"I will open two windows! Continue?\", \"Hello!\", info=True,\n                    buttons=('Yes', 'No', 'Chance'),\n                    return_button=0, escape_button=1)",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "data_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "data_dir = os.path.join(os.path.split(os.path.abspath(__file__))[0],\n                        'data')\nfrom pygame._sdl2 import (\n    Window,\n    Texture,\n    Renderer,\n    get_drivers,\n    messagebox,\n)\ndef load_img(file):",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "answer",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "answer = messagebox(\"I will open two windows! Continue?\", \"Hello!\", info=True,\n                    buttons=('Yes', 'No', 'Chance'),\n                    return_button=0, escape_button=1)\nif answer == 1 or (answer == 2 and random.random() < .5):\n    import sys\n    sys.exit(0)\nwin = Window('asdf', resizable=True)\nrenderer = Renderer(win)\ntex = Texture.from_surface(renderer, load_img('alien1.gif'))\nrunning = True",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "win",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "win = Window('asdf', resizable=True)\nrenderer = Renderer(win)\ntex = Texture.from_surface(renderer, load_img('alien1.gif'))\nrunning = True\nx, y = 250, 50\nclock = pygame.time.Clock()\nbackgrounds = [(255,0,0,255), (0,255,0,255), (0,0,255,255)]\nbg_index = 0\nrenderer.draw_color = backgrounds[bg_index]\nwin2 = Window('2nd window', size=(256, 256), always_on_top=True)",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "renderer",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "renderer = Renderer(win)\ntex = Texture.from_surface(renderer, load_img('alien1.gif'))\nrunning = True\nx, y = 250, 50\nclock = pygame.time.Clock()\nbackgrounds = [(255,0,0,255), (0,255,0,255), (0,0,255,255)]\nbg_index = 0\nrenderer.draw_color = backgrounds[bg_index]\nwin2 = Window('2nd window', size=(256, 256), always_on_top=True)\nwin2.opacity = 0.5",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "tex",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "tex = Texture.from_surface(renderer, load_img('alien1.gif'))\nrunning = True\nx, y = 250, 50\nclock = pygame.time.Clock()\nbackgrounds = [(255,0,0,255), (0,255,0,255), (0,0,255,255)]\nbg_index = 0\nrenderer.draw_color = backgrounds[bg_index]\nwin2 = Window('2nd window', size=(256, 256), always_on_top=True)\nwin2.opacity = 0.5\nwin2.set_icon(load_img('bomb.gif'))",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "running",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "running = True\nx, y = 250, 50\nclock = pygame.time.Clock()\nbackgrounds = [(255,0,0,255), (0,255,0,255), (0,0,255,255)]\nbg_index = 0\nrenderer.draw_color = backgrounds[bg_index]\nwin2 = Window('2nd window', size=(256, 256), always_on_top=True)\nwin2.opacity = 0.5\nwin2.set_icon(load_img('bomb.gif'))\nrenderer2 = Renderer(win2)",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "clock = pygame.time.Clock()\nbackgrounds = [(255,0,0,255), (0,255,0,255), (0,0,255,255)]\nbg_index = 0\nrenderer.draw_color = backgrounds[bg_index]\nwin2 = Window('2nd window', size=(256, 256), always_on_top=True)\nwin2.opacity = 0.5\nwin2.set_icon(load_img('bomb.gif'))\nrenderer2 = Renderer(win2)\ntex2 = Texture.from_surface(renderer2, load_img('asprite.bmp'))\nrenderer2.clear()",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "backgrounds",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "backgrounds = [(255,0,0,255), (0,255,0,255), (0,0,255,255)]\nbg_index = 0\nrenderer.draw_color = backgrounds[bg_index]\nwin2 = Window('2nd window', size=(256, 256), always_on_top=True)\nwin2.opacity = 0.5\nwin2.set_icon(load_img('bomb.gif'))\nrenderer2 = Renderer(win2)\ntex2 = Texture.from_surface(renderer2, load_img('asprite.bmp'))\nrenderer2.clear()\nrenderer2.copy(tex2)",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "bg_index",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "bg_index = 0\nrenderer.draw_color = backgrounds[bg_index]\nwin2 = Window('2nd window', size=(256, 256), always_on_top=True)\nwin2.opacity = 0.5\nwin2.set_icon(load_img('bomb.gif'))\nrenderer2 = Renderer(win2)\ntex2 = Texture.from_surface(renderer2, load_img('asprite.bmp'))\nrenderer2.clear()\nrenderer2.copy(tex2)\nrenderer2.present()",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "renderer.draw_color",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "renderer.draw_color = backgrounds[bg_index]\nwin2 = Window('2nd window', size=(256, 256), always_on_top=True)\nwin2.opacity = 0.5\nwin2.set_icon(load_img('bomb.gif'))\nrenderer2 = Renderer(win2)\ntex2 = Texture.from_surface(renderer2, load_img('asprite.bmp'))\nrenderer2.clear()\nrenderer2.copy(tex2)\nrenderer2.present()\ndel tex2",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "win2",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "win2 = Window('2nd window', size=(256, 256), always_on_top=True)\nwin2.opacity = 0.5\nwin2.set_icon(load_img('bomb.gif'))\nrenderer2 = Renderer(win2)\ntex2 = Texture.from_surface(renderer2, load_img('asprite.bmp'))\nrenderer2.clear()\nrenderer2.copy(tex2)\nrenderer2.present()\ndel tex2\nfull = 0",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "win2.opacity",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "win2.opacity = 0.5\nwin2.set_icon(load_img('bomb.gif'))\nrenderer2 = Renderer(win2)\ntex2 = Texture.from_surface(renderer2, load_img('asprite.bmp'))\nrenderer2.clear()\nrenderer2.copy(tex2)\nrenderer2.present()\ndel tex2\nfull = 0\nsrcrect = (0, 0, tex.width, tex.height)",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "renderer2",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "renderer2 = Renderer(win2)\ntex2 = Texture.from_surface(renderer2, load_img('asprite.bmp'))\nrenderer2.clear()\nrenderer2.copy(tex2)\nrenderer2.present()\ndel tex2\nfull = 0\nsrcrect = (0, 0, tex.width, tex.height)\nwhile running:\n    for event in pygame.event.get():",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "tex2",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "tex2 = Texture.from_surface(renderer2, load_img('asprite.bmp'))\nrenderer2.clear()\nrenderer2.copy(tex2)\nrenderer2.present()\ndel tex2\nfull = 0\nsrcrect = (0, 0, tex.width, tex.height)\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "full",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "full = 0\nsrcrect = (0, 0, tex.width, tex.height)\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        elif getattr(event, 'window', None) == win2:\n            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE or\\\n               event.type == pygame.WINDOWEVENT and event.event == pygame.WINDOWEVENT_CLOSE:\n                win2.destroy()",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "srcrect",
        "kind": 5,
        "importPath": "pygame-1.9.6.examples.video",
        "description": "pygame-1.9.6.examples.video",
        "peekOfCode": "srcrect = (0, 0, tex.width, tex.height)\nwhile running:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            running = False\n        elif getattr(event, 'window', None) == win2:\n            if event.type == pygame.KEYDOWN and event.key == pygame.K_ESCAPE or\\\n               event.type == pygame.WINDOWEVENT and event.event == pygame.WINDOWEVENT_CLOSE:\n                win2.destroy()\n        elif event.type == pygame.KEYDOWN:",
        "detail": "pygame-1.9.6.examples.video",
        "documentation": {}
    },
    {
        "label": "Empty",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.threads.Py25Queue",
        "description": "pygame-1.9.6.src_py.threads.Py25Queue",
        "peekOfCode": "class Empty(Exception):\n    \"Exception raised by Queue.get(block=0)/get_nowait().\"\n    pass\nclass Full(Exception):\n    \"Exception raised by Queue.put(block=0)/put_nowait().\"\n    pass\nclass Queue:\n    \"\"\"Create a queue object with a given maximum size.\n    If maxsize is <= 0, the queue size is infinite.\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.threads.Py25Queue",
        "documentation": {}
    },
    {
        "label": "Full",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.threads.Py25Queue",
        "description": "pygame-1.9.6.src_py.threads.Py25Queue",
        "peekOfCode": "class Full(Exception):\n    \"Exception raised by Queue.put(block=0)/put_nowait().\"\n    pass\nclass Queue:\n    \"\"\"Create a queue object with a given maximum size.\n    If maxsize is <= 0, the queue size is infinite.\n    \"\"\"\n    def __init__(self, maxsize=0):\n        try:\n            import threading",
        "detail": "pygame-1.9.6.src_py.threads.Py25Queue",
        "documentation": {}
    },
    {
        "label": "Queue",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.threads.Py25Queue",
        "description": "pygame-1.9.6.src_py.threads.Py25Queue",
        "peekOfCode": "class Queue:\n    \"\"\"Create a queue object with a given maximum size.\n    If maxsize is <= 0, the queue size is infinite.\n    \"\"\"\n    def __init__(self, maxsize=0):\n        try:\n            import threading\n        except ImportError:\n            import dummy_threading as threading\n        self._init(maxsize)",
        "detail": "pygame-1.9.6.src_py.threads.Py25Queue",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.threads.Py25Queue",
        "description": "pygame-1.9.6.src_py.threads.Py25Queue",
        "peekOfCode": "__all__ = ['Empty', 'Full', 'Queue']\nclass Empty(Exception):\n    \"Exception raised by Queue.get(block=0)/get_nowait().\"\n    pass\nclass Full(Exception):\n    \"Exception raised by Queue.put(block=0)/put_nowait().\"\n    pass\nclass Queue:\n    \"\"\"Create a queue object with a given maximum size.\n    If maxsize is <= 0, the queue size is infinite.",
        "detail": "pygame-1.9.6.src_py.threads.Py25Queue",
        "documentation": {}
    },
    {
        "label": "Camera",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.camera",
        "description": "pygame-1.9.6.src_py.camera",
        "peekOfCode": "class Camera:\n    def __init__(self, device =0, size = (320, 200), mode = \"RGB\"):\n        \"\"\"\n        \"\"\"\n        _check_init()\n        raise NotImplementedError()\n    def set_resolution(self, width, height):\n        \"\"\"Sets the capture resolution. (without dialog)\n        \"\"\"\n        pass",
        "detail": "pygame-1.9.6.src_py.camera",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.camera",
        "description": "pygame-1.9.6.src_py.camera",
        "peekOfCode": "def init():\n    global list_cameras, Camera, colorspace, _is_init\n    import os,sys\n    use_opencv = False\n    use_vidcapture = False\n    use__camera = True\n    if sys.platform == 'win32':\n        use_vidcapture = True\n        use__camera = False\n    elif \"linux\" in sys.platform:",
        "detail": "pygame-1.9.6.src_py.camera",
        "documentation": {}
    },
    {
        "label": "quit",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.camera",
        "description": "pygame-1.9.6.src_py.camera",
        "peekOfCode": "def quit():\n    global _is_init\n    _is_init = 0\n    pass\ndef _check_init():\n    global _is_init\n    if not _is_init:\n        raise ValueError(\"Need to call camera.init() before using.\")\ndef list_cameras():\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.camera",
        "documentation": {}
    },
    {
        "label": "list_cameras",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.camera",
        "description": "pygame-1.9.6.src_py.camera",
        "peekOfCode": "def list_cameras():\n    \"\"\"\n    \"\"\"\n    _check_init()\n    raise NotImplementedError()\nclass Camera:\n    def __init__(self, device =0, size = (320, 200), mode = \"RGB\"):\n        \"\"\"\n        \"\"\"\n        _check_init()",
        "detail": "pygame-1.9.6.src_py.camera",
        "documentation": {}
    },
    {
        "label": "_is_init",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.camera",
        "description": "pygame-1.9.6.src_py.camera",
        "peekOfCode": "_is_init = 0\ndef init():\n    global list_cameras, Camera, colorspace, _is_init\n    import os,sys\n    use_opencv = False\n    use_vidcapture = False\n    use__camera = True\n    if sys.platform == 'win32':\n        use_vidcapture = True\n        use__camera = False",
        "detail": "pygame-1.9.6.src_py.camera",
        "documentation": {}
    },
    {
        "label": "THECOLORS",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.colordict",
        "description": "pygame-1.9.6.src_py.colordict",
        "peekOfCode": "THECOLORS = {\n'gray17' : (43, 43, 43, 255) ,\n'gold' : (255, 215, 0, 255) ,\n'gray10' : (26, 26, 26, 255) ,\n'yellow' : (255, 255, 0, 255) ,\n'gray11' : (28, 28, 28, 255) ,\n'grey61' : (156, 156, 156, 255) ,\n'grey60' : (153, 153, 153, 255) ,\n'darkseagreen' : (143, 188, 143, 255) ,\n'grey62' : (158, 158, 158, 255) ,",
        "detail": "pygame-1.9.6.src_py.colordict",
        "documentation": {}
    },
    {
        "label": "geterror",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.compat",
        "description": "pygame-1.9.6.src_py.compat",
        "peekOfCode": "def geterror():\n    return sys.exc_info()[1]\n# Python 3\nif PY_MAJOR_VERSION >= 3:\n    long_ = int\n    xrange_ = range\n    from io import StringIO\n    from io import BytesIO\n    unichr_ = chr\n    unicode_ = str",
        "detail": "pygame-1.9.6.src_py.compat",
        "documentation": {}
    },
    {
        "label": "get_BytesIO",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.compat",
        "description": "pygame-1.9.6.src_py.compat",
        "peekOfCode": "def get_BytesIO():\n    return BytesIO\ndef get_StringIO():\n    return StringIO\ndef ord_(o):\n    try:\n        return ord(o)\n    except TypeError:\n        return o\nif sys.platform == 'win32':",
        "detail": "pygame-1.9.6.src_py.compat",
        "documentation": {}
    },
    {
        "label": "get_StringIO",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.compat",
        "description": "pygame-1.9.6.src_py.compat",
        "peekOfCode": "def get_StringIO():\n    return StringIO\ndef ord_(o):\n    try:\n        return ord(o)\n    except TypeError:\n        return o\nif sys.platform == 'win32':\n    filesystem_errors = \"replace\"\nelif PY_MAJOR_VERSION >= 3:",
        "detail": "pygame-1.9.6.src_py.compat",
        "documentation": {}
    },
    {
        "label": "ord_",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.compat",
        "description": "pygame-1.9.6.src_py.compat",
        "peekOfCode": "def ord_(o):\n    try:\n        return ord(o)\n    except TypeError:\n        return o\nif sys.platform == 'win32':\n    filesystem_errors = \"replace\"\nelif PY_MAJOR_VERSION >= 3:\n    filesystem_errors = \"surrogateescape\"\nelse:",
        "detail": "pygame-1.9.6.src_py.compat",
        "documentation": {}
    },
    {
        "label": "filesystem_encode",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.compat",
        "description": "pygame-1.9.6.src_py.compat",
        "peekOfCode": "def filesystem_encode(u):\n    fsencoding = sys.getfilesystemencoding()\n    if fsencoding.lower() in ['ascii', 'ansi_x3.4-1968'] and sys.platform.startswith('linux'):\n        # Don't believe Linux systems claiming ASCII-only filesystems. In\n        # practice, arbitrary bytes are allowed, and most things expect UTF-8.\n        fsencoding = 'utf-8'\n    return u.encode(fsencoding, filesystem_errors)",
        "detail": "pygame-1.9.6.src_py.compat",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.compat",
        "description": "pygame-1.9.6.src_py.compat",
        "peekOfCode": "__all__ = ['geterror', 'long_', 'xrange_', 'ord_', 'unichr_',\n           'unicode_', 'raw_input_', 'as_bytes', 'as_unicode',\n           'bytes_', 'imap_', 'PY_MAJOR_VERSION']\nPY_MAJOR_VERSION = sys.version_info[0]\ndef geterror():\n    return sys.exc_info()[1]\n# Python 3\nif PY_MAJOR_VERSION >= 3:\n    long_ = int\n    xrange_ = range",
        "detail": "pygame-1.9.6.src_py.compat",
        "documentation": {}
    },
    {
        "label": "PY_MAJOR_VERSION",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.compat",
        "description": "pygame-1.9.6.src_py.compat",
        "peekOfCode": "PY_MAJOR_VERSION = sys.version_info[0]\ndef geterror():\n    return sys.exc_info()[1]\n# Python 3\nif PY_MAJOR_VERSION >= 3:\n    long_ = int\n    xrange_ = range\n    from io import StringIO\n    from io import BytesIO\n    unichr_ = chr",
        "detail": "pygame-1.9.6.src_py.compat",
        "documentation": {}
    },
    {
        "label": "compile",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "def compile(strings, black='X', white='.',xor='o'):\n   \"\"\"pygame.cursors.compile(strings, black, white,xor) -> data, mask\ncompile cursor strings into cursor data\nThis takes a set of strings with equal length and computes\nthe binary data for that cursor. The string widths must be\ndivisible by 8.\nThe black and white arguments are single letter strings that\ntells which characters will represent black pixels, and which\ncharacters represent white pixels. All other characters are\nconsidered clear.",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "load_xbm",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "def load_xbm(curs, mask):\n    \"\"\"pygame.cursors.load_xbm(cursorfile, maskfile) -> cursor_args\nreads a pair of XBM files into set_cursor arguments\nArguments can either be filenames or filelike objects\nwith the readlines method. Not largely tested, but\nshould work with typical XBM files.\n\"\"\"\n    def bitswap(num):\n        val = 0\n        for x in range(8):",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "arrow",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "arrow = ((16, 16), (0, 0),\n    (0x00,0x00,0x40,0x00,0x60,0x00,0x70,0x00,0x78,0x00,0x7C,0x00,0x7E,0x00,0x7F,0x00,\n     0x7F,0x80,0x7C,0x00,0x6C,0x00,0x46,0x00,0x06,0x00,0x03,0x00,0x03,0x00,0x00,0x00),\n    (0x40,0x00,0xE0,0x00,0xF0,0x00,0xF8,0x00,0xFC,0x00,0xFE,0x00,0xFF,0x00,0xFF,0x80,\n     0xFF,0xC0,0xFF,0x80,0xFE,0x00,0xEF,0x00,0x4F,0x00,0x07,0x80,0x07,0x80,0x03,0x00))\ndiamond = ((16, 16), (7, 7),\n    (0, 0, 1, 0, 3, 128, 7, 192, 14, 224, 28, 112, 56, 56, 112, 28, 56,\n     56, 28, 112, 14, 224, 7, 192, 3, 128, 1, 0, 0, 0, 0, 0),\n    (1, 0, 3, 128, 7, 192, 15, 224, 31, 240, 62, 248, 124, 124, 248, 62,\n     124, 124, 62, 248, 31, 240, 15, 224, 7, 192, 3, 128, 1, 0, 0, 0))",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "diamond",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "diamond = ((16, 16), (7, 7),\n    (0, 0, 1, 0, 3, 128, 7, 192, 14, 224, 28, 112, 56, 56, 112, 28, 56,\n     56, 28, 112, 14, 224, 7, 192, 3, 128, 1, 0, 0, 0, 0, 0),\n    (1, 0, 3, 128, 7, 192, 15, 224, 31, 240, 62, 248, 124, 124, 248, 62,\n     124, 124, 62, 248, 31, 240, 15, 224, 7, 192, 3, 128, 1, 0, 0, 0))\nball = ((16, 16), (7, 7),\n    (0, 0, 3, 192, 15, 240, 24, 248, 51, 252, 55, 252, 127, 254, 127, 254,\n     127, 254, 127, 254, 63, 252, 63, 252, 31, 248, 15, 240, 3, 192, 0, 0),\n    (3, 192, 15, 240, 31, 248, 63, 252, 127, 254, 127, 254, 255, 255, 255,\n     255, 255, 255, 255, 255, 127, 254, 127, 254, 63, 252, 31, 248, 15, 240,",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "ball",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "ball = ((16, 16), (7, 7),\n    (0, 0, 3, 192, 15, 240, 24, 248, 51, 252, 55, 252, 127, 254, 127, 254,\n     127, 254, 127, 254, 63, 252, 63, 252, 31, 248, 15, 240, 3, 192, 0, 0),\n    (3, 192, 15, 240, 31, 248, 63, 252, 127, 254, 127, 254, 255, 255, 255,\n     255, 255, 255, 255, 255, 127, 254, 127, 254, 63, 252, 31, 248, 15, 240,\n     3, 192))\nbroken_x = ((16, 16), (7, 7),\n    (0, 0, 96, 6, 112, 14, 56, 28, 28, 56, 12, 48, 0, 0, 0, 0, 0, 0, 0, 0,\n     12, 48, 28, 56, 56, 28, 112, 14, 96, 6, 0, 0),\n    (224, 7, 240, 15, 248, 31, 124, 62, 62, 124, 30, 120, 14, 112, 0, 0, 0,",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "broken_x",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "broken_x = ((16, 16), (7, 7),\n    (0, 0, 96, 6, 112, 14, 56, 28, 28, 56, 12, 48, 0, 0, 0, 0, 0, 0, 0, 0,\n     12, 48, 28, 56, 56, 28, 112, 14, 96, 6, 0, 0),\n    (224, 7, 240, 15, 248, 31, 124, 62, 62, 124, 30, 120, 14, 112, 0, 0, 0,\n     0, 14, 112, 30, 120, 62, 124, 124, 62, 248, 31, 240, 15, 224, 7))\ntri_left = ((16, 16), (1, 1),\n    (0, 0, 96, 0, 120, 0, 62, 0, 63, 128, 31, 224, 31, 248, 15, 254, 15, 254,\n     7, 128, 7, 128, 3, 128, 3, 128, 1, 128, 1, 128, 0, 0),\n    (224, 0, 248, 0, 254, 0, 127, 128, 127, 224, 63, 248, 63, 254, 31, 255,\n     31, 255, 15, 254, 15, 192, 7, 192, 7, 192, 3, 192, 3, 192, 1, 128))",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "tri_left",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "tri_left = ((16, 16), (1, 1),\n    (0, 0, 96, 0, 120, 0, 62, 0, 63, 128, 31, 224, 31, 248, 15, 254, 15, 254,\n     7, 128, 7, 128, 3, 128, 3, 128, 1, 128, 1, 128, 0, 0),\n    (224, 0, 248, 0, 254, 0, 127, 128, 127, 224, 63, 248, 63, 254, 31, 255,\n     31, 255, 15, 254, 15, 192, 7, 192, 7, 192, 3, 192, 3, 192, 1, 128))\ntri_right = ((16, 16), (14, 1),\n    (0, 0, 0, 6, 0, 30, 0, 124, 1, 252, 7, 248, 31, 248, 127, 240, 127, 240,\n     1, 224, 1, 224, 1, 192, 1, 192, 1, 128, 1, 128, 0, 0),\n    (0, 7, 0, 31, 0, 127, 1, 254, 7, 254, 31, 252, 127, 252, 255, 248, 255,\n     248, 127, 240, 3, 240, 3, 224, 3, 224, 3, 192, 3, 192, 1, 128))",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "tri_right",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "tri_right = ((16, 16), (14, 1),\n    (0, 0, 0, 6, 0, 30, 0, 124, 1, 252, 7, 248, 31, 248, 127, 240, 127, 240,\n     1, 224, 1, 224, 1, 192, 1, 192, 1, 128, 1, 128, 0, 0),\n    (0, 7, 0, 31, 0, 127, 1, 254, 7, 254, 31, 252, 127, 252, 255, 248, 255,\n     248, 127, 240, 3, 240, 3, 224, 3, 224, 3, 192, 3, 192, 1, 128))\n#here is an example string resource cursor. to use this;\n#  curs, mask = pygame.cursors.compile_cursor(pygame.cursors.thickarrow_strings, 'X', '.')\n#  pygame.mouse.set_cursor((24, 24), (0, 0), curs, mask)\nthickarrow_strings = (               #sized 24x24\n  \"XX                      \",",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "thickarrow_strings",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "thickarrow_strings = (               #sized 24x24\n  \"XX                      \",\n  \"XXX                     \",\n  \"XXXX                    \",\n  \"XX.XX                   \",\n  \"XX..XX                  \",\n  \"XX...XX                 \",\n  \"XX....XX                \",\n  \"XX.....XX               \",\n  \"XX......XX              \",",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "sizer_x_strings",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "sizer_x_strings = (               #sized 24x16\n \"     X      X           \",\n \"    XX      XX          \",\n \"   X.X      X.X         \",\n \"  X..X      X..X        \",\n \" X...XXXXXXXX...X       \",\n \"X................X      \",\n \" X...XXXXXXXX...X       \",\n \"  X..X      X..X        \",\n \"   X.X      X.X         \",",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "sizer_y_strings",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "sizer_y_strings = (               #sized 16x24\n \"     X          \",\n \"    X.X         \",\n \"   X...X        \",\n \"  X.....X       \",\n \" X.......X      \",\n \"XXXXX.XXXXX     \",\n \"    X.X         \",\n \"    X.X         \",\n \"    X.X         \",",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "sizer_xy_strings",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "sizer_xy_strings = (               #sized 24x16\n \"XXXXXXXX                \",\n \"X.....X                 \",\n \"X....X                  \",\n \"X...X                   \",\n \"X..X.X                  \",\n \"X.X X.X                 \",\n \"XX   X.X    X           \",\n \"X     X.X  XX           \",\n \"       X.XX.X           \",",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "textmarker_strings",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.cursors",
        "description": "pygame-1.9.6.src_py.cursors",
        "peekOfCode": "textmarker_strings = (               #sized 8x16\n \"ooo ooo \",\n \"   o    \",\n \"   o    \",\n \"   o    \",\n \"   o    \",\n \"   o    \",\n \"   o    \",\n \"   o    \",\n \"   o    \",",
        "detail": "pygame-1.9.6.src_py.cursors",
        "documentation": {}
    },
    {
        "label": "frac",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "def frac(x):\n    '''return fractional part of x'''\n    return x - floor(x)\ndef inv_frac(x):\n    '''return inverse fractional part of x'''\n    return 1 - (x - floor(x)) # eg, 1 - frac(x)\n#   L O W   L E V E L   D R A W   F U N C T I O N S   #\n# (They are too low-level to be translated into python, right?)\ndef set_at(surf, x, y, color):\n    surf.set_at((x, y), color)",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "inv_frac",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "def inv_frac(x):\n    '''return inverse fractional part of x'''\n    return 1 - (x - floor(x)) # eg, 1 - frac(x)\n#   L O W   L E V E L   D R A W   F U N C T I O N S   #\n# (They are too low-level to be translated into python, right?)\ndef set_at(surf, x, y, color):\n    surf.set_at((x, y), color)\ndef draw_pixel(surf, x, y, color, bright, blend=True):\n    '''draw one blended pixel with given brightness.'''\n    try:",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "set_at",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "def set_at(surf, x, y, color):\n    surf.set_at((x, y), color)\ndef draw_pixel(surf, x, y, color, bright, blend=True):\n    '''draw one blended pixel with given brightness.'''\n    try:\n        other_col = surf.get_at((x, y)) if blend else (0, 0, 0, 0)\n    except IndexError:  # pixel outside the surface\n        return\n    new_color = tuple((bright * col + (1 - bright) * pix)\n                      for col, pix in zip(color, other_col))",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "draw_pixel",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "def draw_pixel(surf, x, y, color, bright, blend=True):\n    '''draw one blended pixel with given brightness.'''\n    try:\n        other_col = surf.get_at((x, y)) if blend else (0, 0, 0, 0)\n    except IndexError:  # pixel outside the surface\n        return\n    new_color = tuple((bright * col + (1 - bright) * pix)\n                      for col, pix in zip(color, other_col))\n    # FIXME what should happen if only one, color or surf_col, has alpha?\n    surf.set_at((x, y), new_color)",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "encode",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "def encode(x, y, left, top, right, bottom):\n    '''returns a code that defines position with respect to a bounding box'''\n    # we use the fact that python interprets booleans (the inqualities)\n    # as 0/1, and then multiply them with the xxx_EDGE flags\n    return ((x < left) *  LEFT_EDGE +\n            (x > right) * RIGHT_EDGE +\n            (y < top) * TOP_EDGE +\n            (y > bottom) * BOTTOM_EDGE)\nINSIDE = lambda a: not a\nACCEPT = lambda a, b: not (a or b)",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "clip_line",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "def clip_line(line, left, top, right, bottom, use_float=False):\n    '''Algorithm to calculate the clipped line.\n    We calculate the coordinates of the part of the line segment within the\n    bounding box (defined by left, top, right, bottom). The we write\n    the coordinates of the line segment into \"line\", much like the C-algorithm.\n    With `use_float` True, clip_line is usable for float-clipping.\n    Returns: true if the line segment cuts the bounding box (false otherwise)\n    '''\n    assert isinstance(line, list)\n    x1, y1, x2, y2 = line",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "draw_aaline",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "def draw_aaline(surf, color, from_point, to_point, blend=True):\n    '''draw anti-aliased line between two endpoints.'''\n    line = [from_point[0], from_point[1], to_point[0], to_point[1]]\n    return _clip_and_draw_aaline(surf, surf.get_clip(), color, line, blend)\ndef draw_line(surf, color, from_point, to_point, width=1):\n    '''draw anti-aliased line between two endpoints.'''\n    line = [from_point[0], from_point[1], to_point[0], to_point[1]]\n    return _clip_and_draw_line_width(surf, surf.get_clip(), color, line, width)\n#   M U L T I L I N E   F U N C T I O N S   #\ndef _multi_lines(surf, color, closed, points, width=1, blend=False, aaline=False):",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "draw_line",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "def draw_line(surf, color, from_point, to_point, width=1):\n    '''draw anti-aliased line between two endpoints.'''\n    line = [from_point[0], from_point[1], to_point[0], to_point[1]]\n    return _clip_and_draw_line_width(surf, surf.get_clip(), color, line, width)\n#   M U L T I L I N E   F U N C T I O N S   #\ndef _multi_lines(surf, color, closed, points, width=1, blend=False, aaline=False):\n    '''draw several lines, either anti-aliased or not.'''\n    # The code for anti-aliased or not is almost identical, so it's factorized\n    length = len(points)\n    if length <= 2:",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "draw_lines",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "def draw_lines(surf, color, closed, points, width=1):\n    '''draw several lines connected through the points.'''\n    return _multi_lines(surf, color, closed, points, width, aaline=False)\ndef draw_aalines(surf, color, closed, points, blend=True):\n    '''draw several anti-aliased lines connected through the points.'''\n    return _multi_lines(surf, color, closed, points, blend=blend, aaline=True)\ndef draw_polygon(surface, color, points, width):\n    if width:\n        draw_lines(surface, color, 1, points, width)\n        return  # TODO Rect(...)",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "draw_aalines",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "def draw_aalines(surf, color, closed, points, blend=True):\n    '''draw several anti-aliased lines connected through the points.'''\n    return _multi_lines(surf, color, closed, points, blend=blend, aaline=True)\ndef draw_polygon(surface, color, points, width):\n    if width:\n        draw_lines(surface, color, 1, points, width)\n        return  # TODO Rect(...)\n    num_points = len(points)\n    point_x = [x for x, y in points]\n    point_y = [y for x, y in points]",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "draw_polygon",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "def draw_polygon(surface, color, points, width):\n    if width:\n        draw_lines(surface, color, 1, points, width)\n        return  # TODO Rect(...)\n    num_points = len(points)\n    point_x = [x for x, y in points]\n    point_y = [y for x, y in points]\n    miny = min(point_y)\n    maxy = max(point_y)\n    if miny == maxy:",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "LEFT_EDGE",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "LEFT_EDGE = 0x1\nRIGHT_EDGE = 0x2\nBOTTOM_EDGE = 0x4\nTOP_EDGE = 0x8\ndef encode(x, y, left, top, right, bottom):\n    '''returns a code that defines position with respect to a bounding box'''\n    # we use the fact that python interprets booleans (the inqualities)\n    # as 0/1, and then multiply them with the xxx_EDGE flags\n    return ((x < left) *  LEFT_EDGE +\n            (x > right) * RIGHT_EDGE +",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "RIGHT_EDGE",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "RIGHT_EDGE = 0x2\nBOTTOM_EDGE = 0x4\nTOP_EDGE = 0x8\ndef encode(x, y, left, top, right, bottom):\n    '''returns a code that defines position with respect to a bounding box'''\n    # we use the fact that python interprets booleans (the inqualities)\n    # as 0/1, and then multiply them with the xxx_EDGE flags\n    return ((x < left) *  LEFT_EDGE +\n            (x > right) * RIGHT_EDGE +\n            (y < top) * TOP_EDGE +",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "BOTTOM_EDGE",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "BOTTOM_EDGE = 0x4\nTOP_EDGE = 0x8\ndef encode(x, y, left, top, right, bottom):\n    '''returns a code that defines position with respect to a bounding box'''\n    # we use the fact that python interprets booleans (the inqualities)\n    # as 0/1, and then multiply them with the xxx_EDGE flags\n    return ((x < left) *  LEFT_EDGE +\n            (x > right) * RIGHT_EDGE +\n            (y < top) * TOP_EDGE +\n            (y > bottom) * BOTTOM_EDGE)",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "TOP_EDGE",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "TOP_EDGE = 0x8\ndef encode(x, y, left, top, right, bottom):\n    '''returns a code that defines position with respect to a bounding box'''\n    # we use the fact that python interprets booleans (the inqualities)\n    # as 0/1, and then multiply them with the xxx_EDGE flags\n    return ((x < left) *  LEFT_EDGE +\n            (x > right) * RIGHT_EDGE +\n            (y < top) * TOP_EDGE +\n            (y > bottom) * BOTTOM_EDGE)\nINSIDE = lambda a: not a",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "INSIDE",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "INSIDE = lambda a: not a\nACCEPT = lambda a, b: not (a or b)\nREJECT = lambda a, b: a and b\ndef clip_line(line, left, top, right, bottom, use_float=False):\n    '''Algorithm to calculate the clipped line.\n    We calculate the coordinates of the part of the line segment within the\n    bounding box (defined by left, top, right, bottom). The we write\n    the coordinates of the line segment into \"line\", much like the C-algorithm.\n    With `use_float` True, clip_line is usable for float-clipping.\n    Returns: true if the line segment cuts the bounding box (false otherwise)",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "ACCEPT",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "ACCEPT = lambda a, b: not (a or b)\nREJECT = lambda a, b: a and b\ndef clip_line(line, left, top, right, bottom, use_float=False):\n    '''Algorithm to calculate the clipped line.\n    We calculate the coordinates of the part of the line segment within the\n    bounding box (defined by left, top, right, bottom). The we write\n    the coordinates of the line segment into \"line\", much like the C-algorithm.\n    With `use_float` True, clip_line is usable for float-clipping.\n    Returns: true if the line segment cuts the bounding box (false otherwise)\n    '''",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "REJECT",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.draw_py",
        "description": "pygame-1.9.6.src_py.draw_py",
        "peekOfCode": "REJECT = lambda a, b: a and b\ndef clip_line(line, left, top, right, bottom, use_float=False):\n    '''Algorithm to calculate the clipped line.\n    We calculate the coordinates of the part of the line segment within the\n    bounding box (defined by left, top, right, bottom). The we write\n    the coordinates of the line segment into \"line\", much like the C-algorithm.\n    With `use_float` True, clip_line is usable for float-clipping.\n    Returns: true if the line segment cuts the bounding box (false otherwise)\n    '''\n    assert isinstance(line, list)",
        "detail": "pygame-1.9.6.src_py.draw_py",
        "documentation": {}
    },
    {
        "label": "SysFont",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.freetype",
        "description": "pygame-1.9.6.src_py.freetype",
        "peekOfCode": "def SysFont(name, size, bold=0, italic=0, constructor=None):\n    \"\"\"pygame.ftfont.SysFont(name, size, bold=False, italic=False, constructor=None) -> Font\n       create a pygame Font from system font resources\n       This will search the system fonts for the given font\n       name. You can also enable bold or italic styles, and\n       the appropriate system font will be selected if available.\n       This will always return a valid Font object, and will\n       fallback on the builtin pygame font if the given font\n       is not found.\n       Name can also be a comma separated list of names, in",
        "detail": "pygame-1.9.6.src_py.freetype",
        "documentation": {}
    },
    {
        "label": "Font",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.ftfont",
        "description": "pygame-1.9.6.src_py.ftfont",
        "peekOfCode": "class Font(_Font):\n    \"\"\"Font(filename, size) -> Font\n       Font(object, size) -> Font\n       create a new Font object from a file (freetype alternative)\n       This Font type differs from font.Font in that it can render glyphs\n       for Unicode code points in the supplementary planes (> 0xFFFF).\n       \"\"\"\n    __encode_file_path = staticmethod(encode_file_path)\n    __get_default_resolution = staticmethod(get_default_resolution)\n    __default_font = encode_file_path(get_default_font())",
        "detail": "pygame-1.9.6.src_py.ftfont",
        "documentation": {}
    },
    {
        "label": "get_init",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.ftfont",
        "description": "pygame-1.9.6.src_py.ftfont",
        "peekOfCode": "def get_init():\n   \"\"\"get_init() -> bool\n      true if the font module is initialized\"\"\"\n   return _get_init()\ndef SysFont(name, size, bold=0, italic=0, constructor=None):\n    \"\"\"pygame.ftfont.SysFont(name, size, bold=False, italic=False, constructor=None) -> Font\n       create a pygame Font from system font resources (freetype alternative)\n       This will search the system fonts for the given font\n       name. You can also enable bold or italic styles, and\n       the appropriate system font will be selected if available.",
        "detail": "pygame-1.9.6.src_py.ftfont",
        "documentation": {}
    },
    {
        "label": "SysFont",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.ftfont",
        "description": "pygame-1.9.6.src_py.ftfont",
        "peekOfCode": "def SysFont(name, size, bold=0, italic=0, constructor=None):\n    \"\"\"pygame.ftfont.SysFont(name, size, bold=False, italic=False, constructor=None) -> Font\n       create a pygame Font from system font resources (freetype alternative)\n       This will search the system fonts for the given font\n       name. You can also enable bold or italic styles, and\n       the appropriate system font will be selected if available.\n       This will always return a valid Font object, and will\n       fallback on the builtin pygame font if the given font\n       is not found.\n       Name can also be a comma separated list of names, in",
        "detail": "pygame-1.9.6.src_py.ftfont",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.ftfont",
        "description": "pygame-1.9.6.src_py.ftfont",
        "peekOfCode": "__all__ = ['Font', 'init', 'quit', 'get_default_font', 'get_init', 'SysFont']\nfrom pygame._freetype import init, Font as _Font, get_default_resolution\nfrom pygame._freetype import quit, get_default_font, get_init as _get_init\nfrom pygame._freetype import __PYGAMEinit__\nfrom pygame.sysfont import match_font, get_fonts, SysFont as _SysFont\nfrom pygame import encode_file_path\nfrom pygame.compat import bytes_, unicode_, as_unicode, as_bytes\nfrom pygame import Surface as _Surface, Color as _Color, SRCALPHA as _SRCALPHA\nclass Font(_Font):\n    \"\"\"Font(filename, size) -> Font",
        "detail": "pygame-1.9.6.src_py.ftfont",
        "documentation": {}
    },
    {
        "label": "FontType",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.ftfont",
        "description": "pygame-1.9.6.src_py.ftfont",
        "peekOfCode": "FontType = Font\ndef get_init():\n   \"\"\"get_init() -> bool\n      true if the font module is initialized\"\"\"\n   return _get_init()\ndef SysFont(name, size, bold=0, italic=0, constructor=None):\n    \"\"\"pygame.ftfont.SysFont(name, size, bold=False, italic=False, constructor=None) -> Font\n       create a pygame Font from system font resources (freetype alternative)\n       This will search the system fonts for the given font\n       name. You can also enable bold or italic styles, and",
        "detail": "pygame-1.9.6.src_py.ftfont",
        "documentation": {}
    },
    {
        "label": "Color",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.locals",
        "description": "pygame-1.9.6.src_py.locals",
        "peekOfCode": "Color = color.Color",
        "detail": "pygame-1.9.6.src_py.locals",
        "documentation": {}
    },
    {
        "label": "Video_AutoInit",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.macosx",
        "description": "pygame-1.9.6.src_py.macosx",
        "peekOfCode": "def Video_AutoInit():\n    \"\"\"Called from the base.c just before display module is initialized.\"\"\"\n    if 'Darwin' in platform.platform():\n        if not sdlmain_osx.RunningFromBundleWithNSApplication():\n            try:\n                default_icon_data = getResource('pygame_icon.tiff').read()\n            except IOError:\n                default_icon_data = None\n            except NotImplementedError:\n                default_icon_data = None",
        "detail": "pygame-1.9.6.src_py.macosx",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.macosx",
        "description": "pygame-1.9.6.src_py.macosx",
        "peekOfCode": "__all__ = ['Video_AutoInit']\ndef Video_AutoInit():\n    \"\"\"Called from the base.c just before display module is initialized.\"\"\"\n    if 'Darwin' in platform.platform():\n        if not sdlmain_osx.RunningFromBundleWithNSApplication():\n            try:\n                default_icon_data = getResource('pygame_icon.tiff').read()\n            except IOError:\n                default_icon_data = None\n            except NotImplementedError:",
        "detail": "pygame-1.9.6.src_py.macosx",
        "documentation": {}
    },
    {
        "label": "Input",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "class Input(object):\n    \"\"\"Input is used to get midi input from midi devices.\n    Input(device_id)\n    Input(device_id, buffer_size)\n    buffer_size - the number of input events to be buffered waiting to\n      be read using Input.read()\n    \"\"\"\n    def __init__(self, device_id, buffer_size=4096):\n        \"\"\"\n        The buffer_size specifies the number of input events to be buffered",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "Output",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "class Output(object):\n    \"\"\"Output is used to send midi to an output device\n    Output(device_id)\n    Output(device_id, latency = 0)\n    Output(device_id, buffer_size = 4096)\n    Output(device_id, latency, buffer_size)\n    The buffer_size specifies the number of output events to be\n    buffered waiting for output.  (In some cases -- see below --\n    PortMidi does not buffer output at all and merely passes data\n    to a lower-level API, in which case buffersize is ignored.)",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "MidiException",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "class MidiException(Exception):\n    \"\"\"exception that pygame.midi functions and classes can raise\n    MidiException(errno)\n    \"\"\"\n    def __init__(self, value):\n        self.parameter = value\n    def __str__(self):\n        return repr(self.parameter)\ndef frequency_to_midi(freqency):\n    \"\"\" converts a frequency into a MIDI note.",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def init():\n    \"\"\"initialize the midi module\n    pygame.midi.init(): return None\n    Call the initialisation function before using the midi module.\n    It is safe to call this more than once.\n    \"\"\"\n    global _init, _pypm\n    if not _init:\n        import pygame.pypm\n        _pypm = pygame.pypm",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "quit",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def quit():\n    \"\"\"uninitialize the midi module\n    pygame.midi.quit(): return None\n    Called automatically atexit if you don't call it.\n    It is safe to call this function more than once.\n    \"\"\"\n    global _init, _pypm\n    if _init:\n        # TODO: find all Input and Output classes and close them first?\n        _pypm.Terminate()",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "get_init",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def get_init():\n    \"\"\"returns True if the midi module is currently initialized\n    pygame.midi.get_init(): return bool\n    Returns True if the pygame.midi module is currently initialized.\n    New in pygame 1.9.5.\n    \"\"\"\n    return _init\ndef _check_init():\n    if not _init:\n        raise RuntimeError(\"pygame.midi not initialised.\")",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "get_count",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def get_count():\n    \"\"\"gets the number of devices.\n    pygame.midi.get_count(): return num_devices\n    Device ids range from 0 to get_count() -1\n    \"\"\"\n    _check_init()\n    return _pypm.CountDevices()\ndef get_default_input_id():\n    \"\"\"gets default input device number\n    pygame.midi.get_default_input_id(): return default_id",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "get_default_input_id",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def get_default_input_id():\n    \"\"\"gets default input device number\n    pygame.midi.get_default_input_id(): return default_id\n    Return the default device ID or -1 if there are no devices.\n    The result can be passed to the Input()/Ouput() class.\n    On the PC, the user can specify a default device by\n    setting an environment variable. For example, to use device #1.\n        set PM_RECOMMENDED_INPUT_DEVICE=1\n    The user should first determine the available device ID by using\n    the supplied application \"testin\" or \"testout\".",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "get_default_output_id",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def get_default_output_id():\n    \"\"\"gets default output device number\n    pygame.midi.get_default_output_id(): return default_id\n    Return the default device ID or -1 if there are no devices.\n    The result can be passed to the Input()/Ouput() class.\n    On the PC, the user can specify a default device by\n    setting an environment variable. For example, to use device #1.\n        set PM_RECOMMENDED_OUTPUT_DEVICE=1\n    The user should first determine the available device ID by using\n    the supplied application \"testin\" or \"testout\".",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "get_device_info",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def get_device_info(an_id):\n    \"\"\" returns information about a midi device\n    pygame.midi.get_device_info(an_id): return (interf, name, input, output, opened)\n    interf - a text string describing the device interface, eg 'ALSA'.\n    name - a text string for the name of the device, eg 'Midi Through Port-0'\n    input - 0, or 1 if the device is an input device.\n    output - 0, or 1 if the device is an output device.\n    opened - 0, or 1 if the device is opened.\n    If the id is out of range, the function returns None.\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def time():\n    \"\"\"returns the current time in ms of the PortMidi timer\n    pygame.midi.time(): return time\n    The time is reset to 0, when the module is inited.\n    \"\"\"\n    return _pypm.Time()\ndef midis2events(midis, device_id):\n    \"\"\"converts midi events to pygame events\n    pygame.midi.midis2events(midis, device_id): return [Event, ...]\n    Takes a sequence of midi events and returns list of pygame events.",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "midis2events",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def midis2events(midis, device_id):\n    \"\"\"converts midi events to pygame events\n    pygame.midi.midis2events(midis, device_id): return [Event, ...]\n    Takes a sequence of midi events and returns list of pygame events.\n    \"\"\"\n    evs = []\n    for midi in midis:\n        ((status,data1,data2,data3),timestamp) = midi\n        e = pygame.event.Event(MIDIIN,\n                               status=status,",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "frequency_to_midi",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def frequency_to_midi(freqency):\n    \"\"\" converts a frequency into a MIDI note.\n    Rounds to the closest midi note.\n    ::Examples::\n    >>> frequency_to_midi(27.5)\n    21\n    >>> frequency_to_midi(36.7)\n    26\n    >>> frequency_to_midi(4186.0)\n    108",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "midi_to_frequency",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def midi_to_frequency(midi_note):\n    \"\"\" Converts a midi note to a frequency.\n    ::Examples::\n    >>> midi_to_frequency(21)\n    27.5\n    >>> midi_to_frequency(26)\n    36.7\n    >>> midi_to_frequency(108)\n    4186.0\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "midi_to_ansi_note",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "def midi_to_ansi_note(midi_note):\n    \"\"\" returns the Ansi Note name for a midi number.\n    ::Examples::\n    >>> midi_to_ansi_note(21)\n    'A0'\n    >>> midi_to_ansi_note(102)\n    'F#7'\n    >>> midi_to_ansi_note(108)\n    'C8'\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "MIDIIN",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "MIDIIN = pygame.locals.USEREVENT + 10\nMIDIOUT = pygame.locals.USEREVENT + 11\n_init = False\n_pypm = None\n__all__ = [\n    \"Input\",\n    \"MIDIIN\",\n    \"MIDIOUT\",\n    \"MidiException\",\n    \"Output\",",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "MIDIOUT",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "MIDIOUT = pygame.locals.USEREVENT + 11\n_init = False\n_pypm = None\n__all__ = [\n    \"Input\",\n    \"MIDIIN\",\n    \"MIDIOUT\",\n    \"MidiException\",\n    \"Output\",\n    \"get_count\",",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "_init",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "_init = False\n_pypm = None\n__all__ = [\n    \"Input\",\n    \"MIDIIN\",\n    \"MIDIOUT\",\n    \"MidiException\",\n    \"Output\",\n    \"get_count\",\n    \"get_default_input_id\",",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "_pypm",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "_pypm = None\n__all__ = [\n    \"Input\",\n    \"MIDIIN\",\n    \"MIDIOUT\",\n    \"MidiException\",\n    \"Output\",\n    \"get_count\",\n    \"get_default_input_id\",\n    \"get_default_output_id\",",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "__all__ = [\n    \"Input\",\n    \"MIDIIN\",\n    \"MIDIOUT\",\n    \"MidiException\",\n    \"Output\",\n    \"get_count\",\n    \"get_default_input_id\",\n    \"get_default_output_id\",\n    \"get_device_info\",",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "__theclasses__",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.midi",
        "description": "pygame-1.9.6.src_py.midi",
        "peekOfCode": "__theclasses__ = [\"Input\", \"Output\"]\ndef init():\n    \"\"\"initialize the midi module\n    pygame.midi.init(): return None\n    Call the initialisation function before using the midi module.\n    It is safe to call this more than once.\n    \"\"\"\n    global _init, _pypm\n    if not _init:\n        import pygame.pypm",
        "detail": "pygame-1.9.6.src_py.midi",
        "documentation": {}
    },
    {
        "label": "getResource",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.pkgdata",
        "description": "pygame-1.9.6.src_py.pkgdata",
        "peekOfCode": "def getResource(identifier, pkgname=__name__):\n    \"\"\"\n    Acquire a readable object for a given package name and identifier.\n    An IOError will be raised if the resource can not be found.\n    For example:\n        mydata = getResource('mypkgdata.jpg').read()\n    Note that the package name must be fully qualified, if given, such\n    that it would be found in sys.modules.\n    In some cases, getResource will return a real file object.  In that\n    case, it may be useful to use its name attribute to get the path",
        "detail": "pygame-1.9.6.src_py.pkgdata",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.pkgdata",
        "description": "pygame-1.9.6.src_py.pkgdata",
        "peekOfCode": "__all__ = ['getResource']\nimport sys\nimport os\nfrom pygame.compat import get_BytesIO\nBytesIO = get_BytesIO()\ntry:\n    from pkg_resources import resource_stream, resource_exists\nexcept ImportError:\n    def resource_exists(package_or_requirement, resource_name):\n        return False",
        "detail": "pygame-1.9.6.src_py.pkgdata",
        "documentation": {}
    },
    {
        "label": "BytesIO",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.pkgdata",
        "description": "pygame-1.9.6.src_py.pkgdata",
        "peekOfCode": "BytesIO = get_BytesIO()\ntry:\n    from pkg_resources import resource_stream, resource_exists\nexcept ImportError:\n    def resource_exists(package_or_requirement, resource_name):\n        return False\n    def resource_stream(package_of_requirement, resource_name):\n        raise NotImplementedError\ndef getResource(identifier, pkgname=__name__):\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.pkgdata",
        "documentation": {}
    },
    {
        "label": "arra",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sndarray",
        "description": "pygame-1.9.6.src_py.sndarray",
        "peekOfCode": "def array (sound):\n    \"\"\"pygame.sndarray.array(Sound): return array\n    Copy Sound samples into an array.\n    Creates a new array for the sound data and copies the samples. The\n    array will always be in the format returned from\n    pygame.mixer.get_init().\n    \"\"\"\n    return numpysnd.array (sound)\ndef samples (sound):\n    \"\"\"pygame.sndarray.samples(Sound): return array",
        "detail": "pygame-1.9.6.src_py.sndarray",
        "documentation": {}
    },
    {
        "label": "sample",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sndarray",
        "description": "pygame-1.9.6.src_py.sndarray",
        "peekOfCode": "def samples (sound):\n    \"\"\"pygame.sndarray.samples(Sound): return array\n    Reference Sound samples into an array.\n    Creates a new array that directly references the samples in a Sound\n    object. Modifying the array will change the Sound. The array will\n    always be in the format returned from pygame.mixer.get_init().\n    \"\"\"\n    return numpysnd.samples (sound)\ndef make_sound (array):\n    \"\"\"pygame.sndarray.make_sound(array): return Sound",
        "detail": "pygame-1.9.6.src_py.sndarray",
        "documentation": {}
    },
    {
        "label": "make_soun",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sndarray",
        "description": "pygame-1.9.6.src_py.sndarray",
        "peekOfCode": "def make_sound (array):\n    \"\"\"pygame.sndarray.make_sound(array): return Sound\n    Convert an array into a Sound object.\n    Create a new playable Sound object from an array. The mixer module\n    must be initialized and the array format must be similar to the mixer\n    audio format.\n    \"\"\"\n    return numpysnd.make_sound (array)\ndef use_arraytype (arraytype):\n    \"\"\"pygame.sndarray.use_arraytype (arraytype): return None",
        "detail": "pygame-1.9.6.src_py.sndarray",
        "documentation": {}
    },
    {
        "label": "use_arraytyp",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sndarray",
        "description": "pygame-1.9.6.src_py.sndarray",
        "peekOfCode": "def use_arraytype (arraytype):\n    \"\"\"pygame.sndarray.use_arraytype (arraytype): return None\n    DEPRECATED - only numpy arrays are now supported.\n    \"\"\"\n    arraytype = arraytype.lower ()\n    if arraytype != 'numpy':\n        raise ValueError(\"invalid array type\")\ndef get_arraytype ():\n    \"\"\"pygame.sndarray.get_arraytype (): return str\n    DEPRECATED - only numpy arrays are now supported.",
        "detail": "pygame-1.9.6.src_py.sndarray",
        "documentation": {}
    },
    {
        "label": "get_arraytyp",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sndarray",
        "description": "pygame-1.9.6.src_py.sndarray",
        "peekOfCode": "def get_arraytype ():\n    \"\"\"pygame.sndarray.get_arraytype (): return str\n    DEPRECATED - only numpy arrays are now supported.\n    \"\"\"\n    return 'numpy'\ndef get_arraytypes ():\n    \"\"\"pygame.sndarray.get_arraytypes (): return tuple\n    DEPRECATED - only numpy arrays are now supported.\n    \"\"\"\n    return ('numpy',)",
        "detail": "pygame-1.9.6.src_py.sndarray",
        "documentation": {}
    },
    {
        "label": "get_arraytype",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sndarray",
        "description": "pygame-1.9.6.src_py.sndarray",
        "peekOfCode": "def get_arraytypes ():\n    \"\"\"pygame.sndarray.get_arraytypes (): return tuple\n    DEPRECATED - only numpy arrays are now supported.\n    \"\"\"\n    return ('numpy',)",
        "detail": "pygame-1.9.6.src_py.sndarray",
        "documentation": {}
    },
    {
        "label": "Sprite",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "class Sprite(object):\n    \"\"\"simple base class for visible game objects\n    pygame.sprite.Sprite(*groups): return Sprite\n    The base class for visible game objects. Derived classes will want to\n    override the Sprite.update() method and assign Sprite.image and Sprite.rect\n    attributes.  The initializer can accept any number of Group instances that\n    the Sprite will become a member of.\n    When subclassing the Sprite class, be sure to call the base initializer\n    before adding the Sprite to Groups.\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "DirtySprite",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "class DirtySprite(Sprite):\n    \"\"\"a more featureful subclass of Sprite with more attributes\n    pygame.sprite.DirtySprite(*groups): return DirtySprite\n    Extra DirtySprite attributes with their default values:\n    dirty = 1\n        If set to 1, it is repainted and then set to 0 again.\n        If set to 2, it is always dirty (repainted each frame;\n        flag is not reset).\n        If set to 0, it is not dirty and therefore not repainted again.\n    blendmode = 0",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "AbstractGroup",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "class AbstractGroup(object):\n    \"\"\"base class for containers of sprites\n    AbstractGroup does everything needed to behave as a normal group. You can\n    easily subclass a new group class from this or the other groups below if\n    you want to add more features.\n    Any AbstractGroup-derived sprite groups act like sequences and support\n    iteration, len, and so on.\n    \"\"\"\n    # dummy val to identify sprite groups, and avoid infinite recursion\n    _spritegroup = True",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "Group",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "class Group(AbstractGroup):\n    \"\"\"container class for many Sprites\n    pygame.sprite.Group(*sprites): return Group\n    A simple container for Sprite objects. This class can be subclassed to\n    create containers with more specific behaviors. The constructor takes any\n    number of Sprite arguments to add to the Group. The group supports the\n    following standard Python operations:\n        in      test if a Sprite is contained\n        len     the number of Sprites contained\n        bool    test if any Sprites are contained",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "RenderUpdates",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "class RenderUpdates(Group):\n    \"\"\"Group class that tracks dirty updates\n    pygame.sprite.RenderUpdates(*sprites): return RenderUpdates\n    This class is derived from pygame.sprite.Group(). It has an enhanced draw\n    method that tracks the changed areas of the screen.\n    \"\"\"\n    def draw(self, surface):\n       spritedict = self.spritedict\n       surface_blit = surface.blit\n       dirty = self.lostsprites",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "OrderedUpdates",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "class OrderedUpdates(RenderUpdates):\n    \"\"\"RenderUpdates class that draws Sprites in order of addition\n    pygame.sprite.OrderedUpdates(*spites): return OrderedUpdates\n    This class derives from pygame.sprite.RenderUpdates().  It maintains\n    the order in which the Sprites were added to the Group for rendering.\n    This makes adding and removing Sprites from the Group a little\n    slower than regular Groups.\n    \"\"\"\n    def __init__(self, *sprites):\n        self._spritelist = []",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "LayeredUpdates",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "class LayeredUpdates(AbstractGroup):\n    \"\"\"LayeredUpdates Group handles layers, which are drawn like OrderedUpdates\n    pygame.sprite.LayeredUpdates(*spites, **kwargs): return LayeredUpdates\n    This group is fully compatible with pygame.sprite.Sprite.\n    New in pygame 1.8.0\n    \"\"\"\n    _init_rect = Rect(0, 0, 0, 0)\n    def __init__(self, *sprites, **kwargs):\n        \"\"\"initialize an instance of LayeredUpdates with the given attributes\n        You can set the default layer through kwargs using 'default_layer'",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "LayeredDirty",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "class LayeredDirty(LayeredUpdates):\n    \"\"\"LayeredDirty Group is for DirtySprites; subclasses LayeredUpdates\n    pygame.sprite.LayeredDirty(*spites, **kwargs): return LayeredDirty\n    This group requires pygame.sprite.DirtySprite or any sprite that\n    has the following attributes:\n        image, rect, dirty, visible, blendmode (see doc of DirtySprite).\n    It uses the dirty flag technique and is therefore faster than\n    pygame.sprite.RenderUpdates if you have many static sprites.  It\n    also switches automatically between dirty rect updating and full\n    screen drawing, so you do no have to worry which would be faster.",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "GroupSingle",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "class GroupSingle(AbstractGroup):\n    \"\"\"A group container that holds a single most recent item.\n    This class works just like a regular group, but it only keeps a single\n    sprite in the group. Whatever sprite has been added to the group last will\n    be the only sprite in the group.\n    You can access its one sprite as the .sprite attribute.  Assigning to this\n    attribute will properly remove the old sprite and then add the new one.\n    \"\"\"\n    def __init__(self, sprite=None):\n        AbstractGroup.__init__(self)",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "collide_rect_ratio",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "class collide_rect_ratio:\n    \"\"\"A callable class that checks for collisions using scaled rects\n    The class checks for collisions between two sprites using a scaled version\n    of the sprites' rects. Is created with a ratio; the instance is then\n    intended to be passed as a collided callback function to the *collide\n    functions.\n    New in pygame 1.8.1\n    \"\"\"\n    def __init__(self, ratio):\n        \"\"\"create a new collide_rect_ratio callable",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "collide_circle_ratio",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "class collide_circle_ratio(object):\n    \"\"\"detect collision between two sprites using scaled circles\n    This callable class checks for collisions between two sprites using a\n    scaled version of a sprite's radius. It is created with a ratio as the\n    argument to the constructor. The instance is then intended to be passed as\n    a collided callback function to the *collide functions.\n    New in pygame 1.8.1\n    \"\"\"\n    def __init__(self, ratio):\n        \"\"\"creates a new collide_circle_ratio callable instance",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "collide_rect",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "def collide_rect(left, right):\n    \"\"\"collision detection between two sprites, using rects.\n    pygame.sprite.collide_rect(left, right): return bool\n    Tests for collision between two sprites. Uses the pygame.Rect colliderect\n    function to calculate the collision. It is intended to be passed as a\n    collided callback function to the *collide functions. Sprites must have\n    \"rect\" attributes.\n    New in pygame 1.8.0\n    \"\"\"\n    return left.rect.colliderect(right.rect)",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "collide_circle",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "def collide_circle(left, right):\n    \"\"\"detect collision between two sprites using circles\n    pygame.sprite.collide_circle(left, right): return bool\n    Tests for collision between two sprites by testing whether two circles\n    centered on the sprites overlap. If the sprites have a \"radius\" attribute,\n    then that radius is used to create the circle; otherwise, a circle is\n    created that is big enough to completely enclose the sprite's rect as\n    given by the \"rect\" attribute. This function is intended to be passed as\n    a collided callback function to the *collide functions. Sprites must have a\n    \"rect\" and an optional \"radius\" attribute.",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "collide_mask",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "def collide_mask(left, right):\n    \"\"\"collision detection between two sprites, using masks.\n    pygame.sprite.collide_mask(SpriteLeft, SpriteRight): bool\n    Tests for collision between two sprites by testing if their bitmasks\n    overlap. If the sprites have a \"mask\" attribute, that is used as the mask;\n    otherwise, a mask is created from the sprite image. Intended to be passed\n    as a collided callback function to the *collide functions. Sprites must\n    have a \"rect\" and an optional \"mask\" attribute.\n    New in pygame 1.8.0\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "spritecollide",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "def spritecollide(sprite, group, dokill, collided=None):\n    \"\"\"find Sprites in a Group that intersect another Sprite\n    pygame.sprite.spritecollide(sprite, group, dokill, collided=None):\n        return Sprite_list\n    Return a list containing all Sprites in a Group that intersect with another\n    Sprite. Intersection is determined by comparing the Sprite.rect attribute\n    of each Sprite.\n    The dokill argument is a bool. If set to True, all Sprites that collide\n    will be removed from the Group.\n    The collided argument is a callback function used to calculate if two",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "groupcollide",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "def groupcollide(groupa, groupb, dokilla, dokillb, collided=None):\n    \"\"\"detect collision between a group and another group\n    pygame.sprite.groupcollide(groupa, groupb, dokilla, dokillb):\n        return dict\n    Given two groups, this will find the intersections between all sprites in\n    each group. It returns a dictionary of all sprites in the first group that\n    collide. The value for each item in the dictionary is a list of the sprites\n    in the second group it collides with. The two dokill arguments control if\n    the sprites from either group will be automatically removed from all\n    groups. Collided is a callback function used to calculate if two sprites",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "spritecollideany",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "def spritecollideany(sprite, group, collided=None):\n    \"\"\"finds any sprites in a group that collide with the given sprite\n    pygame.sprite.spritecollideany(sprite, group): return sprite\n    Given a sprite and a group of sprites, this will return return any single\n    sprite that collides with with the given sprite. If there are no\n    collisions, then this returns None.\n    If you don't need all the features of the spritecollide function, this\n    function will be a bit quicker.\n    Collided is a callback function used to calculate if two sprites are\n    colliding. It should take two sprites as values and return a bool value",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "RenderPlain",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "RenderPlain = Group\nRenderClear = Group\nclass RenderUpdates(Group):\n    \"\"\"Group class that tracks dirty updates\n    pygame.sprite.RenderUpdates(*sprites): return RenderUpdates\n    This class is derived from pygame.sprite.Group(). It has an enhanced draw\n    method that tracks the changed areas of the screen.\n    \"\"\"\n    def draw(self, surface):\n       spritedict = self.spritedict",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "RenderClear",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.sprite",
        "description": "pygame-1.9.6.src_py.sprite",
        "peekOfCode": "RenderClear = Group\nclass RenderUpdates(Group):\n    \"\"\"Group class that tracks dirty updates\n    pygame.sprite.RenderUpdates(*sprites): return RenderUpdates\n    This class is derived from pygame.sprite.Group(). It has an enhanced draw\n    method that tracks the changed areas of the screen.\n    \"\"\"\n    def draw(self, surface):\n       spritedict = self.spritedict\n       surface_blit = surface.blit",
        "detail": "pygame-1.9.6.src_py.sprite",
        "documentation": {}
    },
    {
        "label": "blit_arra",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def blit_array (surface, array):\n    \"\"\"pygame.surfarray.blit_array(Surface, array): return None\n    Blit directly from a array values.\n    Directly copy values from an array into a Surface. This is faster than\n    converting the array into a Surface and blitting. The array must be the\n    same dimensions as the Surface and will completely replace all pixel\n    values. Only integer, ascii character and record arrays are accepted.\n    This function will temporarily lock the Surface as the new values are\n    copied.\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "array2",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def array2d (surface):\n    \"\"\"pygame.surfarray.array2d (Surface): return array\n    Copy pixels into a 2d array.\n    Copy the pixels from a Surface into a 2D array. The bit depth of the\n    surface will control the size of the integer values, and will work\n    for any type of pixel format.\n    This function will temporarily lock the Surface as pixels are copied\n    (see the Surface.lock - lock the Surface memory for pixel access\n    method).\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "pixels2",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def pixels2d (surface):\n    \"\"\"pygame.surfarray.pixels2d (Surface): return array\n    Reference pixels into a 2d array.\n    Create a new 2D array that directly references the pixel values in a\n    Surface. Any changes to the array will affect the pixels in the\n    Surface. This is a fast operation since no data is copied.\n    Pixels from a 24-bit Surface cannot be referenced, but all other\n    Surface bit depths can.\n    The Surface this references will remain locked for the lifetime of\n    the array (see the Surface.lock - lock the Surface memory for pixel",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "array3",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def array3d (surface):\n    \"\"\"pygame.surfarray.array3d (Surface): return array\n    Copy pixels into a 3d array.\n    Copy the pixels from a Surface into a 3D array. The bit depth of the\n    surface will control the size of the integer values, and will work\n    for any type of pixel format.\n    This function will temporarily lock the Surface as pixels are copied\n    (see the Surface.lock - lock the Surface memory for pixel access\n    method).\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "pixels3",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def pixels3d (surface):\n    \"\"\"pygame.surfarray.pixels3d (Surface): return array\n    Reference pixels into a 3d array.\n    Create a new 3D array that directly references the pixel values in a\n    Surface. Any changes to the array will affect the pixels in the\n    Surface. This is a fast operation since no data is copied.\n    This will only work on Surfaces that have 24-bit or 32-bit\n    formats. Lower pixel formats cannot be referenced.\n    The Surface this references will remain locked for the lifetime of\n    the array (see the Surface.lock - lock the Surface memory for pixel",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "array_alph",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def array_alpha (surface):\n    \"\"\"pygame.surfarray.array_alpha (Surface): return array\n    Copy pixel alphas into a 2d array.\n    Copy the pixel alpha values (degree of transparency) from a Surface\n    into a 2D array. This will work for any type of Surface\n    format. Surfaces without a pixel alpha will return an array with all\n    opaque values.\n    This function will temporarily lock the Surface as pixels are copied\n    (see the Surface.lock - lock the Surface memory for pixel access\n    method).",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "pixels_alph",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def pixels_alpha (surface):\n    \"\"\"pygame.surfarray.pixels_alpha (Surface): return array\n    Reference pixel alphas into a 2d array.\n    Create a new 2D array that directly references the alpha values\n    (degree of transparency) in a Surface. Any changes to the array will\n    affect the pixels in the Surface. This is a fast operation since no\n    data is copied.\n    This can only work on 32-bit Surfaces with a per-pixel alpha value.\n    The Surface this array references will remain locked for the\n    lifetime of the array.",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "pixels_re",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def pixels_red (surface):\n    \"\"\"pygame.surfarray.pixels_red (Surface): return array\n    Reference pixel red into a 2d array.\n    Create a new 2D array that directly references the red values\n    in a Surface. Any changes to the array will affect the pixels\n    in the Surface. This is a fast operation since no data is copied.\n    This can only work on 24-bit or 32-bit Surfaces.\n    The Surface this array references will remain locked for the\n    lifetime of the array.\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "pixels_gree",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def pixels_green (surface):\n    \"\"\"pygame.surfarray.pixels_green (Surface): return array\n    Reference pixel green into a 2d array.\n    Create a new 2D array that directly references the green values\n    in a Surface. Any changes to the array will affect the pixels\n    in the Surface. This is a fast operation since no data is copied.\n    This can only work on 24-bit or 32-bit Surfaces.\n    The Surface this array references will remain locked for the\n    lifetime of the array.\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "pixels_blu",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def pixels_blue (surface):\n    \"\"\"pygame.surfarray.pixels_blue (Surface): return array\n    Reference pixel blue into a 2d array.\n    Create a new 2D array that directly references the blue values\n    in a Surface. Any changes to the array will affect the pixels\n    in the Surface. This is a fast operation since no data is copied.\n    This can only work on 24-bit or 32-bit Surfaces.\n    The Surface this array references will remain locked for the\n    lifetime of the array.\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "array_colorke",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def array_colorkey (surface):\n    \"\"\"pygame.surfarray.array_colorkey (Surface): return array\n    Copy the colorkey values into a 2d array.\n    Create a new array with the colorkey transparency value from each\n    pixel. If the pixel matches the colorkey it will be fully\n    tranparent; otherwise it will be fully opaque.\n    This will work on any type of Surface format. If the image has no\n    colorkey a solid opaque array will be returned.\n    This function will temporarily lock the Surface as pixels are\n    copied.",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "make_surface",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def make_surface(array):\n    \"\"\"pygame.surfarray.make_surface (array): return Surface\n    Copy an array to a new surface.\n    Create a new Surface that best resembles the data and format on the\n    array. The array can be 2D or 3D with any sized integer values.\n    \"\"\"\n    return numpysf.make_surface (array)\ndef map_array (surface, array):\n    \"\"\"pygame.surfarray.map_array (Surface, array3d): return array2d\n    Map a 3D array into a 2D array.",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "map_arra",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def map_array (surface, array):\n    \"\"\"pygame.surfarray.map_array (Surface, array3d): return array2d\n    Map a 3D array into a 2D array.\n    Convert a 3D array into a 2D array. This will use the given Surface\n    format to control the conversion. Palette surface formats are not\n    supported.\n    \"\"\"\n    return numpysf.map_array (surface, array)\ndef use_arraytype (arraytype):\n    \"\"\"pygame.surfarray.use_arraytype (arraytype): return None",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "use_arraytyp",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def use_arraytype (arraytype):\n    \"\"\"pygame.surfarray.use_arraytype (arraytype): return None\n    DEPRECATED - only numpy arrays are now supported.\n    \"\"\"\n    arraytype = arraytype.lower ()\n    if arraytype != \"numpy\":\n        raise ValueError(\"invalid array type\")\ndef get_arraytype ():\n    \"\"\"pygame.surfarray.get_arraytype (): return str\n    DEPRECATED - only numpy arrays are now supported.",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "get_arraytyp",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def get_arraytype ():\n    \"\"\"pygame.surfarray.get_arraytype (): return str\n    DEPRECATED - only numpy arrays are now supported.\n    \"\"\"\n    return \"numpy\"\ndef get_arraytypes ():\n    \"\"\"pygame.surfarray.get_arraytypes (): return tuple\n    DEPRECATED - only numpy arrays are now supported.\n    \"\"\"\n    return (\"numpy\",)",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "get_arraytype",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.surfarray",
        "description": "pygame-1.9.6.src_py.surfarray",
        "peekOfCode": "def get_arraytypes ():\n    \"\"\"pygame.surfarray.get_arraytypes (): return tuple\n    DEPRECATED - only numpy arrays are now supported.\n    \"\"\"\n    return (\"numpy\",)",
        "detail": "pygame-1.9.6.src_py.surfarray",
        "documentation": {}
    },
    {
        "label": "initsysfonts_win32",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "def initsysfonts_win32():\n    \"\"\"initialize fonts dictionary on Windows\"\"\"\n    fontdir = join(os.environ.get('WINDIR', 'C:\\\\Windows'), 'Fonts')\n    TrueType_suffix = '(TrueType)'\n    mods = ('demibold', 'narrow', 'light', 'unicode', 'bt', 'mt')\n    fonts = {}\n    # add fonts entered in the registry\n    # find valid registry keys containing font information.\n    # http://docs.python.org/lib/module-sys.html\n    # 0 (VER_PLATFORM_WIN32s)          Win32s on Windows 3.1",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "initsysfonts_darwin",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "def initsysfonts_darwin():\n    \"\"\" Read the fonts on MacOS, and OS X.\n    \"\"\"\n    # if the X11 binary exists... try and use that.\n    #  Not likely to be there on pre 10.4.x ... or MacOS 10.10+\n    if exists('/usr/X11/bin/fc-list'):\n        fonts = initsysfonts_unix('/usr/X11/bin/fc-list')\n    # This fc-list path will work with the X11 from the OS X 10.3 installation\n    # disc\n    elif exists('/usr/X11R6/bin/fc-list'):",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "initsysfonts_unix",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "def initsysfonts_unix(path=\"fc-list\"):\n    \"\"\"use the fc-list from fontconfig to get a list of fonts\"\"\"\n    fonts = {}\n    try:\n        # note, we capture stderr so if fc-list isn't there to stop stderr\n        # printing.\n        flout, flerr = subprocess.Popen('%s : file family style' % path, shell=True,\n                                        stdout=subprocess.PIPE, stderr=subprocess.PIPE,\n                                        close_fds=True).communicate()\n    except Exception:",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "create_aliases",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "def create_aliases():\n    \"\"\"map common fonts that are absent from the system to similar fonts that are installed in the system\"\"\"\n    alias_groups = (\n        ('monospace', 'misc-fixed', 'courier', 'couriernew', 'console',\n         'fixed', 'mono', 'freemono', 'bitstreamverasansmono',\n         'verasansmono', 'monotype', 'lucidaconsole'),\n        ('sans', 'arial', 'helvetica', 'swiss', 'freesans',\n         'bitstreamverasans', 'verasans', 'verdana', 'tahoma'),\n        ('serif', 'times', 'freeserif', 'bitstreamveraserif', 'roman',\n         'timesroman', 'timesnewroman', 'dutch', 'veraserif',",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "initsysfonts",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "def initsysfonts():\n    if sys.platform == 'win32':\n        fonts = initsysfonts_win32()\n    elif sys.platform == 'darwin':\n        fonts = initsysfonts_darwin()\n    else:\n        fonts = initsysfonts_unix()\n    Sysfonts.update(fonts)\n    create_aliases()\n    if not Sysfonts:  # dummy so we don't try to reinit",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "font_constructor",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "def font_constructor(fontpath, size, bold, italic):\n    import pygame.font\n    font = pygame.font.Font(fontpath, size)\n    if bold:\n        font.set_bold(1)\n    if italic:\n        font.set_italic(1)\n    return font\n# the exported functions\ndef SysFont(name, size, bold=False, italic=False, constructor=None):",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "SysFont",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "def SysFont(name, size, bold=False, italic=False, constructor=None):\n    \"\"\"pygame.font.SysFont(name, size, bold=False, italic=False, constructor=None) -> Font\n       create a pygame Font from system font resources\n       This will search the system fonts for the given font\n       name. You can also enable bold or italic styles, and\n       the appropriate system font will be selected if available.\n       This will always return a valid Font object, and will\n       fallback on the builtin pygame font if the given font\n       is not found.\n       Name can also be a comma separated list of names, in",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "get_fonts",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "def get_fonts():\n    \"\"\"pygame.font.get_fonts() -> list\n       get a list of system font names\n       Returns the list of all found system fonts. Note that\n       the names of the fonts will be all lowercase with spaces\n       removed. This is how pygame internally stores the font\n       names for matching.\n    \"\"\"\n    if not Sysfonts:\n        initsysfonts()",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "match_font",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "def match_font(name, bold=0, italic=0):\n    \"\"\"pygame.font.match_font(name, bold=0, italic=0) -> name\n       find the filename for the named system font\n       This performs the same font search as the SysFont()\n       function, only it returns the path to the TTF file\n       that would be loaded. The font name can be a comma\n       separated list of font names to try.\n       If no match is found, None is returned.\n    \"\"\"\n    if not Sysfonts:",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "OpenType_extensions",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "OpenType_extensions = frozenset(('.ttf', '.ttc', '.otf'))\nSysfonts = {}\nSysalias = {}\n# Python 3 compatibility\nif PY_MAJOR_VERSION >= 3:\n    def toascii(raw):\n        \"\"\"convert bytes to ASCII-only string\"\"\"\n        return raw.decode('ascii', 'ignore')\n    if os.name == 'nt':\n        import winreg as _winreg",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "Sysfonts",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "Sysfonts = {}\nSysalias = {}\n# Python 3 compatibility\nif PY_MAJOR_VERSION >= 3:\n    def toascii(raw):\n        \"\"\"convert bytes to ASCII-only string\"\"\"\n        return raw.decode('ascii', 'ignore')\n    if os.name == 'nt':\n        import winreg as _winreg\n    else:",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "Sysalias",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.sysfont",
        "description": "pygame-1.9.6.src_py.sysfont",
        "peekOfCode": "Sysalias = {}\n# Python 3 compatibility\nif PY_MAJOR_VERSION >= 3:\n    def toascii(raw):\n        \"\"\"convert bytes to ASCII-only string\"\"\"\n        return raw.decode('ascii', 'ignore')\n    if os.name == 'nt':\n        import winreg as _winreg\n    else:\n        import subprocess",
        "detail": "pygame-1.9.6.src_py.sysfont",
        "documentation": {}
    },
    {
        "label": "PygameVersion",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py.version",
        "description": "pygame-1.9.6.src_py.version",
        "peekOfCode": "class PygameVersion(tuple):\n    __slots__ = ()\n    fields = 'major', 'minor', 'patch'\n    def __new__(cls, major, minor, patch):\n        return tuple.__new__(cls, (major, minor, patch))\n    def __repr__(self):\n        fields = ('{}={}'.format(fld, val) for fld, val in zip(self.fields, self))\n        return '{}({})'.format(str(self.__class__.__name__), ', '.join(fields))\n    def __str__(self):\n        return '{}.{}.{}'.format(*self)",
        "detail": "pygame-1.9.6.src_py.version",
        "documentation": {}
    },
    {
        "label": "ver",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.version",
        "description": "pygame-1.9.6.src_py.version",
        "peekOfCode": "ver = \"1.9.6\"\nvernum = PygameVersion(1, 9, 6)\nrev = \"\"",
        "detail": "pygame-1.9.6.src_py.version",
        "documentation": {}
    },
    {
        "label": "vernum",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.version",
        "description": "pygame-1.9.6.src_py.version",
        "peekOfCode": "vernum = PygameVersion(1, 9, 6)\nrev = \"\"",
        "detail": "pygame-1.9.6.src_py.version",
        "documentation": {}
    },
    {
        "label": "rev",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py.version",
        "description": "pygame-1.9.6.src_py.version",
        "peekOfCode": "rev = \"\"",
        "detail": "pygame-1.9.6.src_py.version",
        "documentation": {}
    },
    {
        "label": "Camera",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "description": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "peekOfCode": "class Camera:\n    def __init__(self, device = 0, size = (640,480), mode = \"RGB\"):\n        \"\"\"\n        \"\"\"\n        self.camera = highgui.cvCreateCameraCapture(device)\n        if not self.camera:\n            raise ValueError (\"Could not open camera.  Sorry.\")\n    def set_controls(self, **kwargs):\n        \"\"\"\n        \"\"\"",
        "detail": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "documentation": {}
    },
    {
        "label": "list_cameras",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "description": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "peekOfCode": "def list_cameras():\n    \"\"\"\n    \"\"\"\n    # -1 for opencv means get any of them.\n    return [-1]\ndef init():\n    pass\ndef quit():\n    pass\nclass Camera:",
        "detail": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "description": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "peekOfCode": "def init():\n    pass\ndef quit():\n    pass\nclass Camera:\n    def __init__(self, device = 0, size = (640,480), mode = \"RGB\"):\n        \"\"\"\n        \"\"\"\n        self.camera = highgui.cvCreateCameraCapture(device)\n        if not self.camera:",
        "detail": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "documentation": {}
    },
    {
        "label": "quit",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "description": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "peekOfCode": "def quit():\n    pass\nclass Camera:\n    def __init__(self, device = 0, size = (640,480), mode = \"RGB\"):\n        \"\"\"\n        \"\"\"\n        self.camera = highgui.cvCreateCameraCapture(device)\n        if not self.camera:\n            raise ValueError (\"Could not open camera.  Sorry.\")\n    def set_controls(self, **kwargs):",
        "detail": "pygame-1.9.6.src_py._camera_opencv_highgui",
        "documentation": {}
    },
    {
        "label": "Camera",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py._camera_vidcapture",
        "description": "pygame-1.9.6.src_py._camera_vidcapture",
        "peekOfCode": "class Camera:\n    def __init__(self, device =0,\n                       size = (640,480),\n                       mode = \"RGB\",\n                       show_video_window=0):\n        \"\"\"device:  VideoCapture enumerates the available video capture devices\n                    on your system.  If you have more than one device, specify\n                    the desired one here.  The device number starts from 0.\n           show_video_window: 0 ... do not display a video window (the default)\n                              1 ... display a video window",
        "detail": "pygame-1.9.6.src_py._camera_vidcapture",
        "documentation": {}
    },
    {
        "label": "list_cameras",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._camera_vidcapture",
        "description": "pygame-1.9.6.src_py._camera_vidcapture",
        "peekOfCode": "def list_cameras():\n    \"\"\"Always only lists one camera.\n    Functionality not supported in videocapture module.\n    \"\"\"\n    return [0]\n    # this just cycles through all the cameras trying to open them\n    cameras = []\n    for x in range(256):\n        try:\n            c = Camera(x)",
        "detail": "pygame-1.9.6.src_py._camera_vidcapture",
        "documentation": {}
    },
    {
        "label": "init",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._camera_vidcapture",
        "description": "pygame-1.9.6.src_py._camera_vidcapture",
        "peekOfCode": "def init():\n    global vidcap\n    try:\n        import vidcap as vc\n    except ImportError:\n        from VideoCapture import vidcap as vc\n    vidcap = vc\ndef quit():\n    global vidcap\n    pass",
        "detail": "pygame-1.9.6.src_py._camera_vidcapture",
        "documentation": {}
    },
    {
        "label": "quit",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._camera_vidcapture",
        "description": "pygame-1.9.6.src_py._camera_vidcapture",
        "peekOfCode": "def quit():\n    global vidcap\n    pass\n    del vidcap\nclass Camera:\n    def __init__(self, device =0,\n                       size = (640,480),\n                       mode = \"RGB\",\n                       show_video_window=0):\n        \"\"\"device:  VideoCapture enumerates the available video capture devices",
        "detail": "pygame-1.9.6.src_py._camera_vidcapture",
        "documentation": {}
    },
    {
        "label": "Movie",
        "kind": 6,
        "importPath": "pygame-1.9.6.src_py._dummybackend",
        "description": "pygame-1.9.6.src_py._dummybackend",
        "peekOfCode": "class Movie:\n    def __init__(self, filename, surface=None):\n        self.filename=filename\n        self.surface = surface\n        self.process = None\n        self.loops=0\n        self.playing = False\n        self.paused  = False\n        self._backend = \"DUMMY\"\n        self.width=0",
        "detail": "pygame-1.9.6.src_py._dummybackend",
        "documentation": {}
    },
    {
        "label": "arra",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysndarray",
        "description": "pygame-1.9.6.src_py._numpysndarray",
        "peekOfCode": "def array (sound):\n    \"\"\"pygame._numpysndarray.array(Sound): return array\n    Copy Sound samples into an array.\n    Creates a new array for the sound data and copies the samples. The\n    array will always be in the format returned from\n    pygame.mixer.get_init().\n    \"\"\"\n    return numpy.array (sound, copy=True)\ndef samples (sound):\n    \"\"\"pygame._numpysndarray.samples(Sound): return array",
        "detail": "pygame-1.9.6.src_py._numpysndarray",
        "documentation": {}
    },
    {
        "label": "sample",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysndarray",
        "description": "pygame-1.9.6.src_py._numpysndarray",
        "peekOfCode": "def samples (sound):\n    \"\"\"pygame._numpysndarray.samples(Sound): return array\n    Reference Sound samples into an array.\n    Creates a new array that directly references the samples in a Sound\n    object. Modifying the array will change the Sound. The array will\n    always be in the format returned from pygame.mixer.get_init().\n    \"\"\"\n    return numpy.array (sound, copy=False)\ndef make_sound (array):\n    \"\"\"pygame._numpysndarray.make_sound(array): return Sound",
        "detail": "pygame-1.9.6.src_py._numpysndarray",
        "documentation": {}
    },
    {
        "label": "make_soun",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysndarray",
        "description": "pygame-1.9.6.src_py._numpysndarray",
        "peekOfCode": "def make_sound (array):\n    \"\"\"pygame._numpysndarray.make_sound(array): return Sound\n    Convert an array into a Sound object.\n    Create a new playable Sound object from an array. The mixer module\n    must be initialized and the array format must be similar to the mixer\n    audio format.\n    \"\"\"\n    return mixer.Sound (array=array)",
        "detail": "pygame-1.9.6.src_py._numpysndarray",
        "documentation": {}
    },
    {
        "label": "blit_arra",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def blit_array (surface, array):\n    \"\"\"pygame.surfarray.blit_array(Surface, array): return None\n    Blit directly from a array values.\n    Directly copy values from an array into a Surface. This is faster than\n    converting the array into a Surface and blitting. The array must be the\n    same dimensions as the Surface and will completely replace all pixel\n    values. Only integer, ascii character and record arrays are accepted.\n    This function will temporarily lock the Surface as the new values are\n    copied.\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "make_surface",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def make_surface(array):\n    \"\"\"pygame.surfarray.make_surface (array): return Surface\n    Copy an array to a new surface.\n    Create a new Surface that best resembles the data and format on the\n    array. The array can be 2D or 3D with any sized integer values.\n    \"\"\" \n    if isinstance(array, numpy_ndarray) and array.dtype in numpy_floats:\n        array = array.round(0).astype(numpy_uint32)\n    return pix_make_surface (array)\ndef array2d(surface):",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "array2d",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def array2d(surface):\n    \"\"\"pygame.numpyarray.array2d(Surface): return array\n    copy pixels into a 2d array\n    Copy the pixels from a Surface into a 2D array. The bit depth of the\n    surface will control the size of the integer values, and will work\n    for any type of pixel format.\n    This function will temporarily lock the Surface as pixels are copied\n    (see the Surface.lock - lock the Surface memory for pixel access\n    method).\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "pixels2d",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def pixels2d(surface):\n    \"\"\"pygame.numpyarray.pixels2d(Surface): return array\n    reference pixels into a 2d array\n    Create a new 2D array that directly references the pixel values in a\n    Surface. Any changes to the array will affect the pixels in the\n    Surface. This is a fast operation since no data is copied.\n    Pixels from a 24-bit Surface cannot be referenced, but all other\n    Surface bit depths can.\n    The Surface this references will remain locked for the lifetime of\n    the array (see the Surface.lock - lock the Surface memory for pixel",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "array3d",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def array3d(surface):\n    \"\"\"pygame.numpyarray.array3d(Surface): return array\n    copy pixels into a 3d array\n    Copy the pixels from a Surface into a 3D array. The bit depth of the\n    surface will control the size of the integer values, and will work\n    for any type of pixel format.\n    This function will temporarily lock the Surface as pixels are copied\n    (see the Surface.lock - lock the Surface memory for pixel access\n    method).\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "pixels3",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def pixels3d (surface):\n    \"\"\"pygame.numpyarray.pixels3d(Surface): return array\n    reference pixels into a 3d array\n    Create a new 3D array that directly references the pixel values in a\n    Surface. Any changes to the array will affect the pixels in the\n    Surface. This is a fast operation since no data is copied.\n    This will only work on Surfaces that have 24-bit or 32-bit\n    formats. Lower pixel formats cannot be referenced.\n    The Surface this references will remain locked for the lifetime of\n    the array (see the Surface.lock - lock the Surface memory for pixel",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "array_alpha",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def array_alpha(surface):\n    \"\"\"pygame.numpyarray.array_alpha(Surface): return array\n    copy pixel alphas into a 2d array\n    Copy the pixel alpha values (degree of transparency) from a Surface\n    into a 2D array. This will work for any type of Surface\n    format. Surfaces without a pixel alpha will return an array with all\n    opaque values.\n    This function will temporarily lock the Surface as pixels are copied\n    (see the Surface.lock - lock the Surface memory for pixel access\n    method).",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "pixels_alpha",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def pixels_alpha(surface):\n    \"\"\"pygame.numpyarray.pixels_alpha(Surface): return array\n    reference pixel alphas into a 2d array\n    Create a new 2D array that directly references the alpha values\n    (degree of transparency) in a Surface. Any changes to the array will\n    affect the pixels in the Surface. This is a fast operation since no\n    data is copied.\n    This can only work on 32-bit Surfaces with a per-pixel alpha value.\n    The Surface this array references will remain locked for the\n    lifetime of the array.",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "pixels_red",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def pixels_red(surface):\n    \"\"\"pygame.surfarray.pixels_red(Surface): return array\n    Reference pixel red into a 2d array.\n    Create a new 2D array that directly references the red values\n    in a Surface. Any changes to the array will affect the pixels\n    in the Surface. This is a fast operation since no data is copied.\n    This can only work on 24-bit or 32-bit Surfaces.\n    The Surface this array references will remain locked for the\n    lifetime of the array.\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "array_red",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def array_red(surface):\n    \"\"\"pygame.numpyarray.array_red(Surface): return array\n    copy pixel red into a 2d array\n    Copy the pixel red values from a Surface into a 2D array. This will work\n    for any type of Surface format.\n    This function will temporarily lock the Surface as pixels are copied\n    (see the Surface.lock - lock the Surface memory for pixel access\n    method).\n    \"\"\"\n    size = surface.get_size()",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "pixels_green",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def pixels_green(surface):\n    \"\"\"pygame.surfarray.pixels_green(Surface): return array\n    Reference pixel green into a 2d array.\n    Create a new 2D array that directly references the green values\n    in a Surface. Any changes to the array will affect the pixels\n    in the Surface. This is a fast operation since no data is copied.\n    This can only work on 24-bit or 32-bit Surfaces.\n    The Surface this array references will remain locked for the\n    lifetime of the array.\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "array_green",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def array_green(surface):\n    \"\"\"pygame.numpyarray.array_green(Surface): return array\n    copy pixel green into a 2d array\n    Copy the pixel green values from a Surface into a 2D array. This will work\n    for any type of Surface format.\n    This function will temporarily lock the Surface as pixels are copied\n    (see the Surface.lock - lock the Surface memory for pixel access\n    method).\n    \"\"\"\n    size = surface.get_size()",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "pixels_blu",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def pixels_blue (surface):\n    \"\"\"pygame.surfarray.pixels_blue(Surface): return array\n    Reference pixel blue into a 2d array.\n    Create a new 2D array that directly references the blue values\n    in a Surface. Any changes to the array will affect the pixels\n    in the Surface. This is a fast operation since no data is copied.\n    This can only work on 24-bit or 32-bit Surfaces.\n    The Surface this array references will remain locked for the\n    lifetime of the array.\n    \"\"\"",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "array_blue",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def array_blue(surface):\n    \"\"\"pygame.numpyarray.array_blue(Surface): return array\n    copy pixel blue into a 2d array\n    Copy the pixel blue values from a Surface into a 2D array. This will work\n    for any type of Surface format.\n    This function will temporarily lock the Surface as pixels are copied\n    (see the Surface.lock - lock the Surface memory for pixel access\n    method).\n    \"\"\"\n    size = surface.get_size()",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "array_colorkey",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def array_colorkey(surface):\n    \"\"\"pygame.numpyarray.array_colorkey(Surface): return array\n    copy the colorkey values into a 2d array\n    Create a new array with the colorkey transparency value from each\n    pixel. If the pixel matches the colorkey it will be fully\n    tranparent; otherwise it will be fully opaque.\n    This will work on any type of Surface format. If the image has no\n    colorkey a solid opaque array will be returned.\n    This function will temporarily lock the Surface as pixels are\n    copied.",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "map_array",
        "kind": 2,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "def map_array(surface, array):\n    \"\"\"pygame.numpyarray.map_array(Surface, array3d): return array2d\n    map a 3d array into a 2d array\n    Convert a 3D array into a 2D array. This will use the given Surface\n    format to control the conversion.\n    Note: arrays do not need to be 3D, as long as the minor axis has\n    three elements giving the component colours, any array shape can be\n    used (for example, a single colour can be mapped, or an array of\n    colours). The array shape is limited to eleven dimensions maximum,\n    including the three element minor axis.",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "numpy_floats",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "numpy_floats = []\nfor type_name in \"float float32 float64 float96\".split():\n    if hasattr(numpy, type_name):\n        numpy_floats.append(getattr(numpy, type_name))\n# Pixel sizes corresponding to NumPy supported integer sizes, and therefore\n# permissible for 2D reference arrays.\n_pixel2d_bitdepths = set([8, 16, 32])\ndef blit_array (surface, array):\n    \"\"\"pygame.surfarray.blit_array(Surface, array): return None\n    Blit directly from a array values.",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "_pixel2d_bitdepths",
        "kind": 5,
        "importPath": "pygame-1.9.6.src_py._numpysurfarray",
        "description": "pygame-1.9.6.src_py._numpysurfarray",
        "peekOfCode": "_pixel2d_bitdepths = set([8, 16, 32])\ndef blit_array (surface, array):\n    \"\"\"pygame.surfarray.blit_array(Surface, array): return None\n    Blit directly from a array values.\n    Directly copy values from an array into a Surface. This is faster than\n    converting the array into a Surface and blitting. The array must be the\n    same dimensions as the Surface and will completely replace all pixel\n    values. Only integer, ascii character and record arrays are accepted.\n    This function will temporarily lock the Surface as the new values are\n    copied.",
        "detail": "pygame-1.9.6.src_py._numpysurfarray",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_2_test",
        "description": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_2_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_2_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_3_test",
        "description": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_3_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_3_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_4_test",
        "description": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_4_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_4_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_5_test",
        "description": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_5_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_5_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_6_test",
        "description": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_6_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.all_ok.fake_6_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.all_ok.no_assertions__ret_code_of_1__test",
        "description": "pygame-1.9.6.test.run_tests__tests.all_ok.no_assertions__ret_code_of_1__test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        pass\n    def test_get_mods(self):\n        pass\n    def test_get_pressed(self):\n        pass\n    def test_name(self):\n        pass\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.all_ok.no_assertions__ret_code_of_1__test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.all_ok.zero_tests_test",
        "description": "pygame-1.9.6.test.run_tests__tests.all_ok.zero_tests_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    pass\nif __name__ == '__main__':\n    unittest.main()",
        "detail": "pygame-1.9.6.test.run_tests__tests.all_ok.zero_tests_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.everything.fake_2_test",
        "description": "pygame-1.9.6.test.run_tests__tests.everything.fake_2_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.everything.fake_2_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.everything.incomplete_todo_test",
        "description": "pygame-1.9.6.test.run_tests__tests.everything.incomplete_todo_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def todo_test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def todo_test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.everything.incomplete_todo_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.everything.magic_tag_test",
        "description": "pygame-1.9.6.test.run_tests__tests.everything.magic_tag_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.everything.magic_tag_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.everything.magic_tag_test",
        "description": "pygame-1.9.6.test.run_tests__tests.everything.magic_tag_test",
        "peekOfCode": "__tags__ = ['magic']\nif __name__ == '__main__':\n    import sys\n    import os\n    pkg_dir = (os.path.split(\n                   os.path.split(\n                       os.path.split(\n                           os.path.abspath(__file__))[0])[0])[0])\n    parent_dir, pkg_name = os.path.split(pkg_dir)\n    is_pygame_pkg = (pkg_name == 'tests' and",
        "detail": "pygame-1.9.6.test.run_tests__tests.everything.magic_tag_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.everything.sleep_test",
        "description": "pygame-1.9.6.test.run_tests__tests.everything.sleep_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        stop_time = time.time() + 10.0\n        while time.time() < stop_time:\n            time.sleep(1)\n        self.assertTrue(True)\nif __name__ == '__main__':\n    unittest.main()",
        "detail": "pygame-1.9.6.test.run_tests__tests.everything.sleep_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.exclude.fake_2_test",
        "description": "pygame-1.9.6.test.run_tests__tests.exclude.fake_2_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.exclude.fake_2_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.exclude.invisible_tag_test",
        "description": "pygame-1.9.6.test.run_tests__tests.exclude.invisible_tag_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.exclude.invisible_tag_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.exclude.invisible_tag_test",
        "description": "pygame-1.9.6.test.run_tests__tests.exclude.invisible_tag_test",
        "peekOfCode": "__tags__ = ['invisible']\nif __name__ == '__main__':\n    import sys\n    import os\n    pkg_dir = (os.path.split(\n                   os.path.split(\n                       os.path.split(\n                           os.path.abspath(__file__))[0])[0])[0])\n    parent_dir, pkg_name = os.path.split(pkg_dir)\n    is_pygame_pkg = (pkg_name == 'tests' and",
        "detail": "pygame-1.9.6.test.run_tests__tests.exclude.invisible_tag_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.exclude.magic_tag_test",
        "description": "pygame-1.9.6.test.run_tests__tests.exclude.magic_tag_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.exclude.magic_tag_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.exclude.magic_tag_test",
        "description": "pygame-1.9.6.test.run_tests__tests.exclude.magic_tag_test",
        "peekOfCode": "__tags__ = ['magic']\nif __name__ == '__main__':\n    import sys\n    import os\n    pkg_dir = (os.path.split(\n                   os.path.split(\n                       os.path.split(\n                           os.path.abspath(__file__))[0])[0])[0])\n    parent_dir, pkg_name = os.path.split(pkg_dir)\n    is_pygame_pkg = (pkg_name == 'tests' and",
        "detail": "pygame-1.9.6.test.run_tests__tests.exclude.magic_tag_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.failures1.fake_2_test",
        "description": "pygame-1.9.6.test.run_tests__tests.failures1.fake_2_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.failures1.fake_2_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.failures1.fake_3_test",
        "description": "pygame-1.9.6.test.run_tests__tests.failures1.fake_3_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.failures1.fake_3_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.failures1.fake_4_test",
        "description": "pygame-1.9.6.test.run_tests__tests.failures1.fake_4_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(False, \"Some Jibberish\")\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.failures1.fake_4_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.incomplete.fake_2_test",
        "description": "pygame-1.9.6.test.run_tests__tests.incomplete.fake_2_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def todo_test_get_pressed(self):\n        self.fail()\n    def test_name(self):\n        self.assertTrue(True)\n    def todo_test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.incomplete.fake_2_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.incomplete.fake_3_test",
        "description": "pygame-1.9.6.test.run_tests__tests.incomplete.fake_3_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.incomplete.fake_3_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.incomplete_todo.fake_2_test",
        "description": "pygame-1.9.6.test.run_tests__tests.incomplete_todo.fake_2_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def todo_test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def todo_test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.incomplete_todo.fake_2_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.incomplete_todo.fake_3_test",
        "description": "pygame-1.9.6.test.run_tests__tests.incomplete_todo.fake_3_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.incomplete_todo.fake_3_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.infinite_loop.fake_1_test",
        "description": "pygame-1.9.6.test.run_tests__tests.infinite_loop.fake_1_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        while True:\n            pass\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)",
        "detail": "pygame-1.9.6.test.run_tests__tests.infinite_loop.fake_1_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.infinite_loop.fake_2_test",
        "description": "pygame-1.9.6.test.run_tests__tests.infinite_loop.fake_2_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.infinite_loop.fake_2_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.print_stderr.fake_2_test",
        "description": "pygame-1.9.6.test.run_tests__tests.print_stderr.fake_2_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.print_stderr.fake_2_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.print_stderr.fake_3_test",
        "description": "pygame-1.9.6.test.run_tests__tests.print_stderr.fake_3_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        sys.stderr.write(\"jibberish messes things up\\n\")\n        self.assertTrue(False)",
        "detail": "pygame-1.9.6.test.run_tests__tests.print_stderr.fake_3_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.print_stderr.fake_4_test",
        "description": "pygame-1.9.6.test.run_tests__tests.print_stderr.fake_4_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(False, \"Some Jibberish\")\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.print_stderr.fake_4_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.print_stdout.fake_2_test",
        "description": "pygame-1.9.6.test.run_tests__tests.print_stdout.fake_2_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.print_stdout.fake_2_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.print_stdout.fake_3_test",
        "description": "pygame-1.9.6.test.run_tests__tests.print_stdout.fake_3_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        sys.stdout.write(\"jibberish ruins everything\\n\")\n        self.assertTrue(False)\n    def test_name(self):\n        sys.stdout.write(\"forgot to remove debug crap\\n\")",
        "detail": "pygame-1.9.6.test.run_tests__tests.print_stdout.fake_3_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.print_stdout.fake_4_test",
        "description": "pygame-1.9.6.test.run_tests__tests.print_stdout.fake_4_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(False, \"Some Jibberish\")\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.print_stdout.fake_4_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.timeout.fake_2_test",
        "description": "pygame-1.9.6.test.run_tests__tests.timeout.fake_2_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        self.assertTrue(True)\n    def test_get_mods(self):\n        self.assertTrue(True)\n    def test_get_pressed(self):\n        self.assertTrue(True)\n    def test_name(self):\n        self.assertTrue(True)\n    def test_set_mods(self):",
        "detail": "pygame-1.9.6.test.run_tests__tests.timeout.fake_2_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.run_tests__tests.timeout.sleep_test",
        "description": "pygame-1.9.6.test.run_tests__tests.timeout.sleep_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    def test_get_focused(self):\n        stop_time = time.time() + 10.0\n        while time.time() < stop_time:\n            time.sleep(1)\n        self.assertTrue(True)\nif __name__ == '__main__':\n    unittest.main()",
        "detail": "pygame-1.9.6.test.run_tests__tests.timeout.sleep_test",
        "documentation": {}
    },
    {
        "label": "norm_result",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "def norm_result(result):\n    \"normalize differences, such as timing between output\"\n    for normalizer, replacement in NORMALIZERS:\n        if hasattr(normalizer, '__call__'):\n            result = normalizer(result)\n        else:\n            result = re.sub(normalizer, replacement, result)\n    return result\ndef call_proc(cmd, cd=None):\n    proc = subprocess.Popen (",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "call_proc",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "def call_proc(cmd, cd=None):\n    proc = subprocess.Popen (\n        cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, cwd = cd,\n\tuniversal_newlines = True,\n    )\n    if proc.wait():\n        print (\"%s %s\" % (cmd, proc.wait()))\n        raise Exception(proc.stdout.read())\n    return proc.stdout.read()\n################################################################################",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "assert_on_results",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "def assert_on_results(suite, single, sub):\n    test = globals().get('%s_test' % suite)\n    if hasattr(test, '__call_'):\n        test(suite, single, sub)\n        print (\"assertions on %s OK\" % (suite,))\n# Don't modify tests in suites below. These assertions are in place to make sure\n# that tests are actually being ran\ndef all_ok_test(uite, *args):\n    for results in args:\n        assert \"Ran 36 tests\" in results      # some tests are runing",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "all_ok_test",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "def all_ok_test(uite, *args):\n    for results in args:\n        assert \"Ran 36 tests\" in results      # some tests are runing\n        assert \"OK\" in results                # OK\ndef failures1_test(suite, *args):\n    for results in args: \n        assert \"FAILED (failures=2)\" in results\n        assert \"Ran 18 tests\" in results\n################################################################################\n# Test that output is the same in single process and subprocess modes ",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "failures1_test",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "def failures1_test(suite, *args):\n    for results in args: \n        assert \"FAILED (failures=2)\" in results\n        assert \"Ran 18 tests\" in results\n################################################################################\n# Test that output is the same in single process and subprocess modes \n#\nbase_cmd = [sys.executable, 'run_tests.py', '-i']\ncmd = base_cmd + ['-n', '-f']\nsub_cmd = base_cmd + ['-f']",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "IGNORE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "IGNORE =  (\n    '.svn',\n    'infinite_loop',\n)\nNORMALIZERS = (\n    (r\"Ran (\\d+) tests in (\\d+\\.\\d+)s\",   \"Ran \\\\1 tests in X.XXXs\" ),\n    (r'File \".*?([^/\\\\.]+\\.py)\"',         'File \"\\\\1\"'),\n)\n################################################################################\ndef norm_result(result):",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "NORMALIZERS",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "NORMALIZERS = (\n    (r\"Ran (\\d+) tests in (\\d+\\.\\d+)s\",   \"Ran \\\\1 tests in X.XXXs\" ),\n    (r'File \".*?([^/\\\\.]+\\.py)\"',         'File \"\\\\1\"'),\n)\n################################################################################\ndef norm_result(result):\n    \"normalize differences, such as timing between output\"\n    for normalizer, replacement in NORMALIZERS:\n        if hasattr(normalizer, '__call__'):\n            result = normalizer(result)",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "\tuniversal_newlines",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "\tuniversal_newlines = True,\n    )\n    if proc.wait():\n        print (\"%s %s\" % (cmd, proc.wait()))\n        raise Exception(proc.stdout.read())\n    return proc.stdout.read()\n################################################################################\nunnormed_diff = '-u' in sys.argv\nverbose = '-v' in sys.argv or unnormed_diff\nif '-h' in sys.argv or '--help' in sys.argv: sys.exit (",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "unnormed_diff",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "unnormed_diff = '-u' in sys.argv\nverbose = '-v' in sys.argv or unnormed_diff\nif '-h' in sys.argv or '--help' in sys.argv: sys.exit (\n    \"\\nCOMPARES OUTPUT OF SINGLE VS SUBPROCESS MODE OF RUN_TESTS.PY\\n\\n\"\n    '-v, to output diffs even on success\\n'\n    '-u, to output diffs of unnormalized tests\\n\\n'\n    \"Each line of a Differ delta begins with a two-letter code:\\n\\n\"\n    \"    '- '    line unique to sequence 1\\n\"\n    \"    '+ '    line unique to sequence 2\\n\"\n    \"    '  '    line common to both sequences\\n\"",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "verbose",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "verbose = '-v' in sys.argv or unnormed_diff\nif '-h' in sys.argv or '--help' in sys.argv: sys.exit (\n    \"\\nCOMPARES OUTPUT OF SINGLE VS SUBPROCESS MODE OF RUN_TESTS.PY\\n\\n\"\n    '-v, to output diffs even on success\\n'\n    '-u, to output diffs of unnormalized tests\\n\\n'\n    \"Each line of a Differ delta begins with a two-letter code:\\n\\n\"\n    \"    '- '    line unique to sequence 1\\n\"\n    \"    '+ '    line unique to sequence 2\\n\"\n    \"    '  '    line common to both sequences\\n\"\n    \"    '? '    line not present in either input sequence\\n\"",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "trunk_dir",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "trunk_dir = os.path.normpath(os.path.join(main_dir, '../../'))\ntest_suite_dirs = [x for x in os.listdir(main_dir) \n                           if os.path.isdir(os.path.join(main_dir, x))\n                           and x not in IGNORE ]\n################################################################################\ndef assert_on_results(suite, single, sub):\n    test = globals().get('%s_test' % suite)\n    if hasattr(test, '__call_'):\n        test(suite, single, sub)\n        print (\"assertions on %s OK\" % (suite,))",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "test_suite_dirs",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "test_suite_dirs = [x for x in os.listdir(main_dir) \n                           if os.path.isdir(os.path.join(main_dir, x))\n                           and x not in IGNORE ]\n################################################################################\ndef assert_on_results(suite, single, sub):\n    test = globals().get('%s_test' % suite)\n    if hasattr(test, '__call_'):\n        test(suite, single, sub)\n        print (\"assertions on %s OK\" % (suite,))\n# Don't modify tests in suites below. These assertions are in place to make sure",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "base_cmd",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "base_cmd = [sys.executable, 'run_tests.py', '-i']\ncmd = base_cmd + ['-n', '-f']\nsub_cmd = base_cmd + ['-f']\ntime_out_cmd =  base_cmd  + ['-t', '4', '-f', 'infinite_loop' ]\npasses = 0\nfailed = False\nfor suite in test_suite_dirs:\n    single = call_proc(cmd + [suite], trunk_dir)\n    subs = call_proc(sub_cmd + [suite], trunk_dir)\n    normed_single, normed_subs = map(norm_result,(single, subs))",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "cmd = base_cmd + ['-n', '-f']\nsub_cmd = base_cmd + ['-f']\ntime_out_cmd =  base_cmd  + ['-t', '4', '-f', 'infinite_loop' ]\npasses = 0\nfailed = False\nfor suite in test_suite_dirs:\n    single = call_proc(cmd + [suite], trunk_dir)\n    subs = call_proc(sub_cmd + [suite], trunk_dir)\n    normed_single, normed_subs = map(norm_result,(single, subs))\n    failed = normed_single != normed_subs",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "sub_cmd",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "sub_cmd = base_cmd + ['-f']\ntime_out_cmd =  base_cmd  + ['-t', '4', '-f', 'infinite_loop' ]\npasses = 0\nfailed = False\nfor suite in test_suite_dirs:\n    single = call_proc(cmd + [suite], trunk_dir)\n    subs = call_proc(sub_cmd + [suite], trunk_dir)\n    normed_single, normed_subs = map(norm_result,(single, subs))\n    failed = normed_single != normed_subs\n    if failed:",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "time_out_cmd",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "time_out_cmd =  base_cmd  + ['-t', '4', '-f', 'infinite_loop' ]\npasses = 0\nfailed = False\nfor suite in test_suite_dirs:\n    single = call_proc(cmd + [suite], trunk_dir)\n    subs = call_proc(sub_cmd + [suite], trunk_dir)\n    normed_single, normed_subs = map(norm_result,(single, subs))\n    failed = normed_single != normed_subs\n    if failed:\n        print ('%s suite comparison FAILED\\n' % (suite,))",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "passes",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "passes = 0\nfailed = False\nfor suite in test_suite_dirs:\n    single = call_proc(cmd + [suite], trunk_dir)\n    subs = call_proc(sub_cmd + [suite], trunk_dir)\n    normed_single, normed_subs = map(norm_result,(single, subs))\n    failed = normed_single != normed_subs\n    if failed:\n        print ('%s suite comparison FAILED\\n' % (suite,))\n    else:",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "failed",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "failed = False\nfor suite in test_suite_dirs:\n    single = call_proc(cmd + [suite], trunk_dir)\n    subs = call_proc(sub_cmd + [suite], trunk_dir)\n    normed_single, normed_subs = map(norm_result,(single, subs))\n    failed = normed_single != normed_subs\n    if failed:\n        print ('%s suite comparison FAILED\\n' % (suite,))\n    else:\n        passes += 1",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "loop_test",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "description": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "peekOfCode": "loop_test = call_proc(time_out_cmd, trunk_dir)\nassert \"successfully terminated\" in loop_test\npasses += 1\nprint (\"OK\")\nprint (\"\\n%s/%s suites pass\" % (passes, len(test_suite_dirs) + 1))\nprint (\"\\n-h for help\")\n################################################################################",
        "detail": "pygame-1.9.6.test.run_tests__tests.run_tests__test",
        "documentation": {}
    },
    {
        "label": "PyArrayInterface",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "class PyArrayInterface(Structure):\n    _fields_ = [('two', c_int), ('nd', c_int), ('typekind', c_char),\n                ('itemsize', c_int), ('flags', c_int),\n                ('shape', POINTER(Py_intptr_t)),\n                ('strides', POINTER(Py_intptr_t)),\n                ('data', c_void_p), ('descr', py_object)]\nPAI_Ptr = POINTER(PyArrayInterface)\ntry:\n    PyCObject_AsVoidPtr = pythonapi.PyCObject_AsVoidPtr\nexcept AttributeError:",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "ArrayInterface",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "class ArrayInterface(object):\n    def __init__(self, arr):\n        try:\n            self._cobj = arr.__array_struct__\n        except AttributeError:\n            raise TypeError(\"The array object lacks an array structure\")\n        if not self._cobj:\n            raise TypeError(\"The array object has a NULL array structure value\")\n        try:\n            vp = PyCObject_AsVoidPtr(self._cobj)",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "Exporter",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "class Exporter(object):\n    def __init__(self, shape,\n                 typekind=None, itemsize=None, strides=None,\n                 descr=None, flags=None):\n        if typekind is None:\n            typekind = 'u'\n        if itemsize is None:\n            itemsize = 1\n        if flags is None:\n            flags = PAI_WRITEABLE | PAI_ALIGNED | PAI_NOTSWAPPED",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "Array",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "class Array(Exporter):\n    _ctypes = {('u', 1): c_uint8,\n               ('u', 2): c_uint16,\n               ('u', 4): c_uint32,\n               ('u', 8): c_uint64,\n               ('i', 1): c_int8,\n               ('i', 2): c_int16,\n               ('i', 4): c_int32,\n               ('i', 8): c_int64}\n    def __init__(self, *args, **kwds):",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "ExporterTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "class ExporterTest(unittest.TestCase):\n    def test_strides(self):\n        self.check_args(0, (10,), 'u', (2,), 20, 20, 2)\n        self.check_args(0, (5, 3), 'u', (6, 2), 30, 30, 2)\n        self.check_args(0, (7, 3, 5), 'u', (30, 10, 2), 210, 210, 2)\n        self.check_args(0, (13, 5, 11, 3), 'u', (330, 66, 6, 2), 4290, 4290, 2)\n        self.check_args(3, (7, 3, 5), 'i', (2, 14, 42), 210, 210, 2)\n        self.check_args(3, (7, 3, 5), 'x', (2, 16, 48), 210, 240, 2)\n        self.check_args(3, (13, 5, 11, 3), '%', (440, 88, 8, 2), 4290, 5720, 2)\n        self.check_args(3, (7, 5), '-', (15, 3), 105, 105, 3)",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "ArrayTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "class ArrayTest(unittest.TestCase):\n    def __init__(self, *args, **kwds):\n        unittest.TestCase.__init__(self, *args, **kwds)\n        self.a = Array((20, 15), 'i', 4)\n    def setUp(self):\n        # Every test starts with a zeroed array.\n        memset(self.a.data, 0, sizeof(self.a._data))\n    def test__addr_at(self):\n        a = self.a\n        self.assertEqual(a._addr_at((0, 0)), a.data)",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "format_flags",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "def format_flags(flags):\n    names = []\n    for flag, name in [(PAI_CONTIGUOUS, 'CONTIGUOUS'),\n                       (PAI_FORTRAN, 'FORTRAN'),\n                       (PAI_ALIGNED, 'ALIGNED'),\n                       (PAI_NOTSWAPPED, 'NOTSWAPPED'),\n                       (PAI_WRITEABLE, 'WRITEABLE'),\n                       (PAI_ARR_HAS_DESCR, 'ARR_HAS_DESCR')]:\n        if flag & flags:\n            names.append(name)",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "format_shape",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "def format_shape(nd, shape):\n    return ', '.join([str(shape[i]) for i in range(nd)])\ndef format_strides(nd, strides):\n    return ', '.join([str(strides[i]) for i in range(nd)])\nclass Exporter(object):\n    def __init__(self, shape,\n                 typekind=None, itemsize=None, strides=None,\n                 descr=None, flags=None):\n        if typekind is None:\n            typekind = 'u'",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "format_strides",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "def format_strides(nd, strides):\n    return ', '.join([str(strides[i]) for i in range(nd)])\nclass Exporter(object):\n    def __init__(self, shape,\n                 typekind=None, itemsize=None, strides=None,\n                 descr=None, flags=None):\n        if typekind is None:\n            typekind = 'u'\n        if itemsize is None:\n            itemsize = 1",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "__all__ = ['PAI_CONTIGUOUS', 'PAI_FORTRAN', 'PAI_ALIGNED',\n           'PAI_NOTSWAPPED', 'PAI_WRITEABLE', 'PAI_ARR_HAS_DESCR',\n           'ArrayInterface',]\ntry:\n    c_ssize_t  # Undefined in early Python versions\nexcept NameError:\n    if sizeof(c_uint) == sizeof(c_void_p):\n        c_size_t = c_uint\n        c_ssize_t = c_int\n    elif sizeof(c_ulong) == sizeof(c_void_p):",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "SIZEOF_VOID_P",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "SIZEOF_VOID_P = sizeof(c_void_p)\nif SIZEOF_VOID_P <= sizeof(c_int):\n    Py_intptr_t = c_int\nelif SIZEOF_VOID_P <= sizeof(c_long):\n    Py_intptr_t = c_long\nelif 'c_longlong' in globals() and SIZEOF_VOID_P <= sizeof(c_longlong):\n    Py_intptr_t = c_longlong\nelse:\n    raise RuntimeError(\"Unrecognized pointer size %i\" % (pointer_size,))\nclass PyArrayInterface(Structure):",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "PAI_Ptr",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "PAI_Ptr = POINTER(PyArrayInterface)\ntry:\n    PyCObject_AsVoidPtr = pythonapi.PyCObject_AsVoidPtr\nexcept AttributeError:\n    def PyCObject_AsVoidPtr(o):\n        raise TypeError(\"Not available\")\nelse:\n    PyCObject_AsVoidPtr.restype = c_void_p\n    PyCObject_AsVoidPtr.argtypes = [py_object]\n    PyCObject_GetDesc = pythonapi.PyCObject_GetDesc",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "PAI_CONTIGUOUS",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "PAI_CONTIGUOUS = 0x01\nPAI_FORTRAN = 0x02\nPAI_ALIGNED = 0x100\nPAI_NOTSWAPPED = 0x200\nPAI_WRITEABLE = 0x400\nPAI_ARR_HAS_DESCR = 0x800\nclass ArrayInterface(object):\n    def __init__(self, arr):\n        try:\n            self._cobj = arr.__array_struct__",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "PAI_FORTRAN",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "PAI_FORTRAN = 0x02\nPAI_ALIGNED = 0x100\nPAI_NOTSWAPPED = 0x200\nPAI_WRITEABLE = 0x400\nPAI_ARR_HAS_DESCR = 0x800\nclass ArrayInterface(object):\n    def __init__(self, arr):\n        try:\n            self._cobj = arr.__array_struct__\n        except AttributeError:",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "PAI_ALIGNED",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "PAI_ALIGNED = 0x100\nPAI_NOTSWAPPED = 0x200\nPAI_WRITEABLE = 0x400\nPAI_ARR_HAS_DESCR = 0x800\nclass ArrayInterface(object):\n    def __init__(self, arr):\n        try:\n            self._cobj = arr.__array_struct__\n        except AttributeError:\n            raise TypeError(\"The array object lacks an array structure\")",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "PAI_NOTSWAPPED",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "PAI_NOTSWAPPED = 0x200\nPAI_WRITEABLE = 0x400\nPAI_ARR_HAS_DESCR = 0x800\nclass ArrayInterface(object):\n    def __init__(self, arr):\n        try:\n            self._cobj = arr.__array_struct__\n        except AttributeError:\n            raise TypeError(\"The array object lacks an array structure\")\n        if not self._cobj:",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "PAI_WRITEABLE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "PAI_WRITEABLE = 0x400\nPAI_ARR_HAS_DESCR = 0x800\nclass ArrayInterface(object):\n    def __init__(self, arr):\n        try:\n            self._cobj = arr.__array_struct__\n        except AttributeError:\n            raise TypeError(\"The array object lacks an array structure\")\n        if not self._cobj:\n            raise TypeError(\"The array object has a NULL array structure value\")",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "PAI_ARR_HAS_DESCR",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.arrinter",
        "description": "pygame-1.9.6.test.test_utils.arrinter",
        "peekOfCode": "PAI_ARR_HAS_DESCR = 0x800\nclass ArrayInterface(object):\n    def __init__(self, arr):\n        try:\n            self._cobj = arr.__array_struct__\n        except AttributeError:\n            raise TypeError(\"The array object lacks an array structure\")\n        if not self._cobj:\n            raise TypeError(\"The array object has a NULL array structure value\")\n        try:",
        "detail": "pygame-1.9.6.test.test_utils.arrinter",
        "documentation": {}
    },
    {
        "label": "Popen",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.async_sub",
        "description": "pygame-1.9.6.test.test_utils.async_sub",
        "peekOfCode": "class Popen(subprocess.Popen):\n    def recv(self, maxsize=None):\n        return self._recv('stdout', maxsize)\n    def recv_err(self, maxsize=None):\n        return self._recv('stderr', maxsize)\n    def send_recv(self, input='', maxsize=None):\n        return self.send(input), self.recv(maxsize), self.recv_err(maxsize)\n    def read_async(self,  wait=.1, e=1, tr=5, stderr=0):\n        if tr < 1:\n            tr = 1",
        "detail": "pygame-1.9.6.test.test_utils.async_sub",
        "documentation": {}
    },
    {
        "label": "AsyncTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.async_sub",
        "description": "pygame-1.9.6.test.test_utils.async_sub",
        "peekOfCode": "class AsyncTest(unittest.TestCase):\n    def test_proc_in_time_or_kill(self):\n        ret_code, response = proc_in_time_or_kill(\n            [sys.executable, '-c', 'while 1: pass'], time_out = 1\n        )\n        self.assertIn('rocess timed out', ret_code)\n        self.assertIn('successfully terminated', ret_code)\n################################################################################\nif __name__ == '__main__':\n    unittest.main()",
        "detail": "pygame-1.9.6.test.test_utils.async_sub",
        "documentation": {}
    },
    {
        "label": "geterro",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.async_sub",
        "description": "pygame-1.9.6.test.test_utils.async_sub",
        "peekOfCode": "def geterror ():\n    return sys.exc_info()[1]\nif sys.version_info >= (3,):\n    null_byte = '\\x00'.encode('ascii')\nelse:\n    null_byte = '\\x00'\nif platform.system() == 'Windows':\n    if sys.version_info >= (3,):\n        # Test date should be in ascii.\n        def encode(s):",
        "detail": "pygame-1.9.6.test.test_utils.async_sub",
        "documentation": {}
    },
    {
        "label": "proc_in_time_or_kill",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.async_sub",
        "description": "pygame-1.9.6.test.test_utils.async_sub",
        "peekOfCode": "def proc_in_time_or_kill(cmd, time_out, wd = None, env = None):\n    proc = Popen (\n        cmd, cwd = wd, env = env,\n        stdin = subprocess.PIPE, stdout = subprocess.PIPE, \n        stderr = subprocess.STDOUT, universal_newlines = 1\n    )\n    ret_code = None\n    response = []\n    t = time.time()\n    while ret_code is None and ((time.time() -t) < time_out):",
        "detail": "pygame-1.9.6.test.test_utils.async_sub",
        "documentation": {}
    },
    {
        "label": "PIPE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.async_sub",
        "description": "pygame-1.9.6.test.test_utils.async_sub",
        "peekOfCode": "PIPE = subprocess.PIPE\n################################################################################\nclass Popen(subprocess.Popen):\n    def recv(self, maxsize=None):\n        return self._recv('stdout', maxsize)\n    def recv_err(self, maxsize=None):\n        return self._recv('stderr', maxsize)\n    def send_recv(self, input='', maxsize=None):\n        return self.send(input), self.recv(maxsize), self.recv_err(maxsize)\n    def read_async(self,  wait=.1, e=1, tr=5, stderr=0):",
        "detail": "pygame-1.9.6.test.test_utils.async_sub",
        "documentation": {}
    },
    {
        "label": "Exporter",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.buftools",
        "description": "pygame-1.9.6.test.test_utils.buftools",
        "peekOfCode": "class Exporter(pygame.newbuffer.BufferMixin):\n    \"\"\"An object that exports a multi-dimension new buffer interface\n       The only array operation this type supports is to export a buffer.\n    \"\"\"\n    prefixes = {'@': '', '=': '=', '<': '=', '>': '=', '!': '=',\n                '2': '2', '3': '3', '4': '4', '5': '5',\n                '6': '6', '7': '7', '8': '8', '9': '9'}\n    types = {'c': ctypes.c_char, 'b': ctypes.c_byte, 'B': ctypes.c_ubyte,\n             '=c': ctypes.c_int8, '=b': ctypes.c_int8, '=B': ctypes.c_uint8,\n             '?': ctypes.c_bool, '=?': ctypes.c_int8,",
        "detail": "pygame-1.9.6.test.test_utils.buftools",
        "documentation": {}
    },
    {
        "label": "Importer",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.buftools",
        "description": "pygame-1.9.6.test.test_utils.buftools",
        "peekOfCode": "class Importer(object):\n    \"\"\"An object that imports a new buffer interface\n       The fields of the Py_buffer C struct are exposed by identically\n       named Importer read-only properties.\n    \"\"\"\n    def __init__(self, obj, flags):\n        self._view = pygame.newbuffer.Py_buffer()\n        self._view.get_buffer(obj, flags)\n    @property\n    def obj(self):",
        "detail": "pygame-1.9.6.test.test_utils.buftools",
        "documentation": {}
    },
    {
        "label": "ExporterTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.buftools",
        "description": "pygame-1.9.6.test.test_utils.buftools",
        "peekOfCode": "class ExporterTest(unittest.TestCase):\n    \"\"\"Class Exporter unit tests\"\"\"\n    def test_formats(self):\n        char_sz = ctypes.sizeof(ctypes.c_char)\n        short_sz = ctypes.sizeof(ctypes.c_short)\n        int_sz = ctypes.sizeof(ctypes.c_int)\n        long_sz = ctypes.sizeof(ctypes.c_long)\n        longlong_sz = ctypes.sizeof(ctypes.c_longlong)\n        float_sz = ctypes.sizeof(ctypes.c_float)\n        double_sz = ctypes.sizeof(ctypes.c_double)",
        "detail": "pygame-1.9.6.test.test_utils.buftools",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.buftools",
        "description": "pygame-1.9.6.test.test_utils.buftools",
        "peekOfCode": "__all__ = [\"Exporter\", \"Importer\"]\ntry:\n    ctypes.c_ssize_t\nexcept AttributeError:\n    void_p_sz = ctypes.sizeof(ctypes.c_void_p)\n    if ctypes.sizeof(ctypes.c_short) == void_p_sz:\n        ctypes.c_ssize_t = ctypes.c_short\n    elif ctypes.sizeof(ctypes.c_int) == void_p_sz:\n        ctypes.c_ssize_t = ctypes.c_int\n    elif ctypes.sizeof(ctypes.c_long) == void_p_sz:",
        "detail": "pygame-1.9.6.test.test_utils.buftools",
        "documentation": {}
    },
    {
        "label": "little_endian_uint32",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.endian",
        "description": "pygame-1.9.6.test.test_utils.endian",
        "peekOfCode": "def little_endian_uint32(i):\n    \"\"\"Return the 32 bit unsigned integer little-endian representation of i\"\"\"\n    s = struct.pack('<I', i)\n    return struct.unpack('=I', s)[0]\ndef big_endian_uint32(i):\n    \"\"\"Return the 32 bit unsigned integer big-endian representation of i\"\"\"\n    s = struct.pack('>I', i)\n    return struct.unpack('=I', s)[0]",
        "detail": "pygame-1.9.6.test.test_utils.endian",
        "documentation": {}
    },
    {
        "label": "big_endian_uint32",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.endian",
        "description": "pygame-1.9.6.test.test_utils.endian",
        "peekOfCode": "def big_endian_uint32(i):\n    \"\"\"Return the 32 bit unsigned integer big-endian representation of i\"\"\"\n    s = struct.pack('>I', i)\n    return struct.unpack('=I', s)[0]",
        "detail": "pygame-1.9.6.test.test_utils.endian",
        "documentation": {}
    },
    {
        "label": "Error",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "class Error(Exception):\n    prefix = 'Error'\n    def __str__(self):\n        return self.prefix + ': ' + ' '.join(self.args)\nclass FormatError(Error):\n    \"\"\"Problem with input file format.  In other words, PNG file does\n    not conform to the specification in some way and is invalid.\n    \"\"\"\n    prefix = 'FormatError'\nclass ChunkError(FormatError):",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "FormatError",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "class FormatError(Error):\n    \"\"\"Problem with input file format.  In other words, PNG file does\n    not conform to the specification in some way and is invalid.\n    \"\"\"\n    prefix = 'FormatError'\nclass ChunkError(FormatError):\n    prefix = 'ChunkError'\nclass Writer:\n    \"\"\"\n    PNG encoder in pure Python.",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "ChunkError",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "class ChunkError(FormatError):\n    prefix = 'ChunkError'\nclass Writer:\n    \"\"\"\n    PNG encoder in pure Python.\n    \"\"\"\n    def __init__(self, width=None, height=None,\n                 size=None,\n                 greyscale=False,\n                 alpha=False,",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "Writer",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "class Writer:\n    \"\"\"\n    PNG encoder in pure Python.\n    \"\"\"\n    def __init__(self, width=None, height=None,\n                 size=None,\n                 greyscale=False,\n                 alpha=False,\n                 bitdepth=8,\n                 palette=None,",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "Image",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "class Image:\n    \"\"\"A PNG image.\n    You can create an :class:`Image` object from an array of pixels by calling\n    :meth:`png.from_array`.  It can be saved to disk with the\n    :meth:`save` method.\"\"\"\n    def __init__(self, rows, info):\n        \"\"\"\n        .. note ::\n          The constructor is not public.  Please do not call it.\n        \"\"\"",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "_readable",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "class _readable:\n    \"\"\"\n    A simple file-like interface for strings and arrays.\n    \"\"\"\n    def __init__(self, buf):\n        self.buf = buf\n        self.offset = 0\n    def read(self, n):\n        r = self.buf[self.offset:self.offset+n]\n        if isarray(r):",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "Reader",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "class Reader:\n    \"\"\"\n    PNG decoder in pure Python.\n    \"\"\"\n    def __init__(self, _guess=None, **kw):\n        \"\"\"\n        Create a PNG decoder object.\n        The constructor expects exactly one keyword argument. If you\n        supply a positional argument instead, it will guess the input\n        type. You can choose among the following keyword arguments:",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "Test",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "class Test(unittest.TestCase):\n    # This member is used by the superclass.  If we don't define a new\n    # class here then when we use self.assertRaises() and the PyPNG code\n    # raises an assertion then we get no proper traceback.  I can't work\n    # out why, but defining a new class here means we get a proper\n    # traceback.\n    class failureException(Exception):\n        pass\n    def helperLN(self, n):\n        mask = (1 << n) - 1",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "group",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def group(s, n):\n    # See\n    # http://www.python.org/doc/2.6/library/functions.html#zip\n    return zip(*[iter(s)]*n)\ndef isarray(x):\n    \"\"\"Same as ``isinstance(x, array)``.\n    \"\"\"\n    return isinstance(x, array)\ndef tostring(row):\n    \"\"\"Convert row of bytes to string.  Expects `row` to be an",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "isarray",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def isarray(x):\n    \"\"\"Same as ``isinstance(x, array)``.\n    \"\"\"\n    return isinstance(x, array)\ndef tostring(row):\n    \"\"\"Convert row of bytes to string.  Expects `row` to be an\n    ``array``.\n    \"\"\"\n    return row.tostring()\n# Conditionally convert to bytes.  Works on Python 2 and Python 3.",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "tostring",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def tostring(row):\n    \"\"\"Convert row of bytes to string.  Expects `row` to be an\n    ``array``.\n    \"\"\"\n    return row.tostring()\n# Conditionally convert to bytes.  Works on Python 2 and Python 3.\ntry:\n    bytes('', 'ascii')\n    def strtobytes(x): return bytes(x, 'iso8859-1')\n    def bytestostr(x): return str(x, 'iso8859-1')",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "interleave_planes",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def interleave_planes(ipixels, apixels, ipsize, apsize):\n    \"\"\"\n    Interleave (colour) planes, e.g. RGB + A = RGBA.\n    Return an array of pixels consisting of the `ipsize` elements of data\n    from each pixel in `ipixels` followed by the `apsize` elements of data\n    from each pixel in `apixels`.  Conventionally `ipixels` and\n    `apixels` are byte arrays so the sizes are bytes, but it actually\n    works with any arrays of the same type.  The returned array is the\n    same type as the input arrays which should be the same type as each other.\n    \"\"\"",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "check_palette",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def check_palette(palette):\n    \"\"\"Check a palette argument (to the :class:`Writer` class) for validity.\n    Returns the palette as a list if okay; raises an exception otherwise.\n    \"\"\"\n    # None is the default and is allowed.\n    if palette is None:\n        return None\n    p = list(palette)\n    if not (0 < len(p) <= 256):\n        raise ValueError(\"a palette must have between 1 and 256 entries\")",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "write_chunk",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def write_chunk(outfile, tag, data=strtobytes('')):\n    \"\"\"\n    Write a PNG chunk to the output file, including length and\n    checksum.\n    \"\"\"\n    # http://www.w3.org/TR/PNG/#5Chunk-layout\n    outfile.write(struct.pack(\"!I\", len(data)))\n    tag = strtobytes(tag)\n    outfile.write(tag)\n    outfile.write(data)",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "write_chunks",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def write_chunks(out, chunks):\n    \"\"\"Create a PNG file by writing out the chunks.\"\"\"\n    out.write(_signature)\n    for chunk in chunks:\n        write_chunk(out, *chunk)\ndef filter_scanline(type, line, fo, prev=None):\n    \"\"\"Apply a scanline filter to a scanline.  `type` specifies the\n    filter type (0 to 4); `line` specifies the current (unfiltered)\n    scanline as a sequence of bytes; `prev` specifies the previous\n    (unfiltered) scanline as a sequence of bytes. `fo` specifies the",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "filter_scanline",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def filter_scanline(type, line, fo, prev=None):\n    \"\"\"Apply a scanline filter to a scanline.  `type` specifies the\n    filter type (0 to 4); `line` specifies the current (unfiltered)\n    scanline as a sequence of bytes; `prev` specifies the previous\n    (unfiltered) scanline as a sequence of bytes. `fo` specifies the\n    filter offset; normally this is size of a pixel in bytes (the number\n    of bytes per sample times the number of channels), but when this is\n    < 1 (for bit depths < 8) then the filter offset is 1.\n    \"\"\"\n    assert 0 <= type < 5",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "from_array",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def from_array(a, mode=None, info={}):\n    \"\"\"Create a PNG :class:`Image` object from a 2- or 3-dimensional array.\n    One application of this function is easy PIL-style saving:\n    ``png.from_array(pixels, 'L').save('foo.png')``.\n    .. note :\n      The use of the term *3-dimensional* is for marketing purposes\n      only.  It doesn't actually work.  Please bear with us.  Meanwhile\n      enjoy the complimentary snacks (on request) and please use a\n      2-dimensional array.\n    Unless they are specified using the *info* parameter, the PNG's",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "test",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def test():\n    unittest.main(__name__)\ndef topngbytes(name, rows, x, y, **k):\n    \"\"\"Convenience function for creating a PNG file \"in memory\" as a\n    string.  Creates a :class:`Writer` instance using the keyword arguments,\n    then passes `rows` to its :meth:`Writer.write` method.  The resulting\n    PNG file is returned as a string.  `name` is used to identify the file for\n    debugging.\n    \"\"\"\n    import os",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "topngbytes",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def topngbytes(name, rows, x, y, **k):\n    \"\"\"Convenience function for creating a PNG file \"in memory\" as a\n    string.  Creates a :class:`Writer` instance using the keyword arguments,\n    then passes `rows` to its :meth:`Writer.write` method.  The resulting\n    PNG file is returned as a string.  `name` is used to identify the file for\n    debugging.\n    \"\"\"\n    import os\n    print (name)\n    f = BytesIO()",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "testWithIO",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def testWithIO(inp, out, f):\n    \"\"\"Calls the function `f` with ``sys.stdin`` changed to `inp`\n    and ``sys.stdout`` changed to `out`.  They are restored when `f`\n    returns.  This function returns whatever `f` returns.\n    \"\"\"\n    import os\n    try:\n        oldin,sys.stdin = sys.stdin,inp\n        oldout,sys.stdout = sys.stdout,out\n        x = f()",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "mycallersname",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def mycallersname():\n    \"\"\"Returns the name of the caller of the caller of this function\n    (hence the name of the caller of the function in which\n    \"mycallersname()\" textually appears).  Returns None if this cannot\n    be determined.\"\"\"\n    # http://docs.python.org/library/inspect.html#the-interpreter-stack\n    import inspect\n    frame = inspect.currentframe()\n    if not frame:\n        return None",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "seqtobytes",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def seqtobytes(s):\n    \"\"\"Convert a sequence of integers to a *bytes* instance.  Good for\n    plastering over Python 2 / Python 3 cracks.\n    \"\"\"\n    return strtobytes(''.join(chr(x) for x in s))\nclass Test(unittest.TestCase):\n    # This member is used by the superclass.  If we don't define a new\n    # class here then when we use self.assertRaises() and the PyPNG code\n    # raises an assertion then we get no proper traceback.  I can't work\n    # out why, but defining a new class here means we get a proper",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "test_suite",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def test_suite(options, args):\n    \"\"\"\n    Create a PNG test image and write the file to stdout.\n    \"\"\"\n    # Below is a big stack of test image generators.\n    # They're all really tiny, so PEP 8 rules are suspended.\n    def test_gradient_horizontal_lr(x, y): return x\n    def test_gradient_horizontal_rl(x, y): return 1-x\n    def test_gradient_vertical_tb(x, y): return y\n    def test_gradient_vertical_bt(x, y): return 1-y",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "read_pam_header",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def read_pam_header(infile):\n    \"\"\"\n    Read (the rest of a) PAM header.  `infile` should be positioned\n    immediately after the initial 'P7' line (at the beginning of the\n    second line).  Returns are as for `read_pnm_header`.\n    \"\"\"\n    # Unlike PBM, PGM, and PPM, we can read the header a line at a time.\n    header = dict()\n    while True:\n        l = infile.readline().strip()",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "read_pnm_header",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def read_pnm_header(infile, supported=('P5','P6')):\n    \"\"\"\n    Read a PNM header, returning (format,width,height,depth,maxval).\n    `width` and `height` are in pixels.  `depth` is the number of\n    channels in the image; for PBM and PGM it is synthesized as 1, for\n    PPM as 3; for PAM images it is read from the header.  `maxval` is\n    synthesized (as 1) for PBM images.\n    \"\"\"\n    # Generally, see http://netpbm.sourceforge.net/doc/ppm.html\n    # and http://netpbm.sourceforge.net/doc/pam.html",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "write_pnm",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def write_pnm(file, width, height, pixels, meta):\n    \"\"\"Write a Netpbm PNM/PAM file.\"\"\"\n    bitdepth = meta['bitdepth']\n    maxval = 2**bitdepth - 1\n    # Rudely, the number of image planes can be used to determine\n    # whether we are L (PGM), LA (PAM), RGB (PPM), or RGBA (PAM).\n    planes = meta['planes']\n    # Can be an assert as long as we assume that pixels and meta came\n    # from a PNG file.\n    assert planes in (1,2,3,4)",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "color_triple",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "def color_triple(color):\n    \"\"\"\n    Convert a command line colour value to a RGB triple of integers.\n    FIXME: Somewhere we need support for greyscale backgrounds etc.\n    \"\"\"\n    if color.startswith('#') and len(color) == 4:\n        return (int(color[1], 16),\n                int(color[2], 16),\n                int(color[3], 16))\n    if color.startswith('#') and len(color) == 7:",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "__version__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "__version__ = \"$URL: http://pypng.googlecode.com/svn/trunk/code/png.py $ $Rev: 228 $\"\nfrom pygame.compat import geterror, imap_\nfrom array import array\nimport itertools\nimport math\nimport operator\nimport struct\nimport sys\nimport zlib\nimport warnings",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "__all__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "__all__ = ['Image', 'Reader', 'Writer', 'write_chunks', 'from_array']\n# The PNG signature.\n# http://www.w3.org/TR/PNG/#5PNG-file-signature\n_signature = struct.pack('8B', 137, 80, 78, 71, 13, 10, 26, 10)\n_adam7 = ((0, 0, 8, 8),\n          (4, 0, 8, 8),\n          (0, 4, 4, 8),\n          (2, 0, 4, 4),\n          (0, 2, 2, 4),\n          (1, 0, 2, 2),",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "_signature",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "_signature = struct.pack('8B', 137, 80, 78, 71, 13, 10, 26, 10)\n_adam7 = ((0, 0, 8, 8),\n          (4, 0, 8, 8),\n          (0, 4, 4, 8),\n          (2, 0, 4, 4),\n          (0, 2, 2, 4),\n          (1, 0, 2, 2),\n          (0, 1, 1, 2))\ndef group(s, n):\n    # See",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "_adam7",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "_adam7 = ((0, 0, 8, 8),\n          (4, 0, 8, 8),\n          (0, 4, 4, 8),\n          (2, 0, 4, 4),\n          (0, 2, 2, 4),\n          (1, 0, 2, 2),\n          (0, 1, 1, 2))\ndef group(s, n):\n    # See\n    # http://www.python.org/doc/2.6/library/functions.html#zip",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "fromarray",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "fromarray = from_array\nclass Image:\n    \"\"\"A PNG image.\n    You can create an :class:`Image` object from an array of pixels by calling\n    :meth:`png.from_array`.  It can be saved to disk with the\n    :meth:`save` method.\"\"\"\n    def __init__(self, rows, info):\n        \"\"\"\n        .. note ::\n          The constructor is not public.  Please do not call it.",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "_pngsuite",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.png",
        "description": "pygame-1.9.6.test.test_utils.png",
        "peekOfCode": "_pngsuite = {\n  'basi0g01': _dehex(\"\"\"\n89504e470d0a1a0a0000000d49484452000000200000002001000000012c0677\ncf0000000467414d41000186a031e8965f0000009049444154789c2d8d310ec2\n300c45dfc682c415187a00a42e197ab81e83b127e00c5639001363a580d8582c\n65c910357c4b78b0bfbfdf4f70168c19e7acb970a3f2d1ded9695ce5bf5963df\nd92aaf4c9fd927ea449e6487df5b9c36e799b91bdf082b4d4bd4014fe4014b01\nab7a17aee694d28d328a2d63837a70451e1648702d9a9ff4a11d2f7a51aa21e5\na18c7ffd0094e3511d661822f20000000049454e44ae426082\n\"\"\"),",
        "detail": "pygame-1.9.6.test.test_utils.png",
        "documentation": {}
    },
    {
        "label": "run",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.run_tests",
        "description": "pygame-1.9.6.test.test_utils.run_tests",
        "peekOfCode": "def run(*args, **kwds):\n    \"\"\"Run the Pygame unit test suite and return (total tests run, fails dict)\n    Positional arguments (optional):\n    The names of tests to include. If omitted then all tests are run. Test\n    names need not include the trailing '_test'.\n    Keyword arguments:\n    incomplete - fail incomplete tests (default False)\n    usesubprocess - run all test suites in the current process\n                   (default False, use separate subprocesses)\n    dump - dump failures/errors as dict ready to eval (default False)",
        "detail": "pygame-1.9.6.test.test_utils.run_tests",
        "documentation": {}
    },
    {
        "label": "count_results",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.run_tests",
        "description": "pygame-1.9.6.test.test_utils.run_tests",
        "peekOfCode": "def count_results(results):\n    total = errors = failures = 0\n    for result in results.values():\n        if result.get('return_code', 0):\n            total += 1\n            errors += 1\n        else:\n            total += result['num_tests']\n            errors += result['num_errors']\n            failures += result['num_failures']",
        "detail": "pygame-1.9.6.test.test_utils.run_tests",
        "documentation": {}
    },
    {
        "label": "run_and_exit",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.run_tests",
        "description": "pygame-1.9.6.test.test_utils.run_tests",
        "peekOfCode": "def run_and_exit(*args, **kwargs):\n    \"\"\"Run the tests, and if there are failures, exit with a return code of 1.\n    This is needed for various buildbots to recognise that the tests have\n    failed.\n    \"\"\"\n    total, fails = run(*args, **kwargs)\n    if fails:\n        sys.exit(1)\n    sys.exit(0)",
        "detail": "pygame-1.9.6.test.test_utils.run_tests",
        "documentation": {}
    },
    {
        "label": "test_pkg_name",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.run_tests",
        "description": "pygame-1.9.6.test.test_utils.run_tests",
        "peekOfCode": "test_pkg_name = '.'.join(__name__.split('.')[0:-2])\nis_pygame_pkg = test_pkg_name == 'pygame.tests'\ntest_runner_mod = test_pkg_name + '.test_utils.test_runner'\nif is_pygame_pkg:\n    from pygame.tests.test_utils import import_submodule\n    from pygame.tests.test_utils.test_runner \\\n         import prepare_test_env, run_test, combine_results, \\\n                get_test_results, TEST_RESULTS_START\nelse:\n    from test.test_utils import import_submodule",
        "detail": "pygame-1.9.6.test.test_utils.run_tests",
        "documentation": {}
    },
    {
        "label": "is_pygame_pkg",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.run_tests",
        "description": "pygame-1.9.6.test.test_utils.run_tests",
        "peekOfCode": "is_pygame_pkg = test_pkg_name == 'pygame.tests'\ntest_runner_mod = test_pkg_name + '.test_utils.test_runner'\nif is_pygame_pkg:\n    from pygame.tests.test_utils import import_submodule\n    from pygame.tests.test_utils.test_runner \\\n         import prepare_test_env, run_test, combine_results, \\\n                get_test_results, TEST_RESULTS_START\nelse:\n    from test.test_utils import import_submodule\n    from test.test_utils.test_runner \\",
        "detail": "pygame-1.9.6.test.test_utils.run_tests",
        "documentation": {}
    },
    {
        "label": "test_runner_mod",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.run_tests",
        "description": "pygame-1.9.6.test.test_utils.run_tests",
        "peekOfCode": "test_runner_mod = test_pkg_name + '.test_utils.test_runner'\nif is_pygame_pkg:\n    from pygame.tests.test_utils import import_submodule\n    from pygame.tests.test_utils.test_runner \\\n         import prepare_test_env, run_test, combine_results, \\\n                get_test_results, TEST_RESULTS_START\nelse:\n    from test.test_utils import import_submodule\n    from test.test_utils.test_runner \\\n         import prepare_test_env, run_test, combine_results, \\",
        "detail": "pygame-1.9.6.test.test_utils.run_tests",
        "documentation": {}
    },
    {
        "label": "was_run",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.run_tests",
        "description": "pygame-1.9.6.test.test_utils.run_tests",
        "peekOfCode": "was_run = False\ndef run(*args, **kwds):\n    \"\"\"Run the Pygame unit test suite and return (total tests run, fails dict)\n    Positional arguments (optional):\n    The names of tests to include. If omitted then all tests are run. Test\n    names need not include the trailing '_test'.\n    Keyword arguments:\n    incomplete - fail incomplete tests (default False)\n    usesubprocess - run all test suites in the current process\n                   (default False, use separate subprocesses)",
        "detail": "pygame-1.9.6.test.test_utils.run_tests",
        "documentation": {}
    },
    {
        "label": "PygameTestLoader",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.test_machinery",
        "description": "pygame-1.9.6.test.test_utils.test_machinery",
        "peekOfCode": "class PygameTestLoader(unittest.TestLoader):\n    def __init__(self, randomize_tests=False, include_incomplete=False,\n                 exclude=('interactive',)):\n        super(PygameTestLoader, self).__init__()\n        self.randomize_tests = randomize_tests\n        if exclude is None:\n            self.exclude = set()\n        else:\n            self.exclude = set(exclude)\n        if include_incomplete:",
        "detail": "pygame-1.9.6.test.test_utils.test_machinery",
        "documentation": {}
    },
    {
        "label": "TestTags",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.test_utils.test_machinery",
        "description": "pygame-1.9.6.test.test_utils.test_machinery",
        "peekOfCode": "class TestTags:\n    def __init__(self):\n        self.memoized = {}\n        self.parent_modules = {}\n    def get_parent_module(self, class_):\n        if class_ not in self.parent_modules:\n            self.parent_modules[class_] = import_submodule(class_.__module__)\n        return self.parent_modules[class_]\n    def __call__(self, parent_class, meth):\n        key = (parent_class, meth.__name__)",
        "detail": "pygame-1.9.6.test.test_utils.test_machinery",
        "documentation": {}
    },
    {
        "label": "TAGS_RE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_machinery",
        "description": "pygame-1.9.6.test.test_utils.test_machinery",
        "peekOfCode": "TAGS_RE = re.compile(r\"\\|[tT]ags:(-?[ a-zA-Z,0-9_\\n]+)\\|\", re.M)\nclass TestTags:\n    def __init__(self):\n        self.memoized = {}\n        self.parent_modules = {}\n    def get_parent_module(self, class_):\n        if class_ not in self.parent_modules:\n            self.parent_modules[class_] = import_submodule(class_.__module__)\n        return self.parent_modules[class_]\n    def __call__(self, parent_class, meth):",
        "detail": "pygame-1.9.6.test.test_utils.test_machinery",
        "documentation": {}
    },
    {
        "label": "get_tags",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_machinery",
        "description": "pygame-1.9.6.test.test_utils.test_machinery",
        "peekOfCode": "get_tags = TestTags()",
        "detail": "pygame-1.9.6.test.test_utils.test_machinery",
        "documentation": {}
    },
    {
        "label": "prepare_test_env",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "def prepare_test_env():\n    test_subdir = os.path.split(os.path.split(os.path.abspath(__file__))[0])[0]\n    main_dir = os.path.split(test_subdir)[0]\n    sys.path.insert(0, test_subdir)\n    fake_test_subdir = os.path.join(test_subdir, 'run_tests__tests')\n    return main_dir, test_subdir, fake_test_subdir\nmain_dir, test_subdir, fake_test_subdir = prepare_test_env()\n################################################################################\n# Set the command line options\n#",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "exclude_callback",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "def exclude_callback(option, opt, value, parser):\n    if EXCLUDE_RE.match(value) is None:\n        raise optparse.OptionValueError(\"%s argument has invalid value\" %\n                                          (opt,))\n    parser.values.exclude = TAG_RE.findall(value)\nopt_parser = optparse.OptionParser()\nopt_parser.add_option (\n     \"-i\",  \"--incomplete\", action = 'store_true',\n     help   = \"fail incomplete tests\" )\nopt_parser.add_option (",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "combine_results",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "def combine_results(all_results, t):\n    \"\"\"\n    Return pieced together results in a form fit for human consumption. Don't\n    rely on results if  piecing together subprocessed  results (single process\n    mode is fine). Was originally meant for that  purpose but was found to be\n    unreliable.  See the dump option for reliable results.\n    \"\"\"\n    all_dots = ''\n    failures = []\n    for module, results in sorted(all_results.items()):",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "get_test_results",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "def get_test_results(raw_return):\n    test_results = TEST_RESULTS_RE.search(raw_return)\n    if test_results:\n        try:\n            return eval(test_results.group(1))\n        except:\n            print (\"BUGGY TEST RESULTS EVAL:\\n %s\" % test_results.group(1))\n            raise\n################################################################################\ndef run_test(module, incomplete=False, usesubprocess=True, randomize=False,",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "run_test",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "def run_test(module, incomplete=False, usesubprocess=True, randomize=False,\n             exclude=('interactive',), buffer=True):\n    \"\"\"Run a unit test module\n    \"\"\"\n    suite = unittest.TestSuite()\n    print ('loading %s' % module)\n    loader = PygameTestLoader(randomize_tests=randomize,\n                              include_incomplete=incomplete,\n                              exclude=exclude)\n    suite.addTest(loader.loadTestsFromName(module))",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "TAG_PAT",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "TAG_PAT = r'-?[a-zA-Z0-9_]+'\nTAG_RE = re.compile(TAG_PAT)\nEXCLUDE_RE = re.compile(\"(%s,?\\s*)+$\" % (TAG_PAT,))\ndef exclude_callback(option, opt, value, parser):\n    if EXCLUDE_RE.match(value) is None:\n        raise optparse.OptionValueError(\"%s argument has invalid value\" %\n                                          (opt,))\n    parser.values.exclude = TAG_RE.findall(value)\nopt_parser = optparse.OptionParser()\nopt_parser.add_option (",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "TAG_RE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "TAG_RE = re.compile(TAG_PAT)\nEXCLUDE_RE = re.compile(\"(%s,?\\s*)+$\" % (TAG_PAT,))\ndef exclude_callback(option, opt, value, parser):\n    if EXCLUDE_RE.match(value) is None:\n        raise optparse.OptionValueError(\"%s argument has invalid value\" %\n                                          (opt,))\n    parser.values.exclude = TAG_RE.findall(value)\nopt_parser = optparse.OptionParser()\nopt_parser.add_option (\n     \"-i\",  \"--incomplete\", action = 'store_true',",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "EXCLUDE_RE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "EXCLUDE_RE = re.compile(\"(%s,?\\s*)+$\" % (TAG_PAT,))\ndef exclude_callback(option, opt, value, parser):\n    if EXCLUDE_RE.match(value) is None:\n        raise optparse.OptionValueError(\"%s argument has invalid value\" %\n                                          (opt,))\n    parser.values.exclude = TAG_RE.findall(value)\nopt_parser = optparse.OptionParser()\nopt_parser.add_option (\n     \"-i\",  \"--incomplete\", action = 'store_true',\n     help   = \"fail incomplete tests\" )",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "opt_parser",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "opt_parser = optparse.OptionParser()\nopt_parser.add_option (\n     \"-i\",  \"--incomplete\", action = 'store_true',\n     help   = \"fail incomplete tests\" )\nopt_parser.add_option (\n     \"-s\",  \"--usesubprocess\", action = \"store_true\",\n     help   = \"run everything in a single process \"\n              \" (default: use no subprocesses)\" )\nopt_parser.add_option (\n     \"-e\",  \"--exclude\",",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "TIME_OUT",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "TIME_OUT = 30\n# DEFAULTS\n################################################################################\n# Human readable output\n#\nCOMPLETE_FAILURE_TEMPLATE = \"\"\"\n======================================================================\nERROR: all_tests_for (%(module)s.AllTestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "COMPLETE_FAILURE_TEMPLATE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "COMPLETE_FAILURE_TEMPLATE = \"\"\"\n======================================================================\nERROR: all_tests_for (%(module)s.AllTestCases)\n----------------------------------------------------------------------\nTraceback (most recent call last):\n  File \"test/%(module)s.py\", line 1, in all_tests_for\nsubprocess completely failed with return code of %(return_code)s\ncmd:          %(cmd)s\ntest_env:     %(test_env)s\nworking_dir:  %(working_dir)s",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "RAN_TESTS_DIV",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "RAN_TESTS_DIV = (70 * \"-\") + \"\\nRan\"\nDOTS = re.compile(\"^([FE.sux]*)$\", re.MULTILINE)\ndef combine_results(all_results, t):\n    \"\"\"\n    Return pieced together results in a form fit for human consumption. Don't\n    rely on results if  piecing together subprocessed  results (single process\n    mode is fine). Was originally meant for that  purpose but was found to be\n    unreliable.  See the dump option for reliable results.\n    \"\"\"\n    all_dots = ''",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "DOTS",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "DOTS = re.compile(\"^([FE.sux]*)$\", re.MULTILINE)\ndef combine_results(all_results, t):\n    \"\"\"\n    Return pieced together results in a form fit for human consumption. Don't\n    rely on results if  piecing together subprocessed  results (single process\n    mode is fine). Was originally meant for that  purpose but was found to be\n    unreliable.  See the dump option for reliable results.\n    \"\"\"\n    all_dots = ''\n    failures = []",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "TEST_RESULTS_START",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "TEST_RESULTS_START = \"<--!! TEST RESULTS START HERE !!-->\"\nTEST_RESULTS_END = \"<--!! TEST RESULTS END HERE !!-->\"\n_test_re_str = '%s\\n(.*)%s' % (TEST_RESULTS_START, TEST_RESULTS_END)\nTEST_RESULTS_RE = re.compile(_test_re_str, re.DOTALL | re.M)\ndef get_test_results(raw_return):\n    test_results = TEST_RESULTS_RE.search(raw_return)\n    if test_results:\n        try:\n            return eval(test_results.group(1))\n        except:",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "TEST_RESULTS_END",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "TEST_RESULTS_END = \"<--!! TEST RESULTS END HERE !!-->\"\n_test_re_str = '%s\\n(.*)%s' % (TEST_RESULTS_START, TEST_RESULTS_END)\nTEST_RESULTS_RE = re.compile(_test_re_str, re.DOTALL | re.M)\ndef get_test_results(raw_return):\n    test_results = TEST_RESULTS_RE.search(raw_return)\n    if test_results:\n        try:\n            return eval(test_results.group(1))\n        except:\n            print (\"BUGGY TEST RESULTS EVAL:\\n %s\" % test_results.group(1))",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "_test_re_str",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "_test_re_str = '%s\\n(.*)%s' % (TEST_RESULTS_START, TEST_RESULTS_END)\nTEST_RESULTS_RE = re.compile(_test_re_str, re.DOTALL | re.M)\ndef get_test_results(raw_return):\n    test_results = TEST_RESULTS_RE.search(raw_return)\n    if test_results:\n        try:\n            return eval(test_results.group(1))\n        except:\n            print (\"BUGGY TEST RESULTS EVAL:\\n %s\" % test_results.group(1))\n            raise",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "TEST_RESULTS_RE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.test_utils.test_runner",
        "description": "pygame-1.9.6.test.test_utils.test_runner",
        "peekOfCode": "TEST_RESULTS_RE = re.compile(_test_re_str, re.DOTALL | re.M)\ndef get_test_results(raw_return):\n    test_results = TEST_RESULTS_RE.search(raw_return)\n    if test_results:\n        try:\n            return eval(test_results.group(1))\n        except:\n            print (\"BUGGY TEST RESULTS EVAL:\\n %s\" % test_results.group(1))\n            raise\n################################################################################",
        "detail": "pygame-1.9.6.test.test_utils.test_runner",
        "documentation": {}
    },
    {
        "label": "test_add",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def test_add(self):\n    # Doc string for pygame.sprite.Sprite:\n    ...\n\"\"\"\n#################################### IMPORTS ###################################\nfrom optparse import OptionParser\nfrom inspect import isclass, ismodule, getdoc, isgetsetdescriptor, getmembers\nimport pygame, sys, datetime, re, types\nimport relative_indentation\nimport textwrap",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "get_Movie",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def get_Movie():\n    return pygame.movie.Movie( trunk_relative_path('examples/data/blue.mpg') )\nMUST_INSTANTIATE = {\n    # BaseType / Helper               # (Instantiator / Args) / Callable\n    pygame.cdrom.CDType            :  (pygame.cdrom.CD,      (0,)),\n    pygame.mixer.ChannelType       :  (pygame.mixer.Channel, (0,)),\n    pygame.time.Clock              :  (pygame.time.Clock,    ()),\n    pygame.mask.Mask               :  (pygame.mask.Mask,     ((32,32),)),\n    pygame.movie.Movie             :  get_Movie,\n    # pygame.event.Event         :  None,",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "get_instance",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def get_instance(type_):\n    pygame.init()\n    helper = MUST_INSTANTIATE.get(type_)\n    if callable(helper): return helper()\n    helper, arg = helper\n    try:\n        return helper(*arg)\n    except Exception, e:\n        raw_input(\"FAILED TO CREATE INSTANCE OF %s\\n%s\\n\" \n                  \"Press Enter to continue\" % (type_, e))",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "module_in_package",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def module_in_package(module, pkg):\n    return (\"%s.\" % pkg.__name__) in module.__name__\ndef get_package_modules(pkg):\n    modules = (getattr(pkg, x) for x in dir(pkg) if is_public(x))\n    return [m for m in modules if ismodule(m) and module_in_package(m, pkg)]\n                                                 # Don't want to pick up \n                                                 # string module for example\ndef py_comment(input_str):\n    lines = []\n    for line in input_str.split('\\n'):",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "get_package_modules",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def get_package_modules(pkg):\n    modules = (getattr(pkg, x) for x in dir(pkg) if is_public(x))\n    return [m for m in modules if ismodule(m) and module_in_package(m, pkg)]\n                                                 # Don't want to pick up \n                                                 # string module for example\ndef py_comment(input_str):\n    lines = []\n    for line in input_str.split('\\n'):\n        if len(line) > 80:\n            lines += textwrap.wrap(line, 68)",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "py_comment",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def py_comment(input_str):\n    lines = []\n    for line in input_str.split('\\n'):\n        if len(line) > 80:\n            lines += textwrap.wrap(line, 68)\n            lines += ['']\n        else:\n            lines += [line]\n    return '\\n'.join([('# ' + l) for l in lines]).rstrip('\\n# ')\ndef is_public(obj_name):",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "is_public",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def is_public(obj_name):\n    try: obj_name += ''\n    except TypeError: obj_name = obj_name.__name__\n    return not obj_name.startswith(('__','_'))\ndef get_callables(obj, if_of = None, check_where_defined=False):\n    publics = (getattr(obj, x) for x in dir(obj) if is_public(x))\n    callables = (x for x in publics if callable(x) or isgetsetdescriptor(x))\n    if check_where_defined:\n        callables = (c for c in callables if ( 'pygame' in c.__module__ or\n                    ('__builtin__' == c.__module__ and isclass(c)) )",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "get_callables",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def get_callables(obj, if_of = None, check_where_defined=False):\n    publics = (getattr(obj, x) for x in dir(obj) if is_public(x))\n    callables = (x for x in publics if callable(x) or isgetsetdescriptor(x))\n    if check_where_defined:\n        callables = (c for c in callables if ( 'pygame' in c.__module__ or\n                    ('__builtin__' == c.__module__ and isclass(c)) )\n                    and REAL_HOMES.get(c, 0) in (obj, 0))\n    if if_of:\n        callables = (x for x in callables if if_of(x)) # isclass, ismethod etc\n    return set(callables)",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "get_class_from_test_case",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def get_class_from_test_case(TC):\n    TC = getattr(TC, \"__name__\", str(TC))\n    if 'Type' in TC: return TC[:TC.rindex('Type')]\ndef names_of(*args):\n    return tuple(map(lambda o: getattr(o, \"__name__\", str(o)), args))\ndef callable_name(*args):\n    args = [a for a in args if a]\n    return ('.'.join(['%s'] * len(args))) % names_of(*args)\n################################################################################\ndef test_stub(f, module, parent_class = None):",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "names_of",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def names_of(*args):\n    return tuple(map(lambda o: getattr(o, \"__name__\", str(o)), args))\ndef callable_name(*args):\n    args = [a for a in args if a]\n    return ('.'.join(['%s'] * len(args))) % names_of(*args)\n################################################################################\ndef test_stub(f, module, parent_class = None):\n    test_name = 'todo_test_%s' % f.__name__\n    unit_name = callable_name(module, parent_class, f)\n    stub = STUB_TEMPLATE.render (",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "callable_name",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def callable_name(*args):\n    args = [a for a in args if a]\n    return ('.'.join(['%s'] * len(args))) % names_of(*args)\n################################################################################\ndef test_stub(f, module, parent_class = None):\n    test_name = 'todo_test_%s' % f.__name__\n    unit_name = callable_name(module, parent_class, f)\n    stub = STUB_TEMPLATE.render (\n        test_name = test_name,\n        # docs is a global, possibly empty dict, depending on options.docs",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "test_stub",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def test_stub(f, module, parent_class = None):\n    test_name = 'todo_test_%s' % f.__name__\n    unit_name = callable_name(module, parent_class, f)\n    stub = STUB_TEMPLATE.render (\n        test_name = test_name,\n        # docs is a global, possibly empty dict, depending on options.docs\n        comments = py_comment ( \"%s\\n\\n%s\" %\n            (\n                getdoc(f) or '', docs.get(unit_name, ''),\n            )",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "make_stubs",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def make_stubs(seq, module, class_=None):\n    return dict( test_stub(c, module, class_) for c in seq )\ndef module_stubs(module):\n    stubs = {}\n    all_callables = get_callables(module, check_where_defined = True) - IGNORES\n    classes = set (\n        c for c in all_callables if isclass(c) or c in MUST_INSTANTIATE\n    )\n    for class_ in classes:\n        base_type = class_",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "module_stubs",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def module_stubs(module):\n    stubs = {}\n    all_callables = get_callables(module, check_where_defined = True) - IGNORES\n    classes = set (\n        c for c in all_callables if isclass(c) or c in MUST_INSTANTIATE\n    )\n    for class_ in classes:\n        base_type = class_\n        if class_ in MUST_INSTANTIATE:\n            class_ = get_instance(class_)",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "package_stubs",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def package_stubs(package):\n    stubs = dict()\n    for module in get_package_modules(package):\n        stubs.update(module_stubs(module))\n    return stubs\n################################################################################\nTEST_NAME_RE = re.compile(r\"test[_\\d]+(.*)\")\n              # re.compile(r\"test[\\d_]+((?:[^_]+.[^_])+)\") #\ndef is_test(f):\n    return f.__name__.startswith(('test_', 'todo_'))",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "is_test",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def is_test(f):\n    return f.__name__.startswith(('test_', 'todo_'))\ndef get_tested_from_testname(test):\n    tn = getattr(test.__name__, str(test))\n    separated = tn.rfind('__')\n    if separated != -1: tn = tn[:separated]\n    return TEST_NAME_RE.search(tn).group(1)\n################################################################################\ndef already_tested_in_module(module):\n    already = []",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "get_tested_from_testname",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def get_tested_from_testname(test):\n    tn = getattr(test.__name__, str(test))\n    separated = tn.rfind('__')\n    if separated != -1: tn = tn[:separated]\n    return TEST_NAME_RE.search(tn).group(1)\n################################################################################\ndef already_tested_in_module(module):\n    already = []\n    mod_name =  module.__name__\n    test_name = \"%s_test\" % mod_name[7:]",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "already_tested_in_module",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def already_tested_in_module(module):\n    already = []\n    mod_name =  module.__name__\n    test_name = \"%s_test\" % mod_name[7:]\n    try: test_file = __import__(test_name)\n    except ImportError:                              #TODO:  create a test file?\n        return []\n    classes = get_callables(test_file, isclass)\n    test_cases = (t for t in classes if TestCase in t.__bases__)\n    for class_ in test_cases:",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "already_tested_in_package",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def already_tested_in_package(package):\n    already = []\n    for module in get_package_modules(package):\n        already += already_tested_in_module(module)\n    return already\n################################################################################\ndef get_stubs(root):\n    module_root = module_re.search(root)\n    if module_root:\n        try:",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "get_stubs",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "def get_stubs(root):\n    module_root = module_re.search(root)\n    if module_root:\n        try:\n            module = getattr(pygame, module_root.group(1))\n        except AttributeError:\n            __import__( 'pygame.' + module_root.group(1) )\n            module = getattr(pygame, module_root.group(1))\n        stubs = module_stubs(module)\n        tested = already_tested_in_module(module)",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "usage_text",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "usage_text = \"\"\"\n$ %prog ROOT\neg. \n$ %prog sprite.Sprite\ndef test_add(self):\n    # Doc string for pygame.sprite.Sprite:\n    ...\n\"\"\"\n#################################### IMPORTS ###################################\nfrom optparse import OptionParser",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "IGNORES",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "IGNORES = set([\n    pygame.rect.Rect.h,           pygame.rect.Rect.w,\n    pygame.rect.Rect.x,           pygame.rect.Rect.y,\n    pygame.color.Color.a,         pygame.color.Color.b,\n    pygame.color.Color.g,         pygame.color.Color.r,\n    # Ignore by class: all methods and getter setters cut from root\n    # pygame.sprite.AbstractGroup,\n    pygame.sprite.LayeredUpdates,\n    pygame.sprite.LayeredDirty,\n    pygame.sprite.OrderedUpdates,",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "REAL_HOMES",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "REAL_HOMES = {\n    pygame.rect.Rect         : pygame.rect,\n    pygame.mask.from_surface : pygame.mask,\n    pygame.time.get_ticks    : pygame.time,\n    pygame.event.Event       : pygame.event,\n    pygame.event.event_name  : pygame.event,\n    pygame.font.SysFont      : pygame.font,\n    pygame.font.get_fonts    : pygame.font,\n    pygame.font.match_font   : pygame.font,\n}",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "MUST_INSTANTIATE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "MUST_INSTANTIATE = {\n    # BaseType / Helper               # (Instantiator / Args) / Callable\n    pygame.cdrom.CDType            :  (pygame.cdrom.CD,      (0,)),\n    pygame.mixer.ChannelType       :  (pygame.mixer.Channel, (0,)),\n    pygame.time.Clock              :  (pygame.time.Clock,    ()),\n    pygame.mask.Mask               :  (pygame.mask.Mask,     ((32,32),)),\n    pygame.movie.Movie             :  get_Movie,\n    # pygame.event.Event         :  None,\n    # pygame.joystick.Joystick   :  None,\n    # pygame.display.Info        :  None,",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "date",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "date = datetime.datetime.now().date()\nSTUB_TEMPLATE = relative_indentation.Template ( '''\n    def ${test_name}(self):\n        # __doc__ (as of %s) for ${unitname}:\n          ${comments}\n        self.fail() ''' % date, \n        strip_common = 0, strip_excess = 0\n)\n############################## REGULAR EXPRESSIONS #############################\nmodule_re = re.compile(r\"pygame\\.([^.]+)\\.?\")",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "STUB_TEMPLATE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "STUB_TEMPLATE = relative_indentation.Template ( '''\n    def ${test_name}(self):\n        # __doc__ (as of %s) for ${unitname}:\n          ${comments}\n        self.fail() ''' % date, \n        strip_common = 0, strip_excess = 0\n)\n############################## REGULAR EXPRESSIONS #############################\nmodule_re = re.compile(r\"pygame\\.([^.]+)\\.?\")\n#################################### OPTIONS ###################################",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "module_re",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "module_re = re.compile(r\"pygame\\.([^.]+)\\.?\")\n#################################### OPTIONS ###################################\nopt_parser = OptionParser()\nopt_parser.add_option (\n     \"-l\",  \"--list\", action = 'store_true',\n     help   = \"list callable names not stubs\" )\nopt_parser.add_option (\n     \"-t\",  \"--test_names\", action = 'store_true',\n     help   = \"list test names not stubs\" )\nopt_parser.add_option (",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "opt_parser",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "opt_parser = OptionParser()\nopt_parser.add_option (\n     \"-l\",  \"--list\", action = 'store_true',\n     help   = \"list callable names not stubs\" )\nopt_parser.add_option (\n     \"-t\",  \"--test_names\", action = 'store_true',\n     help   = \"list test names not stubs\" )\nopt_parser.add_option (\n     \"-d\",  \"--docs\", action = 'store_true',\n     help   = \"get (more detailed) docs using makeref.py\" )",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "docs",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "docs = {}\ndef module_in_package(module, pkg):\n    return (\"%s.\" % pkg.__name__) in module.__name__\ndef get_package_modules(pkg):\n    modules = (getattr(pkg, x) for x in dir(pkg) if is_public(x))\n    return [m for m in modules if ismodule(m) and module_in_package(m, pkg)]\n                                                 # Don't want to pick up \n                                                 # string module for example\ndef py_comment(input_str):\n    lines = []",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "TEST_NAME_RE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.gen_stubs",
        "description": "pygame-1.9.6.test.util.gen_stubs",
        "peekOfCode": "TEST_NAME_RE = re.compile(r\"test[_\\d]+(.*)\")\n              # re.compile(r\"test[\\d_]+((?:[^_]+.[^_])+)\") #\ndef is_test(f):\n    return f.__name__.startswith(('test_', 'todo_'))\ndef get_tested_from_testname(test):\n    tn = getattr(test.__name__, str(test))\n    separated = tn.rfind('__')\n    if separated != -1: tn = tn[:separated]\n    return TEST_NAME_RE.search(tn).group(1)\n################################################################################",
        "detail": "pygame-1.9.6.test.util.gen_stubs",
        "documentation": {}
    },
    {
        "label": "Template",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.util.relative_indentation",
        "description": "pygame-1.9.6.test.util.relative_indentation",
        "peekOfCode": "class Template(object):\n    def __call__(self): \n        return self\n    def __init__(self, template, strip_common = True, strip_excess = True):\n        if strip_common: template = strip_common_preceding_space(template)\n        if strip_excess: template = template.strip() + '\\n'\n        self.template = template\n        self.find_ph_offsets()\n    def find_ph_offsets(self):\n        self.ph_offsets = dict()",
        "detail": "pygame-1.9.6.test.util.relative_indentation",
        "documentation": {}
    },
    {
        "label": "strip_common_preceding_space",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.relative_indentation",
        "description": "pygame-1.9.6.test.util.relative_indentation",
        "peekOfCode": "def strip_common_preceding_space(input_str):\n    \"Strips preceding common space so only relative indentation remains\"\n    preceding_whitespace = re.compile(\"^(?:(\\s*?)\\S)?\")\n    common_start = len(input_str)\n    split = input_str.split(\"\\n\")\n    for line in (l for l in split if l.strip()):\n        for match in preceding_whitespace.finditer(line):\n            common_start = min(match.span(1)[1], common_start)\n    return \"\\n\".join( [l[common_start:] for l in split] )\ndef pad_secondary_lines(input_str, padding):",
        "detail": "pygame-1.9.6.test.util.relative_indentation",
        "documentation": {}
    },
    {
        "label": "pad_secondary_lines",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.util.relative_indentation",
        "description": "pygame-1.9.6.test.util.relative_indentation",
        "peekOfCode": "def pad_secondary_lines(input_str, padding):\n    split = input_str.split('\\n')\n    return '\\n'.join( [split[0]] + [(padding+l) for l in split[1:]] )\n################################################################################\nph_re = re.compile(\"\\${(.*?)}\")\nmulti_line_re = re.MULTILINE | re.DOTALL\n################################################################################\nclass Template(object):\n    def __call__(self): \n        return self",
        "detail": "pygame-1.9.6.test.util.relative_indentation",
        "documentation": {}
    },
    {
        "label": "ph_re",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.relative_indentation",
        "description": "pygame-1.9.6.test.util.relative_indentation",
        "peekOfCode": "ph_re = re.compile(\"\\${(.*?)}\")\nmulti_line_re = re.MULTILINE | re.DOTALL\n################################################################################\nclass Template(object):\n    def __call__(self): \n        return self\n    def __init__(self, template, strip_common = True, strip_excess = True):\n        if strip_common: template = strip_common_preceding_space(template)\n        if strip_excess: template = template.strip() + '\\n'\n        self.template = template",
        "detail": "pygame-1.9.6.test.util.relative_indentation",
        "documentation": {}
    },
    {
        "label": "multi_line_re",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.relative_indentation",
        "description": "pygame-1.9.6.test.util.relative_indentation",
        "peekOfCode": "multi_line_re = re.MULTILINE | re.DOTALL\n################################################################################\nclass Template(object):\n    def __call__(self): \n        return self\n    def __init__(self, template, strip_common = True, strip_excess = True):\n        if strip_common: template = strip_common_preceding_space(template)\n        if strip_excess: template = template.strip() + '\\n'\n        self.template = template\n        self.find_ph_offsets()",
        "detail": "pygame-1.9.6.test.util.relative_indentation",
        "documentation": {}
    },
    {
        "label": "lines",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.svn_log_to_whatsnew",
        "description": "pygame-1.9.6.test.util.svn_log_to_whatsnew",
        "peekOfCode": "lines = sys.stdin.readlines()\nout= []\nstate = \"none\"\nfor l in lines:\n    if \"-------\" in l:\n        state = \"revision date line\"\n        continue\n    if state == \"revision date line\":\n        parts = l.split(\"|\")\n        out.append({})",
        "detail": "pygame-1.9.6.test.util.svn_log_to_whatsnew",
        "documentation": {}
    },
    {
        "label": "state",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.svn_log_to_whatsnew",
        "description": "pygame-1.9.6.test.util.svn_log_to_whatsnew",
        "peekOfCode": "state = \"none\"\nfor l in lines:\n    if \"-------\" in l:\n        state = \"revision date line\"\n        continue\n    if state == \"revision date line\":\n        parts = l.split(\"|\")\n        out.append({})\n        out[-1]['revision'] = parts[0].strip().replace(\"r\", \"\")\n        out[-1]['username'] = parts[1].strip()",
        "detail": "pygame-1.9.6.test.util.svn_log_to_whatsnew",
        "documentation": {}
    },
    {
        "label": "previous",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.util.svn_log_to_whatsnew",
        "description": "pygame-1.9.6.test.util.svn_log_to_whatsnew",
        "peekOfCode": "previous = []\nfor o in (out + [None]):\n    if o and previous and o['day_month_year'] == previous[-1]['day_month_year']:\n        previous.append(o)\n        continue\n    else:\n        if not previous:\n            previous.append(o)\n            continue\n        day, month, year = previous[-1]['day_month_year']",
        "detail": "pygame-1.9.6.test.util.svn_log_to_whatsnew",
        "documentation": {}
    },
    {
        "label": "BaseModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.base_test",
        "description": "pygame-1.9.6.test.base_test",
        "peekOfCode": "class BaseModuleTest(unittest.TestCase):\n    def tearDown(self):\n        # Clean up after each test method.\n        pygame.quit()\n    def testAutoInit(self):\n        pygame.init()\n        pygame.quit()\n        self.assertEqual(init_called, 1)\n        self.assertEqual(quit_called, 1)\n    def test_get_sdl_byteorder(self):",
        "detail": "pygame-1.9.6.test.base_test",
        "documentation": {}
    },
    {
        "label": "pygame_quit",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.base_test",
        "description": "pygame-1.9.6.test.base_test",
        "peekOfCode": "def pygame_quit():\n    global quit_called\n    quit_called = quit_called + 1\nquit_hook_ran = 0\ndef quit_hook():\n    global quit_hook_ran\n    quit_hook_ran = 1\nclass BaseModuleTest(unittest.TestCase):\n    def tearDown(self):\n        # Clean up after each test method.",
        "detail": "pygame-1.9.6.test.base_test",
        "documentation": {}
    },
    {
        "label": "quit_hook",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.base_test",
        "description": "pygame-1.9.6.test.base_test",
        "peekOfCode": "def quit_hook():\n    global quit_hook_ran\n    quit_hook_ran = 1\nclass BaseModuleTest(unittest.TestCase):\n    def tearDown(self):\n        # Clean up after each test method.\n        pygame.quit()\n    def testAutoInit(self):\n        pygame.init()\n        pygame.quit()",
        "detail": "pygame-1.9.6.test.base_test",
        "documentation": {}
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.base_test",
        "description": "pygame-1.9.6.test.base_test",
        "peekOfCode": "IS_PYPY = 'PyPy' == platform.python_implementation()\ntry:\n    from pygame.tests.test_utils import arrinter\nexcept NameError:\n    pass\nimport pygame\ninit_called = quit_called = 0\ndef __PYGAMEinit__(): #called automatically by pygame.init()\n    global init_called\n    init_called = init_called + 1",
        "detail": "pygame-1.9.6.test.base_test",
        "documentation": {}
    },
    {
        "label": "init_called",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.base_test",
        "description": "pygame-1.9.6.test.base_test",
        "peekOfCode": "init_called = quit_called = 0\ndef __PYGAMEinit__(): #called automatically by pygame.init()\n    global init_called\n    init_called = init_called + 1\n    pygame.register_quit(pygame_quit)\ndef pygame_quit():\n    global quit_called\n    quit_called = quit_called + 1\nquit_hook_ran = 0\ndef quit_hook():",
        "detail": "pygame-1.9.6.test.base_test",
        "documentation": {}
    },
    {
        "label": "quit_hook_ran",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.base_test",
        "description": "pygame-1.9.6.test.base_test",
        "peekOfCode": "quit_hook_ran = 0\ndef quit_hook():\n    global quit_hook_ran\n    quit_hook_ran = 1\nclass BaseModuleTest(unittest.TestCase):\n    def tearDown(self):\n        # Clean up after each test method.\n        pygame.quit()\n    def testAutoInit(self):\n        pygame.init()",
        "detail": "pygame-1.9.6.test.base_test",
        "documentation": {}
    },
    {
        "label": "BlitTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.blit_test",
        "description": "pygame-1.9.6.test.blit_test",
        "peekOfCode": "class BlitTest( unittest.TestCase ):\n    def test_SRCALPHA( self ):\n        \"\"\" SRCALPHA tests.\n        \"\"\"\n        #blend(s, 0, d) = d\n        s = pygame.Surface((1,1), SRCALPHA, 32)\n        s.fill((255, 255,255, 0))\n        d = pygame.Surface((1,1), SRCALPHA, 32)\n        d.fill((0, 0,255, 255))\n        s.blit(d, (0,0))",
        "detail": "pygame-1.9.6.test.blit_test",
        "documentation": {}
    },
    {
        "label": "BufferProxyTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.bufferproxy_test",
        "description": "pygame-1.9.6.test.bufferproxy_test",
        "peekOfCode": "class BufferProxyTest(unittest.TestCase):\n    view_keywords = {'shape': (5, 4, 3),\n                     'typestr': '|u1',\n                     'data': (0, True),\n                     'strides': (4, 20, 1)}\n    def test_module_name(self):\n        self.assertEqual(pygame.bufferproxy.__name__,\n                         \"pygame.bufferproxy\")\n    def test_class_name(self):\n        self.assertEqual(BufferProxy.__name__, \"BufferProxy\")",
        "detail": "pygame-1.9.6.test.bufferproxy_test",
        "documentation": {}
    },
    {
        "label": "BufferProxyLegacyTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.bufferproxy_test",
        "description": "pygame-1.9.6.test.bufferproxy_test",
        "peekOfCode": "class BufferProxyLegacyTest(unittest.TestCase):\n    content = as_bytes('\\x01\\x00\\x00\\x02') * 12\n    buffer = ctypes.create_string_buffer(content)\n    data = (ctypes.addressof(buffer), True)\n    def test_length(self):\n        # __doc__ (as of 2008-08-02) for pygame.bufferproxy.BufferProxy.length:\n          # The size of the buffer data in bytes.\n        bf = BufferProxy({'shape': (3, 4),\n                          'typestr': '|u4',\n                          'data': self.data,",
        "detail": "pygame-1.9.6.test.bufferproxy_test",
        "documentation": {}
    },
    {
        "label": "CameraModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.camera_test",
        "description": "pygame-1.9.6.test.camera_test",
        "peekOfCode": "class CameraModuleTest(unittest.TestCase):\n    pass",
        "detail": "pygame-1.9.6.test.camera_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.cdrom_tags",
        "description": "pygame-1.9.6.test.cdrom_tags",
        "peekOfCode": "__tags__ = ['interactive', 'SDL2_ignore']",
        "detail": "pygame-1.9.6.test.cdrom_tags",
        "documentation": {}
    },
    {
        "label": "CDROMModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.cdrom_test",
        "description": "pygame-1.9.6.test.cdrom_test",
        "peekOfCode": "class CDROMModuleTest(unittest.TestCase):\n    def setUp(self):\n        pygame.cdrom.init()\n    def tearDown(self):\n        pygame.cdrom.quit()\n    def todo_test_CD(self):\n        # __doc__ (as of 2008-08-02) for pygame.cdrom.CD:\n          # pygame.cdrom.CD(id): return CD\n          # class to manage a cdrom drive\n          #",
        "detail": "pygame-1.9.6.test.cdrom_test",
        "documentation": {}
    },
    {
        "label": "CDTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.cdrom_test",
        "description": "pygame-1.9.6.test.cdrom_test",
        "peekOfCode": "class CDTypeTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        pygame.cdrom.init()\n        cls._cd_id = 0  # Only testing drive 0 for now. Expand in the future.\n        cls._cd = pygame.cdrom.CD(cls._cd_id)\n    @classmethod\n    def tearDownClass(cls):\n        pygame.cdrom.quit()\n    def setUp(self):",
        "detail": "pygame-1.9.6.test.cdrom_test",
        "documentation": {}
    },
    {
        "label": "CD_DRIVE_COUNT",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.cdrom_test",
        "description": "pygame-1.9.6.test.cdrom_test",
        "peekOfCode": "CD_DRIVE_COUNT = pygame.cdrom.get_count()\npygame.cdrom.quit()\nclass CDROMModuleTest(unittest.TestCase):\n    def setUp(self):\n        pygame.cdrom.init()\n    def tearDown(self):\n        pygame.cdrom.quit()\n    def todo_test_CD(self):\n        # __doc__ (as of 2008-08-02) for pygame.cdrom.CD:\n          # pygame.cdrom.CD(id): return CD",
        "detail": "pygame-1.9.6.test.cdrom_test",
        "documentation": {}
    },
    {
        "label": "ColorTypeTes",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.color_test",
        "description": "pygame-1.9.6.test.color_test",
        "peekOfCode": "class ColorTypeTest (unittest.TestCase):\n    def test_new(self):\n        c = pygame.Color.__new__(pygame.Color)\n        self.assertEqual(c, pygame.Color(0, 0, 0, 255))\n        self.assertEqual(len(c), 4)\n    def test_init(self):\n        c = pygame.Color(10, 20, 30, 200)\n        self.assertEqual(c, (10, 20, 30, 200))\n        c.set_length(3)\n        self.assertEqual(len(c), 3)",
        "detail": "pygame-1.9.6.test.color_test",
        "documentation": {}
    },
    {
        "label": "SubclassTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.color_test",
        "description": "pygame-1.9.6.test.color_test",
        "peekOfCode": "class SubclassTest(unittest.TestCase):\n    class MyColor(pygame.Color):\n        def __init__ (self, *args, **kwds):\n            super(SubclassTest.MyColor, self).__init__ (*args, **kwds)\n            self.an_attribute = True\n    def test_add(self):\n        mc1 = self.MyColor(128, 128, 128, 255)\n        self.assertTrue(mc1.an_attribute)\n        c2 = pygame.Color(64, 64, 64, 255)\n        mc2 = mc1 + c2",
        "detail": "pygame-1.9.6.test.color_test",
        "documentation": {}
    },
    {
        "label": "rgba_combos_Color_generator",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.color_test",
        "description": "pygame-1.9.6.test.color_test",
        "peekOfCode": "def rgba_combos_Color_generator():\n    for rgba in rgba_combinations:\n        yield pygame.Color(*rgba)\n# Python gamma correct\ndef gamma_correct(rgba_0_255, gamma):\n    corrected = round(255.0 * math.pow(rgba_0_255 / 255.0, gamma))\n    return max(min(int(corrected), 255), 0)\n################################################################################\n# TODO: add tests for\n# correct_gamma()  -- test against statically defined verified correct values",
        "detail": "pygame-1.9.6.test.color_test",
        "documentation": {}
    },
    {
        "label": "gamma_correct",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.color_test",
        "description": "pygame-1.9.6.test.color_test",
        "peekOfCode": "def gamma_correct(rgba_0_255, gamma):\n    corrected = round(255.0 * math.pow(rgba_0_255 / 255.0, gamma))\n    return max(min(int(corrected), 255), 0)\n################################################################################\n# TODO: add tests for\n# correct_gamma()  -- test against statically defined verified correct values\n# coerce ()        --  ??\ndef _assignr(x, y):\n    x.r = y\ndef _assigng(x, y):",
        "detail": "pygame-1.9.6.test.color_test",
        "documentation": {}
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.color_test",
        "description": "pygame-1.9.6.test.color_test",
        "peekOfCode": "IS_PYPY = 'PyPy' == platform.python_implementation()\n################################### CONSTANTS ##################################\nrgba_vals = [0, 1, 62, 63, 126, 127, 255]\nrgba_combinations =  [\n    (r,g,b,a) for r in rgba_vals\n              for g in rgba_vals\n              for b in rgba_vals\n              for a in rgba_vals\n    ]\n################################################################################",
        "detail": "pygame-1.9.6.test.color_test",
        "documentation": {}
    },
    {
        "label": "rgba_vals",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.color_test",
        "description": "pygame-1.9.6.test.color_test",
        "peekOfCode": "rgba_vals = [0, 1, 62, 63, 126, 127, 255]\nrgba_combinations =  [\n    (r,g,b,a) for r in rgba_vals\n              for g in rgba_vals\n              for b in rgba_vals\n              for a in rgba_vals\n    ]\n################################################################################\ndef rgba_combos_Color_generator():\n    for rgba in rgba_combinations:",
        "detail": "pygame-1.9.6.test.color_test",
        "documentation": {}
    },
    {
        "label": "rgba_combinations",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.color_test",
        "description": "pygame-1.9.6.test.color_test",
        "peekOfCode": "rgba_combinations =  [\n    (r,g,b,a) for r in rgba_vals\n              for g in rgba_vals\n              for b in rgba_vals\n              for a in rgba_vals\n    ]\n################################################################################\ndef rgba_combos_Color_generator():\n    for rgba in rgba_combinations:\n        yield pygame.Color(*rgba)",
        "detail": "pygame-1.9.6.test.color_test",
        "documentation": {}
    },
    {
        "label": "CompatModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.compat_test",
        "description": "pygame-1.9.6.test.compat_test",
        "peekOfCode": "class CompatModuleTest(unittest.TestCase):\n    def test_as_unicode(self):\n        r = r'Bo\\u00F6tes'\n        ords = [ord('B'), ord('o'), 0xF6, ord('t'), ord('e'), ord('s')]\n        self.assertEqual(len(r), 11)\n        u = compat.as_unicode(r)\n        self.assertIsInstance(u, compat.unicode_)\n        self.assertEqual([ord(c) for c in u], ords)\n    def test_as_bytes(self):\n        ords = [0, 1, 0x7F, 0x80, 0xC3, 0x20, 0xC3, 0xB6, 0xFF]",
        "detail": "pygame-1.9.6.test.compat_test",
        "documentation": {}
    },
    {
        "label": "encode_file_path",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.compat_test",
        "description": "pygame-1.9.6.test.compat_test",
        "peekOfCode": "encode_file_path = sys.modules['pygame.rwobject'].encode_file_path\nclass CompatModuleTest(unittest.TestCase):\n    def test_as_unicode(self):\n        r = r'Bo\\u00F6tes'\n        ords = [ord('B'), ord('o'), 0xF6, ord('t'), ord('e'), ord('s')]\n        self.assertEqual(len(r), 11)\n        u = compat.as_unicode(r)\n        self.assertIsInstance(u, compat.unicode_)\n        self.assertEqual([ord(c) for c in u], ords)\n    def test_as_bytes(self):",
        "detail": "pygame-1.9.6.test.compat_test",
        "documentation": {}
    },
    {
        "label": "KmodTests",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.constants_test",
        "description": "pygame-1.9.6.test.constants_test",
        "peekOfCode": "class KmodTests(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        cls.constants = [\n            'KMOD_NONE',\n            'KMOD_LSHIFT',\n            'KMOD_RSHIFT',\n            'KMOD_LCTRL',\n            'KMOD_RCTRL',\n            'KMOD_LALT',",
        "detail": "pygame-1.9.6.test.constants_test",
        "documentation": {}
    },
    {
        "label": "KeyConstantTests",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.constants_test",
        "description": "pygame-1.9.6.test.constants_test",
        "peekOfCode": "class KeyConstantTests(unittest.TestCase):\n    def test_letters(self):\n        for c in range(ord('a'), ord('z') + 1):\n            c = chr(c)\n            self.assertTrue(hasattr(pygame.constants, 'K_%s' % c),\n                                    'missing constant: K_%s' % c)\n################################################################################\nif __name__ == '__main__':\n    unittest.main()",
        "detail": "pygame-1.9.6.test.constants_test",
        "documentation": {}
    },
    {
        "label": "CursorsModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.cursors_test",
        "description": "pygame-1.9.6.test.cursors_test",
        "peekOfCode": "class CursorsModuleTest(unittest.TestCase):\n    def todo_test_compile(self):\n        # __doc__ (as of 2008-06-25) for pygame.cursors.compile:\n          # pygame.cursors.compile(strings, black, white,xor) -> data, mask\n          # compile cursor strings into cursor data\n          #\n          # This takes a set of strings with equal length and computes\n          # the binary data for that cursor. The string widths must be\n          # divisible by 8.\n          #",
        "detail": "pygame-1.9.6.test.cursors_test",
        "documentation": {}
    },
    {
        "label": "DisplayModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.display_test",
        "description": "pygame-1.9.6.test.display_test",
        "peekOfCode": "class DisplayModuleTest(unittest.TestCase):\n    default_caption = \"pygame window\"\n    def setUp(self):\n        display.init()\n    def tearDown(self):\n        display.quit()\n    def test_update(self):\n        \"\"\" see if pygame.display.update takes rects with negative values.\n            \"|Tags:display|\"\n        \"\"\"",
        "detail": "pygame-1.9.6.test.display_test",
        "documentation": {}
    },
    {
        "label": "DrawTestCase",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawTestCase(unittest.TestCase):\n    \"\"\"Base class to test draw module functions.\"\"\"\n    draw_rect    = staticmethod(draw.rect)\n    draw_polygon = staticmethod(draw.polygon)\n    draw_circle  = staticmethod(draw.circle)\n    draw_ellipse = staticmethod(draw.ellipse)\n    draw_arc     = staticmethod(draw.arc)\n    draw_line    = staticmethod(draw.line)\n    draw_lines   = staticmethod(draw.lines)\n    draw_aaline  = staticmethod(draw.aaline)",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "PythonDrawTestCase",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class PythonDrawTestCase(unittest.TestCase):\n    \"\"\"Base class to test draw_py module functions.\"\"\"\n    # draw_py is currently missing some functions.\n    #draw_rect    = staticmethod(draw_py.draw_rect)\n    draw_polygon = staticmethod(draw_py.draw_polygon)\n    #draw_circle  = staticmethod(draw_py.draw_circle)\n    #draw_ellipse = staticmethod(draw_py.draw_ellipse)\n    #draw_arc     = staticmethod(draw_py.draw_arc)\n    draw_line    = staticmethod(draw_py.draw_line)\n    draw_lines   = staticmethod(draw_py.draw_lines)",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawEllipseMixin",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawEllipseMixin(object):\n    \"\"\"Mixin tests for drawing ellipses.\n    This class contains all the general ellipse drawing tests.\n    \"\"\"\n    def test_ellipse(self):\n        \"\"\"Tests ellipses of differing sizes on surfaces of differing sizes.\n        Checks if the number of sides touching the border of the surface is\n        correct.\n        \"\"\"\n        left_top = [(0, 0), (1, 0), (0, 1), (1, 1)]",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawEllipseTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawEllipseTest(DrawEllipseMixin, DrawTestCase):\n    \"\"\"Test draw module function ellipse.\n    This class inherits the general tests from DrawEllipseMixin. It is also\n    the class to add any draw.ellipse specific tests to.\n    \"\"\"\n@unittest.skip('draw_py.draw_ellipse not supported yet')\nclass PythonDrawEllipseTest(DrawEllipseMixin, PythonDrawTestCase):\n    \"\"\"Test draw_py module function draw_ellipse.\n    This class inherits the general tests from DrawEllipseMixin. It is also\n    the class to add any draw_py.draw_ellipse specific tests to.",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "PythonDrawEllipseTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class PythonDrawEllipseTest(DrawEllipseMixin, PythonDrawTestCase):\n    \"\"\"Test draw_py module function draw_ellipse.\n    This class inherits the general tests from DrawEllipseMixin. It is also\n    the class to add any draw_py.draw_ellipse specific tests to.\n    \"\"\"\n### Line Testing ##############################################################\nclass LineMixin(object):\n    \"\"\"Mixin test for drawing lines and aalines.\n    This class contains all the general line/lines/aaline/aalines drawing\n    tests.",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "LineMixin",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class LineMixin(object):\n    \"\"\"Mixin test for drawing lines and aalines.\n    This class contains all the general line/lines/aaline/aalines drawing\n    tests.\n    \"\"\"\n    def setUp(self):\n        self._colors = ((0, 0, 0), (255, 0, 0), (0, 255, 0), (0, 0, 255),\n                        (255, 255, 0), (255, 0, 255), (0, 255, 255),\n                        (255, 255, 255))\n        # Create some surfaces with different sizes, depths, and flags.",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "PythonDrawLineTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class PythonDrawLineTest(LineMixin, DrawTestCase):\n    \"\"\"Test draw_py module functions: line, lines, aaline, and aalines.\n    This class inherits the general tests from LineMixin. It is also the class\n    to add any draw_py.draw_line/lines/aaline/aalines specific tests to.\n    \"\"\"\nclass DrawLineTest(LineMixin, PythonDrawTestCase):\n    \"\"\"Test draw module functions: line, lines, aaline, and aalines.\n    This class inherits the general tests from LineMixin. It is also the class\n    to add any draw.line/lines/aaline/aalines specific tests to.\n    \"\"\"",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawLineTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawLineTest(LineMixin, PythonDrawTestCase):\n    \"\"\"Test draw module functions: line, lines, aaline, and aalines.\n    This class inherits the general tests from LineMixin. It is also the class\n    to add any draw.line/lines/aaline/aalines specific tests to.\n    \"\"\"\n    def test_path_data_validation(self):\n        \"\"\"Test validation of multi-point drawing methods.\n        See bug #521\n        \"\"\"\n        surf = pygame.Surface((5, 5))",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "AntiAliasedLineMixin",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class AntiAliasedLineMixin(object):\n    \"\"\"Mixin tests for line anti-aliasing.\n    This class contains all the general anti-aliasing line drawing tests.\n    \"\"\"\n    def setUp(self):\n        self.surface = pygame.Surface((10, 10))\n        draw.rect(self.surface, BG_RED, (0, 0, 10, 10), 0)\n    def _check_antialiasing(self, from_point, to_point, should, check_points,\n                            set_endpoints=True):\n        \"\"\"Draw a line between two points and check colors of check_points.\"\"\"",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "AntiAliasingLineTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class AntiAliasingLineTest(AntiAliasedLineMixin, DrawTestCase):\n    \"\"\"Test anti-aliasing for draw.\n    This class inherits the general tests from AntiAliasedLineMixin. It is\n    also the class to add any anti-aliasing draw specific tests to.\n    \"\"\"\nclass PythonAntiAliasingLineTest(AntiAliasedLineMixin, PythonDrawTestCase):\n    \"\"\"Test anti-aliasing for draw_py.\n    This class inherits the general tests from AntiAliasedLineMixin. It is\n    also the class to add any anti-aliasing draw_py specific tests to.\n    \"\"\"",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "PythonAntiAliasingLineTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class PythonAntiAliasingLineTest(AntiAliasedLineMixin, PythonDrawTestCase):\n    \"\"\"Test anti-aliasing for draw_py.\n    This class inherits the general tests from AntiAliasedLineMixin. It is\n    also the class to add any anti-aliasing draw_py specific tests to.\n    \"\"\"\n### Draw Module Testing #######################################################\n# These tests should eventually be moved to their appropriate mixin/class.\nclass DrawModuleTest(unittest.TestCase):\n    def setUp(self):\n        (self.surf_w, self.surf_h) = self.surf_size = (320, 200)",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawModuleTest(unittest.TestCase):\n    def setUp(self):\n        (self.surf_w, self.surf_h) = self.surf_size = (320, 200)\n        self.surf = pygame.Surface(self.surf_size, pygame.SRCALPHA)\n        self.color = (1, 13, 24, 205)\n    def test_rect__fill(self):\n        # __doc__ (as of 2008-06-25) for pygame.draw.rect:\n          # pygame.draw.rect(Surface, color, Rect, width=0): return Rect\n          # draw a rectangle shape\n        rect = pygame.Rect(10, 10, 25, 20)",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawPolygonMixin",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawPolygonMixin(object):\n    \"\"\"Mixin tests for drawing polygons.\n    This class contains all the general polygon drawing tests.\n    \"\"\"\n    def setUp(self):\n        self.surface = pygame.Surface((20, 20))\n    def test_draw_square(self):\n        self.draw_polygon(self.surface, RED, SQUARE, 0)\n        # note : there is a discussion (#234) if draw.polygon should include or\n        # not the right or lower border; here we stick with current behavior,",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawPolygonTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawPolygonTest(DrawPolygonMixin, DrawTestCase):\n    \"\"\"Test draw module function polygon.\n    This class inherits the general tests from DrawPolygonMixin. It is also\n    the class to add any draw.polygon specific tests to.\n    \"\"\"\nclass PythonDrawPolygonTest(DrawPolygonMixin, PythonDrawTestCase):\n    \"\"\"Test draw_py module function draw_polygon.\n    This class inherits the general tests from DrawPolygonMixin. It is also\n    the class to add any draw_py.draw_polygon specific tests to.\n    \"\"\"",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "PythonDrawPolygonTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class PythonDrawPolygonTest(DrawPolygonMixin, PythonDrawTestCase):\n    \"\"\"Test draw_py module function draw_polygon.\n    This class inherits the general tests from DrawPolygonMixin. It is also\n    the class to add any draw_py.draw_polygon specific tests to.\n    \"\"\"\n### Rect Testing ##############################################################\nclass DrawRectMixin(object):\n    \"\"\"Mixin tests for drawing rects.\n    This class contains all the general rect drawing tests.\n    \"\"\"",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawRectMixin",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawRectMixin(object):\n    \"\"\"Mixin tests for drawing rects.\n    This class contains all the general rect drawing tests.\n    \"\"\"\n    def todo_test_circle(self):\n        self.fail()\nclass DrawRectTest(DrawRectMixin, DrawTestCase):\n    \"\"\"Test draw module function rect.\n    This class inherits the general tests from DrawRectMixin. It is also the\n    class to add any draw.rect specific tests to.",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawRectTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawRectTest(DrawRectMixin, DrawTestCase):\n    \"\"\"Test draw module function rect.\n    This class inherits the general tests from DrawRectMixin. It is also the\n    class to add any draw.rect specific tests to.\n    \"\"\"\nclass PythonDrawRectTest(DrawRectMixin, PythonDrawTestCase):\n    \"\"\"Test draw_py module function draw_rect.\n    This class inherits the general tests from DrawRectMixin. It is also the\n    class to add any draw_py.draw_rect specific tests to.\n    \"\"\"",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "PythonDrawRectTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class PythonDrawRectTest(DrawRectMixin, PythonDrawTestCase):\n    \"\"\"Test draw_py module function draw_rect.\n    This class inherits the general tests from DrawRectMixin. It is also the\n    class to add any draw_py.draw_rect specific tests to.\n    \"\"\"\n### Circle Testing ############################################################\nclass DrawCircleMixin(object):\n    \"\"\"Mixin tests for drawing circles.\n    This class contains all the general circle drawing tests.\n    \"\"\"",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawCircleMixin",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawCircleMixin(object):\n    \"\"\"Mixin tests for drawing circles.\n    This class contains all the general circle drawing tests.\n    \"\"\"\n    def todo_test_circle(self):\n        self.fail()\nclass DrawCircleTest(DrawCircleMixin, DrawTestCase):\n    \"\"\"Test draw module function circle.\n    This class inherits the general tests from DrawCircleMixin. It is also\n    the class to add any draw.circle specific tests to.",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawCircleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawCircleTest(DrawCircleMixin, DrawTestCase):\n    \"\"\"Test draw module function circle.\n    This class inherits the general tests from DrawCircleMixin. It is also\n    the class to add any draw.circle specific tests to.\n    \"\"\"\nclass PythonDrawCircleTest(DrawCircleMixin, PythonDrawTestCase):\n    \"\"\"Test draw_py module function draw_circle.\"\n    This class inherits the general tests from DrawCircleMixin. It is also\n    the class to add any draw_py.draw_circle specific tests to.\n    \"\"\"",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "PythonDrawCircleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class PythonDrawCircleTest(DrawCircleMixin, PythonDrawTestCase):\n    \"\"\"Test draw_py module function draw_circle.\"\n    This class inherits the general tests from DrawCircleMixin. It is also\n    the class to add any draw_py.draw_circle specific tests to.\n    \"\"\"\n### Arc Testing ###############################################################\nclass DrawArcMixin(object):\n    \"\"\"Mixin tests for drawing arcs.\n    This class contains all the general arc drawing tests.\n    \"\"\"",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawArcMixin",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawArcMixin(object):\n    \"\"\"Mixin tests for drawing arcs.\n    This class contains all the general arc drawing tests.\n    \"\"\"\n    def todo_test_arc(self):\n        self.fail()\nclass DrawArcTest(DrawArcMixin, DrawTestCase):\n    \"\"\"Test draw module function arc.\n    This class inherits the general tests from DrawArcMixin. It is also the\n    class to add any draw.arc specific tests to.",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DrawArcTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class DrawArcTest(DrawArcMixin, DrawTestCase):\n    \"\"\"Test draw module function arc.\n    This class inherits the general tests from DrawArcMixin. It is also the\n    class to add any draw.arc specific tests to.\n    \"\"\"\nclass PythonDrawArcTest(DrawArcMixin, PythonDrawTestCase):\n    \"\"\"Test draw_py module function draw_arc.\n    This class inherits the general tests from DrawArcMixin. It is also the\n    class to add any draw_py.draw_arc specific tests to.\n    \"\"\"",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "PythonDrawArcTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "class PythonDrawArcTest(DrawArcMixin, PythonDrawTestCase):\n    \"\"\"Test draw_py module function draw_arc.\n    This class inherits the general tests from DrawArcMixin. It is also the\n    class to add any draw_py.draw_arc specific tests to.\n    \"\"\"\n###############################################################################\nif __name__ == '__main__':\n    unittest.main()",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "get_border_values",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "def get_border_values(surface, width, height):\n    \"\"\"Returns a list containing lists with the values of the surface's\n    borders.\n    \"\"\"\n    border_top = [surface.get_at((x, 0)) for x in range(width)]\n    border_left = [surface.get_at((0, y)) for y in range(height)]\n    border_right = [\n        surface.get_at((width - 1, y)) for y in range(height)]\n    border_bottom = [\n        surface.get_at((x, height - 1)) for x in range(width)]",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "corners",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "def corners(surface):\n    \"\"\"Returns a tuple with the corner positions of the given surface.\n    Clockwise from the top left corner.\n    \"\"\"\n    width, height = surface.get_size()\n    return ((0, 0), (width - 1, 0), (width - 1, height - 1), (0, height - 1))\ndef border_pos_and_color(surface):\n    \"\"\"Yields each border position and its color for a given surface.\n    Clockwise from the top left corner.\n    \"\"\"",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "border_pos_and_color",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "def border_pos_and_color(surface):\n    \"\"\"Yields each border position and its color for a given surface.\n    Clockwise from the top left corner.\n    \"\"\"\n    width, height = surface.get_size()\n    right, bottom = width - 1, height - 1\n    # Top edge.\n    for x in range(width):\n        pos = (x, 0)\n        yield pos, surface.get_at(pos)",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "PY3 = sys.version_info >= (3, 0, 0)\nRED = BG_RED = pygame.Color('red')\nGREEN = FG_GREEN = pygame.Color('green')\ndef get_border_values(surface, width, height):\n    \"\"\"Returns a list containing lists with the values of the surface's\n    borders.\n    \"\"\"\n    border_top = [surface.get_at((x, 0)) for x in range(width)]\n    border_left = [surface.get_at((0, y)) for y in range(height)]\n    border_right = [",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "RED",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "RED = BG_RED = pygame.Color('red')\nGREEN = FG_GREEN = pygame.Color('green')\ndef get_border_values(surface, width, height):\n    \"\"\"Returns a list containing lists with the values of the surface's\n    borders.\n    \"\"\"\n    border_top = [surface.get_at((x, 0)) for x in range(width)]\n    border_left = [surface.get_at((0, y)) for y in range(height)]\n    border_right = [\n        surface.get_at((width - 1, y)) for y in range(height)]",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "GREEN",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "GREEN = FG_GREEN = pygame.Color('green')\ndef get_border_values(surface, width, height):\n    \"\"\"Returns a list containing lists with the values of the surface's\n    borders.\n    \"\"\"\n    border_top = [surface.get_at((x, 0)) for x in range(width)]\n    border_left = [surface.get_at((0, y)) for y in range(height)]\n    border_right = [\n        surface.get_at((width - 1, y)) for y in range(height)]\n    border_bottom = [",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "SQUARE",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "SQUARE = ([0, 0], [3, 0], [3, 3], [0, 3])\nDIAMOND = [(1, 3), (3, 5), (5, 3), (3, 1)]\nCROSS = ([2, 0], [4, 0], [4, 2], [6, 2],\n         [6, 4], [4, 4], [4, 6], [2, 6],\n         [2, 4], [0, 4], [0, 2], [2, 2])\nclass DrawPolygonMixin(object):\n    \"\"\"Mixin tests for drawing polygons.\n    This class contains all the general polygon drawing tests.\n    \"\"\"\n    def setUp(self):",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "DIAMOND",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "DIAMOND = [(1, 3), (3, 5), (5, 3), (3, 1)]\nCROSS = ([2, 0], [4, 0], [4, 2], [6, 2],\n         [6, 4], [4, 4], [4, 6], [2, 6],\n         [2, 4], [0, 4], [0, 2], [2, 2])\nclass DrawPolygonMixin(object):\n    \"\"\"Mixin tests for drawing polygons.\n    This class contains all the general polygon drawing tests.\n    \"\"\"\n    def setUp(self):\n        self.surface = pygame.Surface((20, 20))",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "CROSS",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.draw_test",
        "description": "pygame-1.9.6.test.draw_test",
        "peekOfCode": "CROSS = ([2, 0], [4, 0], [4, 2], [6, 2],\n         [6, 4], [4, 4], [4, 6], [2, 6],\n         [2, 4], [0, 4], [0, 2], [2, 2])\nclass DrawPolygonMixin(object):\n    \"\"\"Mixin tests for drawing polygons.\n    This class contains all the general polygon drawing tests.\n    \"\"\"\n    def setUp(self):\n        self.surface = pygame.Surface((20, 20))\n    def test_draw_square(self):",
        "detail": "pygame-1.9.6.test.draw_test",
        "documentation": {}
    },
    {
        "label": "EventTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.event_test",
        "description": "pygame-1.9.6.test.event_test",
        "peekOfCode": "class EventTypeTest(unittest.TestCase):\n    def test_Event(self):\n        \"\"\"Ensure an Event object can be created.\"\"\"\n        e = pygame.event.Event(pygame.USEREVENT, some_attr=1, other_attr='1')\n        self.assertEqual(e.some_attr, 1)\n        self.assertEqual(e.other_attr, \"1\")\n        # Event now uses tp_dictoffset and tp_members: request 62\n        # on Motherhamster Bugzilla.\n        self.assertEqual(e.type, pygame.USEREVENT)\n        self.assertIs(e.dict, e.__dict__)",
        "detail": "pygame-1.9.6.test.event_test",
        "documentation": {}
    },
    {
        "label": "EventModuleArgsTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.event_test",
        "description": "pygame-1.9.6.test.event_test",
        "peekOfCode": "class EventModuleArgsTest(unittest.TestCase):\n    def setUp(self):\n        pygame.display.init()\n        pygame.event.clear()\n    def tearDown(self):\n        pygame.display.quit()\n    def test_get(self):\n        pygame.event.get()\n        pygame.event.get(None)\n        pygame.event.get(None, True)",
        "detail": "pygame-1.9.6.test.event_test",
        "documentation": {}
    },
    {
        "label": "EventModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.event_test",
        "description": "pygame-1.9.6.test.event_test",
        "peekOfCode": "class EventModuleTest(unittest.TestCase):\n    def setUp(self):\n        pygame.display.init()\n        pygame.event.clear()  # flush events\n    def tearDown(self):\n        pygame.event.clear()  # flush events\n        pygame.display.quit()\n    def test_event_attribute(self):\n        e1 = pygame.event.Event(pygame.USEREVENT, attr1='attr1')\n        self.assertEqual(e1.attr1, 'attr1')",
        "detail": "pygame-1.9.6.test.event_test",
        "documentation": {}
    },
    {
        "label": "events",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.event_test",
        "description": "pygame-1.9.6.test.event_test",
        "peekOfCode": "events = (\n#   pygame.NOEVENT,\n#   pygame.ACTIVEEVENT,\n    pygame.KEYDOWN,\n    pygame.KEYUP,\n    pygame.MOUSEMOTION,\n    pygame.MOUSEBUTTONDOWN,\n    pygame.MOUSEBUTTONUP,\n    pygame.JOYAXISMOTION,\n    pygame.JOYBALLMOTION,",
        "detail": "pygame-1.9.6.test.event_test",
        "documentation": {}
    },
    {
        "label": "race_condition_notification",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.event_test",
        "description": "pygame-1.9.6.test.event_test",
        "peekOfCode": "race_condition_notification = \"\"\"\nThis test is dependent on timing. The event queue is cleared in preparation for\ntests. There is a small window where outside events from the OS may have effected\nresults. Try running the test again.\n\"\"\"\nclass EventModuleArgsTest(unittest.TestCase):\n    def setUp(self):\n        pygame.display.init()\n        pygame.event.clear()\n    def tearDown(self):",
        "detail": "pygame-1.9.6.test.event_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.fastevent_tags",
        "description": "pygame-1.9.6.test.fastevent_tags",
        "peekOfCode": "__tags__ = []",
        "detail": "pygame-1.9.6.test.fastevent_tags",
        "documentation": {}
    },
    {
        "label": "FasteventModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.fastevent_test",
        "description": "pygame-1.9.6.test.fastevent_test",
        "peekOfCode": "class FasteventModuleTest(unittest.TestCase):\n    def setUp(self):\n        pygame.display.init()\n        fastevent.init()\n        event.clear()\n    def tearDown(self):\n        # fastevent.quit()  # Does not exist!\n        pygame.display.quit()\n    def test_init(self):\n        # Test if module initialized after multiple init() calls.",
        "detail": "pygame-1.9.6.test.fastevent_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.font_tags",
        "description": "pygame-1.9.6.test.font_tags",
        "peekOfCode": "__tags__ = []",
        "detail": "pygame-1.9.6.test.font_tags",
        "documentation": {}
    },
    {
        "label": "FontModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.font_test",
        "description": "pygame-1.9.6.test.font_test",
        "peekOfCode": "class FontModuleTest( unittest.TestCase ):\n    def setUp(self):\n        pygame_font.init()\n    def tearDown(self):\n        pygame_font.quit()\n    def test_SysFont(self):\n        # Can only check that a font object is returned.\n        fonts = pygame_font.get_fonts()\n        if 'arial' in fonts:\n            # Try to use arial font if it is there, rather than a random font",
        "detail": "pygame-1.9.6.test.font_test",
        "documentation": {}
    },
    {
        "label": "FontTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.font_test",
        "description": "pygame-1.9.6.test.font_test",
        "peekOfCode": "class FontTest(unittest.TestCase):\n    def setUp(self):\n        pygame_font.init()\n    def tearDown(self):\n        pygame_font.quit()\n    def test_render_args(self):\n        screen = pygame.display.set_mode((600, 400))\n        rect = screen.get_rect()\n        f = pygame_font.Font(None, 20)\n        screen.fill((10, 10, 10))",
        "detail": "pygame-1.9.6.test.font_test",
        "documentation": {}
    },
    {
        "label": "FontTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.font_test",
        "description": "pygame-1.9.6.test.font_test",
        "peekOfCode": "class FontTypeTest( unittest.TestCase ):\n    def setUp(self):\n        pygame_font.init()\n    def tearDown(self):\n        pygame_font.quit()\n    def test_get_ascent(self):\n        # Ckecking ascent would need a custom test font to do properly.\n        f = pygame_font.Font(None, 20)\n        ascent = f.get_ascent()\n        self.assertTrue(isinstance(ascent, int))",
        "detail": "pygame-1.9.6.test.font_test",
        "documentation": {}
    },
    {
        "label": "VisualTests",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.font_test",
        "description": "pygame-1.9.6.test.font_test",
        "peekOfCode": "class VisualTests( unittest.TestCase ):\n    __tags__ = ['interactive']\n    screen = None\n    aborted = False\n    def setUp(self):\n        if self.screen is None:\n            pygame.init()\n            self.screen = pygame.display.set_mode((600, 200))\n            self.screen.fill((255, 255, 255))\n            pygame.display.flip()",
        "detail": "pygame-1.9.6.test.font_test",
        "documentation": {}
    },
    {
        "label": "equal_images",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.font_test",
        "description": "pygame-1.9.6.test.font_test",
        "peekOfCode": "def equal_images(s1, s2):\n    size = s1.get_size()\n    if s2.get_size() != size:\n        return False\n    w, h = size\n    for x in xrange_(w):\n        for y in xrange_(h):\n            if s1.get_at((x, y)) != s2.get_at((x, y)):\n                return False\n    return True",
        "detail": "pygame-1.9.6.test.font_test",
        "documentation": {}
    },
    {
        "label": "FONTDIR",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.font_test",
        "description": "pygame-1.9.6.test.font_test",
        "peekOfCode": "FONTDIR = os.path.join(os.path.dirname (os.path.abspath (__file__)),\n                       'fixtures', 'fonts')\nUCS_4 = sys.maxunicode > 0xFFFF\ndef equal_images(s1, s2):\n    size = s1.get_size()\n    if s2.get_size() != size:\n        return False\n    w, h = size\n    for x in xrange_(w):\n        for y in xrange_(h):",
        "detail": "pygame-1.9.6.test.font_test",
        "documentation": {}
    },
    {
        "label": "UCS_4",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.font_test",
        "description": "pygame-1.9.6.test.font_test",
        "peekOfCode": "UCS_4 = sys.maxunicode > 0xFFFF\ndef equal_images(s1, s2):\n    size = s1.get_size()\n    if s2.get_size() != size:\n        return False\n    w, h = size\n    for x in xrange_(w):\n        for y in xrange_(h):\n            if s1.get_at((x, y)) != s2.get_at((x, y)):\n                return False",
        "detail": "pygame-1.9.6.test.font_test",
        "documentation": {}
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.font_test",
        "description": "pygame-1.9.6.test.font_test",
        "peekOfCode": "IS_PYPY = 'PyPy' == platform.python_implementation()\n@unittest.skipIf(IS_PYPY, 'pypy skip known failure') # TODO\nclass FontModuleTest( unittest.TestCase ):\n    def setUp(self):\n        pygame_font.init()\n    def tearDown(self):\n        pygame_font.quit()\n    def test_SysFont(self):\n        # Can only check that a font object is returned.\n        fonts = pygame_font.get_fonts()",
        "detail": "pygame-1.9.6.test.font_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.freetype_tags",
        "description": "pygame-1.9.6.test.freetype_tags",
        "peekOfCode": "__tags__ = ['development']\nexclude = False\ntry:\n    import pygame.freetype\nexcept ImportError:\n    exclude = True\nif exclude:\n    __tags__.extend(['ignore', 'subprocess_ignore'])",
        "detail": "pygame-1.9.6.test.freetype_tags",
        "documentation": {}
    },
    {
        "label": "exclude",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.freetype_tags",
        "description": "pygame-1.9.6.test.freetype_tags",
        "peekOfCode": "exclude = False\ntry:\n    import pygame.freetype\nexcept ImportError:\n    exclude = True\nif exclude:\n    __tags__.extend(['ignore', 'subprocess_ignore'])",
        "detail": "pygame-1.9.6.test.freetype_tags",
        "documentation": {}
    },
    {
        "label": "FreeTypeFontTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.freetype_test",
        "description": "pygame-1.9.6.test.freetype_test",
        "peekOfCode": "class FreeTypeFontTest(unittest.TestCase):\n    _fixed_path = os.path.join(FONTDIR, 'test_fixed.otf')\n    _sans_path = os.path.join(FONTDIR, 'test_sans.ttf')\n    _mono_path = os.path.join(FONTDIR, 'PyGameMono.otf')\n    _bmp_8_75dpi_path = os.path.join(FONTDIR, 'PyGameMono-8.bdf')\n    _bmp_18_75dpi_path = os.path.join(FONTDIR, 'PyGameMono-18-75dpi.bdf')\n    _bmp_18_100dpi_path = os.path.join(FONTDIR, 'PyGameMono-18-100dpi.bdf')\n    _TEST_FONTS = {}\n    @classmethod\n    def setUpClass(cls):",
        "detail": "pygame-1.9.6.test.freetype_test",
        "documentation": {}
    },
    {
        "label": "FreeTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.freetype_test",
        "description": "pygame-1.9.6.test.freetype_test",
        "peekOfCode": "class FreeTypeTest(unittest.TestCase):\n    def setUp(self):\n        ft.init()\n    def tearDown(self):\n        ft.quit()\n    def test_resolution(self):\n        try:\n            ft.set_default_resolution()\n            resolution = ft.get_default_resolution()\n            self.assertEqual(resolution, 72)",
        "detail": "pygame-1.9.6.test.freetype_test",
        "documentation": {}
    },
    {
        "label": "nullfont",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.freetype_test",
        "description": "pygame-1.9.6.test.freetype_test",
        "peekOfCode": "def nullfont():\n    \"\"\"return an uninitialized font instance\"\"\"\n    return ft.Font.__new__(ft.Font)\nmax_point_size_FX6 = 0x7FFFFFFF\nmax_point_size = max_point_size_FX6 >> 6\nmax_point_size_f = max_point_size_FX6 * 0.015625\ndef surf_same_image(a, b):\n    \"\"\"Return True if a's pixel buffer is identical to b's\"\"\"\n    a_sz = a.get_height() * a.get_pitch()\n    b_sz = b.get_height() * b.get_pitch()",
        "detail": "pygame-1.9.6.test.freetype_test",
        "documentation": {}
    },
    {
        "label": "surf_same_image",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.freetype_test",
        "description": "pygame-1.9.6.test.freetype_test",
        "peekOfCode": "def surf_same_image(a, b):\n    \"\"\"Return True if a's pixel buffer is identical to b's\"\"\"\n    a_sz = a.get_height() * a.get_pitch()\n    b_sz = b.get_height() * b.get_pitch()\n    if a_sz != b_sz:\n        return False\n    a_bytes = ctypes.string_at(a._pixels_address, a_sz)\n    b_bytes = ctypes.string_at(b._pixels_address, b_sz)\n    return a_bytes == b_bytes\nclass FreeTypeFontTest(unittest.TestCase):",
        "detail": "pygame-1.9.6.test.freetype_test",
        "documentation": {}
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.freetype_test",
        "description": "pygame-1.9.6.test.freetype_test",
        "peekOfCode": "IS_PYPY = 'PyPy' == platform.python_implementation()\ntry:\n    from pygame.tests.test_utils import arrinter\nexcept NameError:\n    pass\nimport pygame\ntry:\n    import pygame.freetype as ft\nexcept ImportError:\n    ft = None",
        "detail": "pygame-1.9.6.test.freetype_test",
        "documentation": {}
    },
    {
        "label": "FONTDIR",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.freetype_test",
        "description": "pygame-1.9.6.test.freetype_test",
        "peekOfCode": "FONTDIR = os.path.join(os.path.dirname (os.path.abspath (__file__)),\n                       'fixtures', 'fonts')\ndef nullfont():\n    \"\"\"return an uninitialized font instance\"\"\"\n    return ft.Font.__new__(ft.Font)\nmax_point_size_FX6 = 0x7FFFFFFF\nmax_point_size = max_point_size_FX6 >> 6\nmax_point_size_f = max_point_size_FX6 * 0.015625\ndef surf_same_image(a, b):\n    \"\"\"Return True if a's pixel buffer is identical to b's\"\"\"",
        "detail": "pygame-1.9.6.test.freetype_test",
        "documentation": {}
    },
    {
        "label": "max_point_size_FX6",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.freetype_test",
        "description": "pygame-1.9.6.test.freetype_test",
        "peekOfCode": "max_point_size_FX6 = 0x7FFFFFFF\nmax_point_size = max_point_size_FX6 >> 6\nmax_point_size_f = max_point_size_FX6 * 0.015625\ndef surf_same_image(a, b):\n    \"\"\"Return True if a's pixel buffer is identical to b's\"\"\"\n    a_sz = a.get_height() * a.get_pitch()\n    b_sz = b.get_height() * b.get_pitch()\n    if a_sz != b_sz:\n        return False\n    a_bytes = ctypes.string_at(a._pixels_address, a_sz)",
        "detail": "pygame-1.9.6.test.freetype_test",
        "documentation": {}
    },
    {
        "label": "max_point_size",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.freetype_test",
        "description": "pygame-1.9.6.test.freetype_test",
        "peekOfCode": "max_point_size = max_point_size_FX6 >> 6\nmax_point_size_f = max_point_size_FX6 * 0.015625\ndef surf_same_image(a, b):\n    \"\"\"Return True if a's pixel buffer is identical to b's\"\"\"\n    a_sz = a.get_height() * a.get_pitch()\n    b_sz = b.get_height() * b.get_pitch()\n    if a_sz != b_sz:\n        return False\n    a_bytes = ctypes.string_at(a._pixels_address, a_sz)\n    b_bytes = ctypes.string_at(b._pixels_address, b_sz)",
        "detail": "pygame-1.9.6.test.freetype_test",
        "documentation": {}
    },
    {
        "label": "max_point_size_f",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.freetype_test",
        "description": "pygame-1.9.6.test.freetype_test",
        "peekOfCode": "max_point_size_f = max_point_size_FX6 * 0.015625\ndef surf_same_image(a, b):\n    \"\"\"Return True if a's pixel buffer is identical to b's\"\"\"\n    a_sz = a.get_height() * a.get_pitch()\n    b_sz = b.get_height() * b.get_pitch()\n    if a_sz != b_sz:\n        return False\n    a_bytes = ctypes.string_at(a._pixels_address, a_sz)\n    b_bytes = ctypes.string_at(b._pixels_address, b_sz)\n    return a_bytes == b_bytes",
        "detail": "pygame-1.9.6.test.freetype_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.ftfont_tags",
        "description": "pygame-1.9.6.test.ftfont_tags",
        "peekOfCode": "__tags__ = ['development']\nexclude = False\ntry:\n    import pygame.ftfont\nexcept ImportError:\n    exclude = True\nif exclude:\n    __tags__.extend(['ignore', 'subprocess_ignore'])",
        "detail": "pygame-1.9.6.test.ftfont_tags",
        "documentation": {}
    },
    {
        "label": "exclude",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.ftfont_tags",
        "description": "pygame-1.9.6.test.ftfont_tags",
        "peekOfCode": "exclude = False\ntry:\n    import pygame.ftfont\nexcept ImportError:\n    exclude = True\nif exclude:\n    __tags__.extend(['ignore', 'subprocess_ignore'])",
        "detail": "pygame-1.9.6.test.ftfont_tags",
        "documentation": {}
    },
    {
        "label": "font_test.pygame_font",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.ftfont_test",
        "description": "pygame-1.9.6.test.ftfont_test",
        "peekOfCode": "font_test.pygame_font = pygame.ftfont\n# Disable UCS-4 specific tests as this \"Font\" type does accept UCS-4 codes.\nfont_test.UCS_4 = False\nfor name in dir(font_test):\n    obj = getattr(font_test, name)\n    if (isinstance(obj, type) and  # conditional and\n        issubclass(obj, unittest.TestCase)):\n        new_name = 'Ft%s' % name\n        globals()[new_name] = type(new_name, (obj, ), {})\nif __name__ == '__main__':",
        "detail": "pygame-1.9.6.test.ftfont_test",
        "documentation": {}
    },
    {
        "label": "font_test.UCS_4",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.ftfont_test",
        "description": "pygame-1.9.6.test.ftfont_test",
        "peekOfCode": "font_test.UCS_4 = False\nfor name in dir(font_test):\n    obj = getattr(font_test, name)\n    if (isinstance(obj, type) and  # conditional and\n        issubclass(obj, unittest.TestCase)):\n        new_name = 'Ft%s' % name\n        globals()[new_name] = type(new_name, (obj, ), {})\nif __name__ == '__main__':\n    unittest.main()",
        "detail": "pygame-1.9.6.test.ftfont_test",
        "documentation": {}
    },
    {
        "label": "GfxdrawDefaultTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.gfxdraw_test",
        "description": "pygame-1.9.6.test.gfxdraw_test",
        "peekOfCode": "class GfxdrawDefaultTest( unittest.TestCase ):\n    is_started = False\n    foreground_color = (128, 64, 8)\n    background_color = (255, 255, 255)\n    def make_palette(base_color):\n        \"\"\"Return color palette that is various intensities of base_color\"\"\"\n        # Need this function for Python 3.x so the base_color\n        # is within the scope of the list comprehension.\n        return [intensity(base_color, i) for i in range(0, 256)]\n    default_palette = make_palette(foreground_color)",
        "detail": "pygame-1.9.6.test.gfxdraw_test",
        "documentation": {}
    },
    {
        "label": "intensity",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.gfxdraw_test",
        "description": "pygame-1.9.6.test.gfxdraw_test",
        "peekOfCode": "def intensity(c, i):\n    \"\"\"Return color c changed by intensity i\n    For 0 <= i <= 127 the color is a shade, with 0 being black, 127 being the\n    unaltered color.\n    For 128 <= i <= 255 the color is a tint, with 255 being white, 128 the\n    unaltered color.\n    \"\"\"\n    r, g, b = c[0:3]\n    if 0 <= i <= 127:\n        # Darken",
        "detail": "pygame-1.9.6.test.gfxdraw_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.imageext_tags",
        "description": "pygame-1.9.6.test.imageext_tags",
        "peekOfCode": "__tags__ = []\nimport pygame\nimport sys\nif 'pygame.imageext' not in sys.modules:\n    __tags__.extend(('ignore', 'subprocess_ignore'))",
        "detail": "pygame-1.9.6.test.imageext_tags",
        "documentation": {}
    },
    {
        "label": "ImageextModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.imageext_test",
        "description": "pygame-1.9.6.test.imageext_test",
        "peekOfCode": "class ImageextModuleTest( unittest.TestCase ):\n    # Most of the testing is done indirectly through image_test.py\n    # This just confirms file path encoding and error handling.\n    def test_save_non_string_file(self):\n        im = pygame.Surface((10, 10), 0, 32)\n        self.assertRaises(TypeError, imageext.save_extended, im, [])\n    def test_load_non_string_file(self):\n        self.assertRaises(pygame.error, imageext.load_extended, [])\n    @unittest.skip(\"SDL silently removes invalid characters\")\n    def test_save_bad_filename(self):",
        "detail": "pygame-1.9.6.test.imageext_test",
        "documentation": {}
    },
    {
        "label": "imageext",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.imageext_test",
        "description": "pygame-1.9.6.test.imageext_test",
        "peekOfCode": "imageext = sys.modules['pygame.imageext']\nclass ImageextModuleTest( unittest.TestCase ):\n    # Most of the testing is done indirectly through image_test.py\n    # This just confirms file path encoding and error handling.\n    def test_save_non_string_file(self):\n        im = pygame.Surface((10, 10), 0, 32)\n        self.assertRaises(TypeError, imageext.save_extended, im, [])\n    def test_load_non_string_file(self):\n        self.assertRaises(pygame.error, imageext.load_extended, [])\n    @unittest.skip(\"SDL silently removes invalid characters\")",
        "detail": "pygame-1.9.6.test.imageext_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.image_tags",
        "description": "pygame-1.9.6.test.image_tags",
        "peekOfCode": "__tags__ = []\nimport pygame\nimport sys\nif 'pygame.image' not in sys.modules:\n    __tags__.extend(('ignore', 'subprocess_ignore'))",
        "detail": "pygame-1.9.6.test.image_tags",
        "documentation": {}
    },
    {
        "label": "ImageModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.image_test",
        "description": "pygame-1.9.6.test.image_test",
        "peekOfCode": "class ImageModuleTest( unittest.TestCase ):\n    def testLoadIcon(self):\n        \"\"\" see if we can load the pygame icon.\n        \"\"\"\n        f = pygame.pkgdata.getResource(\"pygame_icon.bmp\")\n        self.assertEqual(f.mode, \"rb\")\n        surf = pygame.image.load_basic(f)\n        self.assertEqual(surf.get_at((0,0)),(5, 4, 5, 255))\n        self.assertEqual(surf.get_height(),32)\n        self.assertEqual(surf.get_width(),32)",
        "detail": "pygame-1.9.6.test.image_test",
        "documentation": {}
    },
    {
        "label": "test_magic",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.image_test",
        "description": "pygame-1.9.6.test.image_test",
        "peekOfCode": "def test_magic(f, magic_hex):\n    \"\"\" tests a given file to see if the magic hex matches.\n    \"\"\"\n    data = f.read(len(magic_hex))\n    if len(data) != len(magic_hex):\n        return 0\n    for i in range(len(magic_hex)):\n        if magic_hex[i] != ord_(data[i]):\n            return 0\n    return 1",
        "detail": "pygame-1.9.6.test.image_test",
        "documentation": {}
    },
    {
        "label": "GL_ImageSave",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.image__save_gl_surface_test",
        "description": "pygame-1.9.6.test.image__save_gl_surface_test",
        "peekOfCode": "class GL_ImageSave(unittest.TestCase):\n    def test_image_save_works_with_opengl_surfaces(self):\n        \"\"\"\n        |tags:display,slow,opengl|\n        \"\"\"\n        pygame.display.init()\n        screen = pygame.display.set_mode((640,480), OPENGL|DOUBLEBUF)\n        pygame.display.flip()\n        tmp_dir = test_utils.get_tmp_dir()\n        # Try the imageext module.",
        "detail": "pygame-1.9.6.test.image__save_gl_surface_test",
        "documentation": {}
    },
    {
        "label": "JoystickTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.joystick_test",
        "description": "pygame-1.9.6.test.joystick_test",
        "peekOfCode": "class JoystickTypeTest(unittest.TestCase):\n    def todo_test_Joystick(self):\n        # __doc__ (as of 2008-08-02) for pygame.joystick.Joystick:\n          # pygame.joystick.Joystick(id): return Joystick\n          # create a new Joystick object\n          #\n          # Create a new joystick to access a physical device. The id argument\n          # must be a value from 0 to pygame.joystick.get_count()-1.\n          #\n          # To access most of the Joystick methods, you'll need to init() the",
        "detail": "pygame-1.9.6.test.joystick_test",
        "documentation": {}
    },
    {
        "label": "JoytickModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.joystick_test",
        "description": "pygame-1.9.6.test.joystick_test",
        "peekOfCode": "class JoytickModuleTest(unittest.TestCase):\n    def todo_test_get_count(self):\n        # __doc__ (as of 2008-08-02) for pygame.joystick.get_count:\n          # pygame.joystick.get_count(): return count\n          # number of joysticks on the system\n          #\n          # Return the number of joystick devices on the system. The count will\n          # be 0 if there are no joysticks on the system.\n          #\n          # When you create Joystick objects using Joystick(id), you pass an",
        "detail": "pygame-1.9.6.test.joystick_test",
        "documentation": {}
    },
    {
        "label": "KeyModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.key_test",
        "description": "pygame-1.9.6.test.key_test",
        "peekOfCode": "class KeyModuleTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        pygame.init()\n    @classmethod\n    def tearDownClass(cls):\n        pygame.quit()\n    def setUp(cls):\n        # This makes sure pygame is always initialized before each test (in\n        # case a test calls pygame.quit()).",
        "detail": "pygame-1.9.6.test.key_test",
        "documentation": {}
    },
    {
        "label": "MaskTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.mask_test",
        "description": "pygame-1.9.6.test.mask_test",
        "peekOfCode": "class MaskTypeTest(unittest.TestCase):\n    ORIGIN_OFFSETS = ((0, 0), (0, 1), (1, 1), (1, 0), (1, -1), (0, -1),\n                      (-1, -1), (-1, 0), (-1, 1))\n    def _assertMaskEqual(self, m1, m2, msg=None):\n        # Checks to see if the 2 given masks are equal.\n        m1_count = m1.count()\n        self.assertEqual(m1.get_size(), m2.get_size(), msg=msg)\n        self.assertEqual(m1_count, m2.count(), msg=msg)\n        self.assertEqual(m1_count, m1.overlap_area(m2, (0, 0)), msg=msg)\n        # This can be used to help debug exact locations.",
        "detail": "pygame-1.9.6.test.mask_test",
        "documentation": {}
    },
    {
        "label": "MaskModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.mask_test",
        "description": "pygame-1.9.6.test.mask_test",
        "peekOfCode": "class MaskModuleTest(unittest.TestCase):\n    # The @unittest.expectedFailure decorator can be removed when issue #897\n    # is fixed.\n    @unittest.expectedFailure\n    def test_from_surface(self):\n        \"\"\"Ensures from_surface creates a mask with the correct bits set.\n        This test checks the masks created by the from_surface function using\n        16 and 32 bit surfaces. Each alpha value (0-255) is tested against\n        several different threshold values.\n        Note: On 16 bit surface the requested alpha value can differ from what",
        "detail": "pygame-1.9.6.test.mask_test",
        "documentation": {}
    },
    {
        "label": "random_mask",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.mask_test",
        "description": "pygame-1.9.6.test.mask_test",
        "peekOfCode": "def random_mask(size = (100,100)):\n    \"\"\"random_mask(size=(100,100)): return Mask\n    Create a mask of the given size, with roughly half the bits set at random.\"\"\"\n    m = pygame.Mask(size)\n    for i in range(size[0] * size[1] // 2):\n        x, y = random.randint(0,size[0] - 1), random.randint(0, size[1] - 1)\n        m.set_at((x,y))\n    return m\ndef maskFromSurface(surface, threshold = 127):\n    mask = pygame.Mask(surface.get_size())",
        "detail": "pygame-1.9.6.test.mask_test",
        "documentation": {}
    },
    {
        "label": "maskFromSurface",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.mask_test",
        "description": "pygame-1.9.6.test.mask_test",
        "peekOfCode": "def maskFromSurface(surface, threshold = 127):\n    mask = pygame.Mask(surface.get_size())\n    key = surface.get_colorkey()\n    if key:\n        for y in range(surface.get_height()):\n            for x in range(surface.get_width()):\n                if surface.get_at((x+0.1,y+0.1)) != key:\n                    mask.set_at((x,y),1)\n    else:\n        for y in range(surface.get_height()):",
        "detail": "pygame-1.9.6.test.mask_test",
        "documentation": {}
    },
    {
        "label": "Vector2TypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.math_test",
        "description": "pygame-1.9.6.test.math_test",
        "peekOfCode": "class Vector2TypeTest(unittest.TestCase):\n    def setUp(self):\n        pygame.math.enable_swizzling()\n        self.zeroVec = Vector2()\n        self.e1 = Vector2(1, 0)\n        self.e2 = Vector2(0, 1)\n        self.t1 = (1.2, 3.4)\n        self.l1 = list(self.t1)\n        self.v1 = Vector2(self.t1)\n        self.t2 = (5.6, 7.8)",
        "detail": "pygame-1.9.6.test.math_test",
        "documentation": {}
    },
    {
        "label": "Vector3TypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.math_test",
        "description": "pygame-1.9.6.test.math_test",
        "peekOfCode": "class Vector3TypeTest(unittest.TestCase):\n    def setUp(self):\n        self.zeroVec = Vector3()\n        self.e1 = Vector3(1, 0, 0)\n        self.e2 = Vector3(0, 1, 0)\n        self.e3 = Vector3(0, 0, 1)\n        self.t1 = (1.2, 3.4, 9.6)\n        self.l1 = list(self.t1)\n        self.v1 = Vector3(self.t1)\n        self.t2 = (5.6, 7.8, 2.1)",
        "detail": "pygame-1.9.6.test.math_test",
        "documentation": {}
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.math_test",
        "description": "pygame-1.9.6.test.math_test",
        "peekOfCode": "IS_PYPY = 'PyPy' == platform.python_implementation()\nPY3 = sys.version_info.major == 3\nclass Vector2TypeTest(unittest.TestCase):\n    def setUp(self):\n        pygame.math.enable_swizzling()\n        self.zeroVec = Vector2()\n        self.e1 = Vector2(1, 0)\n        self.e2 = Vector2(0, 1)\n        self.t1 = (1.2, 3.4)\n        self.l1 = list(self.t1)",
        "detail": "pygame-1.9.6.test.math_test",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.math_test",
        "description": "pygame-1.9.6.test.math_test",
        "peekOfCode": "PY3 = sys.version_info.major == 3\nclass Vector2TypeTest(unittest.TestCase):\n    def setUp(self):\n        pygame.math.enable_swizzling()\n        self.zeroVec = Vector2()\n        self.e1 = Vector2(1, 0)\n        self.e2 = Vector2(0, 1)\n        self.t1 = (1.2, 3.4)\n        self.l1 = list(self.t1)\n        self.v1 = Vector2(self.t1)",
        "detail": "pygame-1.9.6.test.math_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.midi_tags",
        "description": "pygame-1.9.6.test.midi_tags",
        "peekOfCode": "__tags__ = ['interactive']",
        "detail": "pygame-1.9.6.test.midi_tags",
        "documentation": {}
    },
    {
        "label": "MidiInputTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.midi_test",
        "description": "pygame-1.9.6.test.midi_test",
        "peekOfCode": "class MidiInputTest(unittest.TestCase):\n    def setUp(self):\n        pygame.midi.init()\n        in_id = pygame.midi.get_default_input_id()\n        if in_id != -1:\n            self.midi_input = pygame.midi.Input(in_id)\n        else:\n            self.midi_input = None\n    def tearDown(self):\n        if self.midi_input:",
        "detail": "pygame-1.9.6.test.midi_test",
        "documentation": {}
    },
    {
        "label": "MidiOutputTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.midi_test",
        "description": "pygame-1.9.6.test.midi_test",
        "peekOfCode": "class MidiOutputTest(unittest.TestCase):\n    def setUp(self):\n        pygame.midi.init()\n        m_out_id = pygame.midi.get_default_output_id()\n        if m_out_id != -1:\n            self.midi_output = pygame.midi.Output(m_out_id)\n        else:\n            self.midi_output = None\n    def tearDown(self):\n        if self.midi_output:",
        "detail": "pygame-1.9.6.test.midi_test",
        "documentation": {}
    },
    {
        "label": "MidiModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.midi_test",
        "description": "pygame-1.9.6.test.midi_test",
        "peekOfCode": "class MidiModuleTest(unittest.TestCase):\n    def setUp(self):\n        pygame.midi.init()\n    def tearDown(self):\n        pygame.midi.quit()\n    def test_MidiException(self):\n        def raiseit():\n            raise pygame.midi.MidiException('Hello Midi param')\n        with self.assertRaises(pygame.midi.MidiException) as cm:\n            raiseit()",
        "detail": "pygame-1.9.6.test.midi_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.mixer_music_tags",
        "description": "pygame-1.9.6.test.mixer_music_tags",
        "peekOfCode": "__tags__ = []\nimport pygame\nimport sys\nif 'pygame.mixer_music' not in sys.modules:\n    __tags__.extend(('ignore', 'subprocess_ignore'))",
        "detail": "pygame-1.9.6.test.mixer_music_tags",
        "documentation": {}
    },
    {
        "label": "MixerMusicModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.mixer_music_test",
        "description": "pygame-1.9.6.test.mixer_music_test",
        "peekOfCode": "class MixerMusicModuleTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        # Initializing the mixer is slow, so minimize the times it is called.\n        pygame.mixer.init()\n    @classmethod\n    def tearDownClass(cls):\n        pygame.mixer.quit()\n    def setUp(cls):\n        # This makes sure the mixer is always initialized before each test (in",
        "detail": "pygame-1.9.6.test.mixer_music_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.mixer_tags",
        "description": "pygame-1.9.6.test.mixer_tags",
        "peekOfCode": "__tags__ = []\nimport pygame\nimport sys\nif 'pygame.mixer' not in sys.modules:\n    __tags__.extend(('ignore', 'subprocess_ignore'))",
        "detail": "pygame-1.9.6.test.mixer_tags",
        "documentation": {}
    },
    {
        "label": "MixerModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.mixer_test",
        "description": "pygame-1.9.6.test.mixer_test",
        "peekOfCode": "class MixerModuleTest(unittest.TestCase):\n    def tearDown(self):\n        mixer.quit()\n        mixer.pre_init(0, 0, 0, 0)\n    def test_init__keyword_args(self):\n        # note: this test used to loop over all CONFIGS, but it's very slow..\n        mixer.init(**CONFIG)\n        mixer_conf = mixer.get_init()\n        self.assertEqual(mixer_conf[0], CONFIG['frequency'])\n        # Not all \"sizes\" are supported on all systems,  hence \"abs\".",
        "detail": "pygame-1.9.6.test.mixer_test",
        "documentation": {}
    },
    {
        "label": "ChannelTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.mixer_test",
        "description": "pygame-1.9.6.test.mixer_test",
        "peekOfCode": "class ChannelTypeTest(AssertRaisesRegexMixin, unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        # Initializing the mixer is slow, so minimize the times it is called.\n        mixer.init()\n    @classmethod\n    def tearDownClass(cls):\n        mixer.quit()\n    def setUp(cls):\n        # This makes sure the mixer is always initialized before each test (in",
        "detail": "pygame-1.9.6.test.mixer_test",
        "documentation": {}
    },
    {
        "label": "SoundTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.mixer_test",
        "description": "pygame-1.9.6.test.mixer_test",
        "peekOfCode": "class SoundTypeTest(AssertRaisesRegexMixin, unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        # Initializing the mixer is slow, so minimize the times it is called.\n        mixer.init()\n    @classmethod\n    def tearDownClass(cls):\n        mixer.quit()\n    def setUp(cls):\n        # This makes sure the mixer is always initialized before each test (in",
        "detail": "pygame-1.9.6.test.mixer_test",
        "documentation": {}
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.mixer_test",
        "description": "pygame-1.9.6.test.mixer_test",
        "peekOfCode": "IS_PYPY = 'PyPy' == platform.python_implementation()\n################################### CONSTANTS ##################################\nFREQUENCIES = [11025, 22050, 44100, 48000]\nSIZES       = [-16, -8, 8, 16]\nif pygame.get_sdl_version()[0] >= 2:\n    SIZES.append(32)\nCHANNELS    = [1, 2]\nBUFFERS     = [3024]\nCONFIGS = [{'frequency' : f, 'size' : s, 'channels': c}\n           for f in FREQUENCIES",
        "detail": "pygame-1.9.6.test.mixer_test",
        "documentation": {}
    },
    {
        "label": "FREQUENCIES",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.mixer_test",
        "description": "pygame-1.9.6.test.mixer_test",
        "peekOfCode": "FREQUENCIES = [11025, 22050, 44100, 48000]\nSIZES       = [-16, -8, 8, 16]\nif pygame.get_sdl_version()[0] >= 2:\n    SIZES.append(32)\nCHANNELS    = [1, 2]\nBUFFERS     = [3024]\nCONFIGS = [{'frequency' : f, 'size' : s, 'channels': c}\n           for f in FREQUENCIES\n           for s in SIZES\n           for c in CHANNELS]",
        "detail": "pygame-1.9.6.test.mixer_test",
        "documentation": {}
    },
    {
        "label": "CONFIGS",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.mixer_test",
        "description": "pygame-1.9.6.test.mixer_test",
        "peekOfCode": "CONFIGS = [{'frequency' : f, 'size' : s, 'channels': c}\n           for f in FREQUENCIES\n           for s in SIZES\n           for c in CHANNELS]\n# Using all CONFIGS fails on a Mac; probably older SDL_mixer; we could do:\n# if platform.system() == 'Darwin':\n# But using all CONFIGS is very slow (> 10 sec for example)\n# And probably, we don't need to be so exhaustive, hence:\nCONFIG = {'frequency' : 22050, 'size' : -16, 'channels' : 2} # base config\nif pygame.get_sdl_version()[0] >= 2:",
        "detail": "pygame-1.9.6.test.mixer_test",
        "documentation": {}
    },
    {
        "label": "CONFIG",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.mixer_test",
        "description": "pygame-1.9.6.test.mixer_test",
        "peekOfCode": "CONFIG = {'frequency' : 22050, 'size' : -16, 'channels' : 2} # base config\nif pygame.get_sdl_version()[0] >= 2:\n    CONFIG = {'frequency' : 44100, 'size' : 32, 'channels' : 2} # base config\n############################## MODULE LEVEL TESTS ##############################\nclass MixerModuleTest(unittest.TestCase):\n    def tearDown(self):\n        mixer.quit()\n        mixer.pre_init(0, 0, 0, 0)\n    def test_init__keyword_args(self):\n        # note: this test used to loop over all CONFIGS, but it's very slow..",
        "detail": "pygame-1.9.6.test.mixer_test",
        "documentation": {}
    },
    {
        "label": "MouseModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.mouse_test",
        "description": "pygame-1.9.6.test.mouse_test",
        "peekOfCode": "class MouseModuleTest(unittest.TestCase):\n    def todo_test_get_cursor(self):\n        # __doc__ (as of 2008-08-02) for pygame.mouse.get_cursor:\n          # pygame.mouse.get_cursor(): return (size, hotspot, xormasks, andmasks)\n          # get the image for the system mouse cursor\n          #\n          # Get the information about the mouse system cursor. The return value\n          # is the same data as the arguments passed into\n          # pygame.mouse.set_cursor().\n          #",
        "detail": "pygame-1.9.6.test.mouse_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.overlay_tags",
        "description": "pygame-1.9.6.test.overlay_tags",
        "peekOfCode": "__tags__ = ['SDL2_ignore']",
        "detail": "pygame-1.9.6.test.overlay_tags",
        "documentation": {}
    },
    {
        "label": "OverlayTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.overlay_test",
        "description": "pygame-1.9.6.test.overlay_test",
        "peekOfCode": "class OverlayTypeTest(unittest.TestCase):\n    def todo_test_display(self):\n        # __doc__ (as of 2008-08-02) for pygame.overlay.overlay.display:\n          # Overlay.display((y, u, v)): return None\n          # Overlay.display(): return None\n          # set the overlay pixel data\n        self.fail()\n    def todo_test_get_hardware(self):\n        # __doc__ (as of 2008-08-02) for pygame.overlay.overlay.get_hardware:\n          # Overlay.get_hardware(rect): return int",
        "detail": "pygame-1.9.6.test.overlay_test",
        "documentation": {}
    },
    {
        "label": "TestMixi",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.pixelarray_test",
        "description": "pygame-1.9.6.test.pixelarray_test",
        "peekOfCode": "class TestMixin (object):\n    def assert_surfaces_equal (self, s1, s2):\n        # Assumes the surfaces are the same size.\n        w, h = s1.get_size ()\n        for x in range (w):\n            for y in range (h):\n                self.assertEqual (s1.get_at ((x, y)), s2.get_at ((x, y)),\n                                  \"size: (%i, %i), position: (%i, %i)\" %\n                                  (w, h, x, y))\nclass PixelArrayTypeTest (unittest.TestCase, TestMixin):",
        "detail": "pygame-1.9.6.test.pixelarray_test",
        "documentation": {}
    },
    {
        "label": "PixelArrayTypeTes",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.pixelarray_test",
        "description": "pygame-1.9.6.test.pixelarray_test",
        "peekOfCode": "class PixelArrayTypeTest (unittest.TestCase, TestMixin):\n    def test_compare(self):\n        # __doc__ (as of 2008-06-25) for pygame.pixelarray.PixelArray.compare:\n          # PixelArray.compare (array, distance=0, weights=(0.299, 0.587, 0.114)): Return PixelArray\n          # Compares the PixelArray with another one.\n        w = 10\n        h = 20\n        size = w, h\n        sf = pygame.Surface (size, 0, 32)\n        ar = pygame.PixelArray (sf)",
        "detail": "pygame-1.9.6.test.pixelarray_test",
        "documentation": {}
    },
    {
        "label": "PixelArrayArrayInterfaceTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.pixelarray_test",
        "description": "pygame-1.9.6.test.pixelarray_test",
        "peekOfCode": "class PixelArrayArrayInterfaceTest(unittest.TestCase, TestMixin):\n    @unittest.skipIf(IS_PYPY, 'skipping for PyPy (why?)')\n    def test_basic (self):\n        # Check unchanging fields.\n        sf = pygame.Surface ((2, 2), 0, 32)\n        ar = pygame.PixelArray (sf)\n        ai = arrinter.ArrayInterface (ar)\n        self.assertEqual (ai.two, 2)\n        self.assertEqual (ai.typekind, 'u')\n        self.assertEqual (ai.nd, 2)",
        "detail": "pygame-1.9.6.test.pixelarray_test",
        "documentation": {}
    },
    {
        "label": "PixelArrayNewBufferTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.pixelarray_test",
        "description": "pygame-1.9.6.test.pixelarray_test",
        "peekOfCode": "class PixelArrayNewBufferTest(unittest.TestCase, TestMixin):\n    if pygame.HAVE_NEWBUF:\n        from pygame.tests.test_utils import buftools\n    bitsize_to_format = {8: 'B', 16: '=H', 24: '3x', 32: '=I'}\n    def test_newbuf_2D (self):\n        buftools = self.buftools\n        Importer = buftools.Importer\n        for bit_size in [8, 16, 24, 32]:\n            s = pygame.Surface ((10, 2), 0, bit_size)\n            ar = pygame.PixelArray (s)",
        "detail": "pygame-1.9.6.test.pixelarray_test",
        "documentation": {}
    },
    {
        "label": "PY3",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.pixelarray_test",
        "description": "pygame-1.9.6.test.pixelarray_test",
        "peekOfCode": "PY3 = sys.version_info >= (3, 0, 0)\nIS_PYPY = 'PyPy' == platform.python_implementation()\nclass TestMixin (object):\n    def assert_surfaces_equal (self, s1, s2):\n        # Assumes the surfaces are the same size.\n        w, h = s1.get_size ()\n        for x in range (w):\n            for y in range (h):\n                self.assertEqual (s1.get_at ((x, y)), s2.get_at ((x, y)),\n                                  \"size: (%i, %i), position: (%i, %i)\" %",
        "detail": "pygame-1.9.6.test.pixelarray_test",
        "documentation": {}
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.pixelarray_test",
        "description": "pygame-1.9.6.test.pixelarray_test",
        "peekOfCode": "IS_PYPY = 'PyPy' == platform.python_implementation()\nclass TestMixin (object):\n    def assert_surfaces_equal (self, s1, s2):\n        # Assumes the surfaces are the same size.\n        w, h = s1.get_size ()\n        for x in range (w):\n            for y in range (h):\n                self.assertEqual (s1.get_at ((x, y)), s2.get_at ((x, y)),\n                                  \"size: (%i, %i), position: (%i, %i)\" %\n                                  (w, h, x, y))",
        "detail": "pygame-1.9.6.test.pixelarray_test",
        "documentation": {}
    },
    {
        "label": "PixelcopyModuleTes",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.pixelcopy_test",
        "description": "pygame-1.9.6.test.pixelcopy_test",
        "peekOfCode": "class PixelcopyModuleTest (unittest.TestCase):\n    bitsizes = [8, 16, 32]\n    test_palette = [(0, 0, 0, 255),\n                    (10, 30, 60, 255),\n                    (25, 75, 100, 255),\n                    (100, 150, 200, 255),\n                    (0, 100, 200, 255)]\n    surf_size = (10, 12)\n    test_points = [((0, 0), 1), ((4, 5), 1), ((9, 0), 2),\n                   ((5, 5), 2), ((0, 11), 3), ((4, 6), 3),",
        "detail": "pygame-1.9.6.test.pixelcopy_test",
        "documentation": {}
    },
    {
        "label": "PixelCopyTestWithArray",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.pixelcopy_test",
        "description": "pygame-1.9.6.test.pixelcopy_test",
        "peekOfCode": "class PixelCopyTestWithArray(unittest.TestCase):\n    try:\n        import numpy\n    except ImportError:\n        __tags__ = ['ignore', 'subprocess_ignore']\n    else:\n        pygame.surfarray.use_arraytype('numpy')\n    bitsizes = [8, 16, 32]\n    test_palette = [(0, 0, 0, 255),\n                    (10, 30, 60, 255),",
        "detail": "pygame-1.9.6.test.pixelcopy_test",
        "documentation": {}
    },
    {
        "label": "PixelCopyTestWithArray",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.pixelcopy_test",
        "description": "pygame-1.9.6.test.pixelcopy_test",
        "peekOfCode": "class PixelCopyTestWithArray(unittest.TestCase):\n    if pygame.HAVE_NEWBUF:\n        from pygame.tests.test_utils import buftools\n        class Array2D(buftools.Exporter):\n            def __init__(self, initializer):\n                from ctypes import cast, POINTER, c_uint32\n                Array2D = PixelCopyTestWithArray.Array2D\n                super(Array2D, self).__init__((3, 5),\n                                              format='=I',\n                                              strides=(20, 4))",
        "detail": "pygame-1.9.6.test.pixelcopy_test",
        "documentation": {}
    },
    {
        "label": "unsigned32",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.pixelcopy_test",
        "description": "pygame-1.9.6.test.pixelcopy_test",
        "peekOfCode": "def unsigned32(i):\n    \"\"\"cast signed 32 bit integer to an unsigned integer\"\"\"\n    return i & 0xFFFFFFFF\nclass PixelcopyModuleTest (unittest.TestCase):\n    bitsizes = [8, 16, 32]\n    test_palette = [(0, 0, 0, 255),\n                    (10, 30, 60, 255),\n                    (25, 75, 100, 255),\n                    (100, 150, 200, 255),\n                    (0, 100, 200, 255)]",
        "detail": "pygame-1.9.6.test.pixelcopy_test",
        "documentation": {}
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.pixelcopy_test",
        "description": "pygame-1.9.6.test.pixelcopy_test",
        "peekOfCode": "IS_PYPY = 'PyPy' == platform.python_implementation()\ndef unsigned32(i):\n    \"\"\"cast signed 32 bit integer to an unsigned integer\"\"\"\n    return i & 0xFFFFFFFF\nclass PixelcopyModuleTest (unittest.TestCase):\n    bitsizes = [8, 16, 32]\n    test_palette = [(0, 0, 0, 255),\n                    (10, 30, 60, 255),\n                    (25, 75, 100, 255),\n                    (100, 150, 200, 255),",
        "detail": "pygame-1.9.6.test.pixelcopy_test",
        "documentation": {}
    },
    {
        "label": "RectTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.rect_test",
        "description": "pygame-1.9.6.test.rect_test",
        "peekOfCode": "class RectTypeTest(unittest.TestCase):\n    def testConstructionXYWidthHeight(self):\n        r = Rect(1, 2, 3, 4)\n        self.assertEqual(1, r.left)\n        self.assertEqual(2, r.top)\n        self.assertEqual(3, r.width)\n        self.assertEqual(4, r.height)\n    def testConstructionTopLeftSize(self):\n        r = Rect((1, 2), (3, 4))\n        self.assertEqual(1, r.left)",
        "detail": "pygame-1.9.6.test.rect_test",
        "documentation": {}
    },
    {
        "label": "SubclassTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.rect_test",
        "description": "pygame-1.9.6.test.rect_test",
        "peekOfCode": "class SubclassTest(unittest.TestCase):\n    class MyRect(Rect):\n        def __init__(self, *args, **kwds):\n            super(SubclassTest.MyRect, self).__init__(*args, **kwds)\n            self.an_attribute = True\n    def test_copy(self):\n        mr1 = self.MyRect(1, 2, 10, 20)\n        self.assertTrue(mr1.an_attribute)\n        mr2 = mr1.copy()\n        self.assertTrue(isinstance(mr2, self.MyRect))",
        "detail": "pygame-1.9.6.test.rect_test",
        "documentation": {}
    },
    {
        "label": "RWopsEncodeStringTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.rwobject_test",
        "description": "pygame-1.9.6.test.rwobject_test",
        "peekOfCode": "class RWopsEncodeStringTest(unittest.TestCase):\n    global getrefcount\n    def test_obj_None(self):\n        encoded_string = encode_string(None)\n        self.assertIsNone(encoded_string)\n    def test_returns_bytes(self):\n        u = as_unicode(r\"Hello\")\n        encoded_string = encode_string(u)\n        self.assertIsInstance(encoded_string, bytes_)\n    def test_obj_bytes(self):",
        "detail": "pygame-1.9.6.test.rwobject_test",
        "documentation": {}
    },
    {
        "label": "RWopsEncodeFilePathTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.rwobject_test",
        "description": "pygame-1.9.6.test.rwobject_test",
        "peekOfCode": "class RWopsEncodeFilePathTest(unittest.TestCase):\n    # Most tests can be skipped since RWopsEncodeFilePath wraps\n    # RWopsEncodeString\n    def test_encoding(self):\n        u = as_unicode(r\"Hello\")\n        encoded_file_path = encode_file_path(u)\n        self.assertIsInstance(encoded_file_path, bytes_)\n    def test_error_fowarding(self):\n        self.assertRaises(SyntaxError, encode_file_path)\n    def test_path_with_null_bytes(self):",
        "detail": "pygame-1.9.6.test.rwobject_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.scrap_tags",
        "description": "pygame-1.9.6.test.scrap_tags",
        "peekOfCode": "__tags__ = ['SDL2_ignore']\nimport sys\nexclude = False\nif sys.platform == 'win32' or sys.platform.startswith('linux'):\n    try:\n        import pygame\n        pygame.scrap._NOT_IMPLEMENTED_\n    except AttributeError:\n        pass\n    else:",
        "detail": "pygame-1.9.6.test.scrap_tags",
        "documentation": {}
    },
    {
        "label": "exclude",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.scrap_tags",
        "description": "pygame-1.9.6.test.scrap_tags",
        "peekOfCode": "exclude = False\nif sys.platform == 'win32' or sys.platform.startswith('linux'):\n    try:\n        import pygame\n        pygame.scrap._NOT_IMPLEMENTED_\n    except AttributeError:\n        pass\n    else:\n        exclude = True\nelse:",
        "detail": "pygame-1.9.6.test.scrap_tags",
        "documentation": {}
    },
    {
        "label": "ScrapModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.scrap_test",
        "description": "pygame-1.9.6.test.scrap_test",
        "peekOfCode": "class ScrapModuleTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        pygame.display.init()\n        pygame.display.set_mode((1, 1))\n        scrap.init()\n    @classmethod\n    def tearDownClass(cls):\n        # scrap.quit()  # Does not exist!\n        pygame.display.quit()",
        "detail": "pygame-1.9.6.test.scrap_test",
        "documentation": {}
    },
    {
        "label": "ScrapModuleClipboardNotOwnedTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.scrap_test",
        "description": "pygame-1.9.6.test.scrap_test",
        "peekOfCode": "class ScrapModuleClipboardNotOwnedTest(unittest.TestCase):\n    \"\"\"Test the scrap module's functionality when the pygame application is\n    not the current owner of the clipboard.\n    A separate class is used to prevent tests that acquire the clipboard from\n    interfering with these tests.\n    \"\"\"\n    @classmethod\n    def setUpClass(cls):\n        pygame.display.init()\n        pygame.display.set_mode((1, 1))",
        "detail": "pygame-1.9.6.test.scrap_test",
        "documentation": {}
    },
    {
        "label": "X11InteractiveTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.scrap_test",
        "description": "pygame-1.9.6.test.scrap_test",
        "peekOfCode": "class X11InteractiveTest(unittest.TestCase):\n    __tags__ = ['ignore', 'subprocess_ignore']\n    try:\n        pygame.display.init()\n    except Exception:\n        pass\n    else:\n        if pygame.display.get_driver() == 'x11':\n            __tags__ = ['interactive']\n        pygame.display.quit()",
        "detail": "pygame-1.9.6.test.scrap_test",
        "documentation": {}
    },
    {
        "label": "word_wrap",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.scrap_test",
        "description": "pygame-1.9.6.test.scrap_test",
        "peekOfCode": "def word_wrap(surf, text, font, margin=0, color=(0, 0, 0)):\n    font.origin = True\n    surf_width, surf_height = surf.get_size()\n    width = surf_width - 2 * margin\n    height = surf_height - 2 * margin\n    line_spacing = int(1.25 * font.get_sized_height())\n    x, y = margin, margin + line_spacing\n    space = font.get_rect(' ')\n    for word in iwords(text):\n        if word == '\\n':",
        "detail": "pygame-1.9.6.test.scrap_test",
        "documentation": {}
    },
    {
        "label": "iwords",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.scrap_test",
        "description": "pygame-1.9.6.test.scrap_test",
        "peekOfCode": "def iwords(text):\n    #  r\"\\n|[^ ]+\"\n    #\n    head = 0\n    tail = head\n    end = len(text)\n    while head < end:\n        if text[head] == ' ':\n            head += 1\n            tail = head + 1",
        "detail": "pygame-1.9.6.test.scrap_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.sndarray_tags",
        "description": "pygame-1.9.6.test.sndarray_tags",
        "peekOfCode": "__tags__ = ['array']\nexclude = False\ntry:\n    import pygame.mixer\n    import numpy\nexcept ImportError:\n    exclude = True\nif exclude:\n    __tags__.extend(('ignore', 'subprocess_ignore'))",
        "detail": "pygame-1.9.6.test.sndarray_tags",
        "documentation": {}
    },
    {
        "label": "exclude",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.sndarray_tags",
        "description": "pygame-1.9.6.test.sndarray_tags",
        "peekOfCode": "exclude = False\ntry:\n    import pygame.mixer\n    import numpy\nexcept ImportError:\n    exclude = True\nif exclude:\n    __tags__.extend(('ignore', 'subprocess_ignore'))",
        "detail": "pygame-1.9.6.test.sndarray_tags",
        "documentation": {}
    },
    {
        "label": "SndarrayTes",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sndarray_test",
        "description": "pygame-1.9.6.test.sndarray_test",
        "peekOfCode": "class SndarrayTest (unittest.TestCase):\n    array_dtypes = {8: uint8, -8: int8, 16: uint16, -16: int16, 32: float32}\n    def _assert_compatible(self, arr, size):\n        dtype = self.array_dtypes[size]\n        self.assertEqual(arr.dtype, dtype)\n    def test_array(self):\n        def check_array(size, channels, test_data):\n            try:\n                pygame.mixer.init(22050, size, channels, allowedchanges=0)\n            except pygame.error:",
        "detail": "pygame-1.9.6.test.sndarray_test",
        "documentation": {}
    },
    {
        "label": "SDL2",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.sndarray_test",
        "description": "pygame-1.9.6.test.sndarray_test",
        "peekOfCode": "SDL2 = pygame.get_sdl_version()[0] >= 2\nclass SndarrayTest (unittest.TestCase):\n    array_dtypes = {8: uint8, -8: int8, 16: uint16, -16: int16, 32: float32}\n    def _assert_compatible(self, arr, size):\n        dtype = self.array_dtypes[size]\n        self.assertEqual(arr.dtype, dtype)\n    def test_array(self):\n        def check_array(size, channels, test_data):\n            try:\n                pygame.mixer.init(22050, size, channels, allowedchanges=0)",
        "detail": "pygame-1.9.6.test.sndarray_test",
        "documentation": {}
    },
    {
        "label": "SpriteModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sprite_test",
        "description": "pygame-1.9.6.test.sprite_test",
        "peekOfCode": "class SpriteModuleTest( unittest.TestCase ):\n    pass\n######################### SPRITECOLLIDE FUNCTIONS TEST #########################\nclass SpriteCollideTest( unittest.TestCase ):\n    def setUp(self):\n        self.ag = sprite.AbstractGroup()\n        self.ag2 = sprite.AbstractGroup()\n        self.s1 = sprite.Sprite(self.ag)\n        self.s2 = sprite.Sprite(self.ag2)\n        self.s3 = sprite.Sprite(self.ag2)",
        "detail": "pygame-1.9.6.test.sprite_test",
        "documentation": {}
    },
    {
        "label": "SpriteCollideTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sprite_test",
        "description": "pygame-1.9.6.test.sprite_test",
        "peekOfCode": "class SpriteCollideTest( unittest.TestCase ):\n    def setUp(self):\n        self.ag = sprite.AbstractGroup()\n        self.ag2 = sprite.AbstractGroup()\n        self.s1 = sprite.Sprite(self.ag)\n        self.s2 = sprite.Sprite(self.ag2)\n        self.s3 = sprite.Sprite(self.ag2)\n        self.s1.image = pygame.Surface((50,10), pygame.SRCALPHA, 32)\n        self.s2.image = pygame.Surface((10,10), pygame.SRCALPHA, 32)\n        self.s3.image = pygame.Surface((10,10), pygame.SRCALPHA, 32)",
        "detail": "pygame-1.9.6.test.sprite_test",
        "documentation": {}
    },
    {
        "label": "AbstractGroupTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sprite_test",
        "description": "pygame-1.9.6.test.sprite_test",
        "peekOfCode": "class AbstractGroupTypeTest( unittest.TestCase ):\n    def setUp(self):\n        self.ag = sprite.AbstractGroup()\n        self.ag2 = sprite.AbstractGroup()\n        self.s1 = sprite.Sprite(self.ag)\n        self.s2 = sprite.Sprite(self.ag)\n        self.s3 = sprite.Sprite(self.ag2)\n        self.s4 = sprite.Sprite(self.ag2)\n        self.s1.image = pygame.Surface((10, 10))\n        self.s1.image.fill(pygame.Color('red'))",
        "detail": "pygame-1.9.6.test.sprite_test",
        "documentation": {}
    },
    {
        "label": "LayeredGroupBase",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sprite_test",
        "description": "pygame-1.9.6.test.sprite_test",
        "peekOfCode": "class LayeredGroupBase:\n    def test_get_layer_of_sprite(self):\n        expected_layer = 666\n        spr = self.sprite()\n        self.LG.add(spr, layer=expected_layer)\n        layer = self.LG.get_layer_of_sprite(spr)\n        self.assertEqual(len(self.LG._spritelist), 1)\n        self.assertEqual(layer, self.LG.get_layer_of_sprite(spr))\n        self.assertEqual(layer, expected_layer)\n        self.assertEqual(layer, self.LG._spritelayers[spr])",
        "detail": "pygame-1.9.6.test.sprite_test",
        "documentation": {}
    },
    {
        "label": "LayeredUpdatesTypeTest__SpriteTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sprite_test",
        "description": "pygame-1.9.6.test.sprite_test",
        "peekOfCode": "class LayeredUpdatesTypeTest__SpriteTest(LayeredGroupBase, unittest.TestCase):\n    sprite = sprite.Sprite\n    def setUp(self):\n        self.LG = sprite.LayeredUpdates()\nclass LayeredUpdatesTypeTest__DirtySprite(LayeredGroupBase, unittest.TestCase):\n    sprite = sprite.DirtySprite\n    def setUp(self):\n        self.LG = sprite.LayeredUpdates()\nclass LayeredDirtyTypeTest__DirtySprite(LayeredGroupBase, unittest.TestCase):\n    sprite = sprite.DirtySprite",
        "detail": "pygame-1.9.6.test.sprite_test",
        "documentation": {}
    },
    {
        "label": "LayeredUpdatesTypeTest__DirtySprite",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sprite_test",
        "description": "pygame-1.9.6.test.sprite_test",
        "peekOfCode": "class LayeredUpdatesTypeTest__DirtySprite(LayeredGroupBase, unittest.TestCase):\n    sprite = sprite.DirtySprite\n    def setUp(self):\n        self.LG = sprite.LayeredUpdates()\nclass LayeredDirtyTypeTest__DirtySprite(LayeredGroupBase, unittest.TestCase):\n    sprite = sprite.DirtySprite\n    def setUp(self):\n        self.LG = sprite.LayeredDirty()\n    def test_repaint_rect(self):\n        group = self.LG",
        "detail": "pygame-1.9.6.test.sprite_test",
        "documentation": {}
    },
    {
        "label": "LayeredDirtyTypeTest__DirtySprite",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sprite_test",
        "description": "pygame-1.9.6.test.sprite_test",
        "peekOfCode": "class LayeredDirtyTypeTest__DirtySprite(LayeredGroupBase, unittest.TestCase):\n    sprite = sprite.DirtySprite\n    def setUp(self):\n        self.LG = sprite.LayeredDirty()\n    def test_repaint_rect(self):\n        group = self.LG\n        surface = pygame.Surface((100, 100))\n        group.repaint_rect(pygame.Rect(0, 0, 100, 100))\n        group.draw(surface)\n    def test_repaint_rect_with_clip(self):",
        "detail": "pygame-1.9.6.test.sprite_test",
        "documentation": {}
    },
    {
        "label": "SpriteBase",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sprite_test",
        "description": "pygame-1.9.6.test.sprite_test",
        "peekOfCode": "class SpriteBase:\n    def setUp(self):\n        self.groups = []\n        for Group in self.Groups:\n            self.groups.append(Group())\n        self.sprite = self.Sprite()\n    def test_add_internal(self):\n        for g in self.groups:\n            self.sprite.add_internal(g)\n        for g in self.groups:",
        "detail": "pygame-1.9.6.test.sprite_test",
        "documentation": {}
    },
    {
        "label": "SpriteTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sprite_test",
        "description": "pygame-1.9.6.test.sprite_test",
        "peekOfCode": "class SpriteTypeTest(SpriteBase, unittest.TestCase):\n    Sprite = sprite.Sprite\n    Groups = [ sprite.Group,\n               sprite.LayeredUpdates,\n               sprite.RenderUpdates,\n               sprite.OrderedUpdates, ]\nclass DirtySpriteTypeTest(SpriteBase, unittest.TestCase):\n    Sprite = sprite.DirtySprite\n    Groups = [ sprite.Group,\n               sprite.LayeredUpdates,",
        "detail": "pygame-1.9.6.test.sprite_test",
        "documentation": {}
    },
    {
        "label": "DirtySpriteTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sprite_test",
        "description": "pygame-1.9.6.test.sprite_test",
        "peekOfCode": "class DirtySpriteTypeTest(SpriteBase, unittest.TestCase):\n    Sprite = sprite.DirtySprite\n    Groups = [ sprite.Group,\n               sprite.LayeredUpdates,\n               sprite.RenderUpdates,\n               sprite.OrderedUpdates,\n               sprite.LayeredDirty, ]\n############################## BUG TESTS #######################################\nclass SingleGroupBugsTest(unittest.TestCase):\n    def test_memoryleak_bug(self):",
        "detail": "pygame-1.9.6.test.sprite_test",
        "documentation": {}
    },
    {
        "label": "SingleGroupBugsTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sprite_test",
        "description": "pygame-1.9.6.test.sprite_test",
        "peekOfCode": "class SingleGroupBugsTest(unittest.TestCase):\n    def test_memoryleak_bug(self):\n        # For memoryleak bug posted to mailing list by Tobias Steinrücken on 16/11/10.\n        # Fixed in revision 2953.\n        import weakref\n        import gc\n        class MySprite(sprite.Sprite):\n            def __init__(self, *args, **kwargs):\n                sprite.Sprite.__init__(self, *args, **kwargs)\n                self.image = pygame.Surface( (2, 4), 0, 24 )",
        "detail": "pygame-1.9.6.test.sprite_test",
        "documentation": {}
    },
    {
        "label": "SurfaceTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.surface_test",
        "description": "pygame-1.9.6.test.surface_test",
        "peekOfCode": "class SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):\n    def test_surface__pixel_format_as_surface_subclass(self):\n        \"\"\"Ensure a subclassed surface can be used for pixel format\n        when creating a new surface.\"\"\"\n        expected_depth = 16\n        expected_flags = SRCALPHA\n        expected_size = (13, 37)\n        depth_surface = SurfaceSubclass((11, 21), expected_flags,\n                                        expected_depth)\n        surface = pygame.Surface(expected_size, 0, depth_surface)",
        "detail": "pygame-1.9.6.test.surface_test",
        "documentation": {}
    },
    {
        "label": "SurfaceSubtypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.surface_test",
        "description": "pygame-1.9.6.test.surface_test",
        "peekOfCode": "class SurfaceSubtypeTest(unittest.TestCase):\n    \"\"\"Issue #280: Methods that return a new Surface preserve subclasses\"\"\"\n    def setUp(self):\n        pygame.display.init()\n    def tearDown(self):\n        pygame.display.quit()\n    def test_copy(self):\n        \"\"\"Ensure method copy() preserves the surface's class\n        When Surface is subclassed, the inherited copy() method will return\n        instances of the subclass. Non Surface fields are uncopied, however.",
        "detail": "pygame-1.9.6.test.surface_test",
        "documentation": {}
    },
    {
        "label": "SurfaceGetBufferTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.surface_test",
        "description": "pygame-1.9.6.test.surface_test",
        "peekOfCode": "class SurfaceGetBufferTest(unittest.TestCase):\n    # These tests requires ctypes. They are disabled if ctypes\n    # is not installed.\n    #\n    try:\n        ArrayInterface\n    except NameError:\n        __tags__ = ('ignore', 'subprocess_ignore')\n    lilendian = pygame.get_sdl_byteorder() == pygame.LIL_ENDIAN\n    def _check_interface_2D(self, s):",
        "detail": "pygame-1.9.6.test.surface_test",
        "documentation": {}
    },
    {
        "label": "SurfaceBlendTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.surface_test",
        "description": "pygame-1.9.6.test.surface_test",
        "peekOfCode": "class SurfaceBlendTest(unittest.TestCase):\n    def setUp(self):\n        # Needed for 8 bits-per-pixel color palette surface tests.\n        pygame.display.init()\n    def tearDown(self):\n        pygame.display.quit()\n    _test_palette = [(0, 0, 0, 255),\n                     (10, 30, 60, 0),\n                     (25, 75, 100, 128),\n                     (200, 150, 100, 200),",
        "detail": "pygame-1.9.6.test.surface_test",
        "documentation": {}
    },
    {
        "label": "SurfaceSelfBlitTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.surface_test",
        "description": "pygame-1.9.6.test.surface_test",
        "peekOfCode": "class SurfaceSelfBlitTest(unittest.TestCase):\n    \"\"\"Blit to self tests.\n    This test case is in response to MotherHamster Bugzilla Bug 19.\n    \"\"\"\n    def setUp(self):\n        # Needed for 8 bits-per-pixel color palette surface tests.\n        pygame.display.init()\n    def tearDown(self):\n        pygame.display.quit()\n    _test_palette = [(0, 0, 0, 255),",
        "detail": "pygame-1.9.6.test.surface_test",
        "documentation": {}
    },
    {
        "label": "SurfaceFillTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.surface_test",
        "description": "pygame-1.9.6.test.surface_test",
        "peekOfCode": "class SurfaceFillTest(unittest.TestCase):\n    def setUp(self):\n        pygame.display.init()\n    def tearDown(self):\n        pygame.display.quit()\n    def test_fill(self):\n        screen = pygame.display.set_mode((640, 480))\n        # Green and blue test pattern\n        screen.fill((0, 255, 0), (0, 0, 320, 240))\n        screen.fill((0, 255, 0), (320, 240, 320, 240))",
        "detail": "pygame-1.9.6.test.surface_test",
        "documentation": {}
    },
    {
        "label": "intify",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.surface_test",
        "description": "pygame-1.9.6.test.surface_test",
        "peekOfCode": "def intify(i):\n    \"\"\"If i is a long, cast to an int while preserving the bits\"\"\"\n    if 0x80000000 & i:\n        return int((0xFFFFFFFF & i))\n    return i\ndef longify(i):\n    \"\"\"If i is an int, cast to a long while preserving the bits\"\"\"\n    if i < 0:\n        return 0xFFFFFFFF & i\n    return long(i)",
        "detail": "pygame-1.9.6.test.surface_test",
        "documentation": {}
    },
    {
        "label": "longify",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.surface_test",
        "description": "pygame-1.9.6.test.surface_test",
        "peekOfCode": "def longify(i):\n    \"\"\"If i is an int, cast to a long while preserving the bits\"\"\"\n    if i < 0:\n        return 0xFFFFFFFF & i\n    return long(i)\nclass SurfaceTypeTest(AssertRaisesRegexMixin, unittest.TestCase):\n    def test_surface__pixel_format_as_surface_subclass(self):\n        \"\"\"Ensure a subclassed surface can be used for pixel format\n        when creating a new surface.\"\"\"\n        expected_depth = 16",
        "detail": "pygame-1.9.6.test.surface_test",
        "documentation": {}
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.surface_test",
        "description": "pygame-1.9.6.test.surface_test",
        "peekOfCode": "IS_PYPY = 'PyPy' == platform.python_implementation()\ndef intify(i):\n    \"\"\"If i is a long, cast to an int while preserving the bits\"\"\"\n    if 0x80000000 & i:\n        return int((0xFFFFFFFF & i))\n    return i\ndef longify(i):\n    \"\"\"If i is an int, cast to a long while preserving the bits\"\"\"\n    if i < 0:\n        return 0xFFFFFFFF & i",
        "detail": "pygame-1.9.6.test.surface_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.surfarray_tags",
        "description": "pygame-1.9.6.test.surfarray_tags",
        "peekOfCode": "__tags__ = ['array']\nexclude = False\ntry:\n    import numpy\nexcept ImportError:\n    exclude = True\nelse:\n    try:\n        import pygame.pixelcopy\n    except ImportError:",
        "detail": "pygame-1.9.6.test.surfarray_tags",
        "documentation": {}
    },
    {
        "label": "exclude",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.surfarray_tags",
        "description": "pygame-1.9.6.test.surfarray_tags",
        "peekOfCode": "exclude = False\ntry:\n    import numpy\nexcept ImportError:\n    exclude = True\nelse:\n    try:\n        import pygame.pixelcopy\n    except ImportError:\n        exclude = True",
        "detail": "pygame-1.9.6.test.surfarray_tags",
        "documentation": {}
    },
    {
        "label": "SurfarrayModuleTes",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.surfarray_test",
        "description": "pygame-1.9.6.test.surfarray_test",
        "peekOfCode": "class SurfarrayModuleTest (unittest.TestCase):\n    pixels2d = {8: True, 16: True, 24: False, 32: True}\n    pixels3d = {8: False, 16: False, 24: True, 32: True}\n    array2d = {8: True, 16: True, 24: True, 32: True}\n    array3d = {8: False, 16: False, 24: True, 32: True}\n    test_palette = [(0, 0, 0, 255),\n                    (10, 30, 60, 255),\n                    (25, 75, 100, 255),\n                    (100, 150, 200, 255),\n                    (0, 100, 200, 255)]",
        "detail": "pygame-1.9.6.test.surfarray_test",
        "documentation": {}
    },
    {
        "label": "arraytype",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.surfarray_test",
        "description": "pygame-1.9.6.test.surfarray_test",
        "peekOfCode": "arraytype = 'numpy'\nIS_PYPY = 'PyPy' == platform.python_implementation()\n@unittest.skipIf(IS_PYPY, 'pypy skip known failure') # TODO\nclass SurfarrayModuleTest (unittest.TestCase):\n    pixels2d = {8: True, 16: True, 24: False, 32: True}\n    pixels3d = {8: False, 16: False, 24: True, 32: True}\n    array2d = {8: True, 16: True, 24: True, 32: True}\n    array3d = {8: False, 16: False, 24: True, 32: True}\n    test_palette = [(0, 0, 0, 255),\n                    (10, 30, 60, 255),",
        "detail": "pygame-1.9.6.test.surfarray_test",
        "documentation": {}
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.surfarray_test",
        "description": "pygame-1.9.6.test.surfarray_test",
        "peekOfCode": "IS_PYPY = 'PyPy' == platform.python_implementation()\n@unittest.skipIf(IS_PYPY, 'pypy skip known failure') # TODO\nclass SurfarrayModuleTest (unittest.TestCase):\n    pixels2d = {8: True, 16: True, 24: False, 32: True}\n    pixels3d = {8: False, 16: False, 24: True, 32: True}\n    array2d = {8: True, 16: True, 24: True, 32: True}\n    array3d = {8: False, 16: False, 24: True, 32: True}\n    test_palette = [(0, 0, 0, 255),\n                    (10, 30, 60, 255),\n                    (25, 75, 100, 255),",
        "detail": "pygame-1.9.6.test.surfarray_test",
        "documentation": {}
    },
    {
        "label": "SurfaceLockTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.surflock_test",
        "description": "pygame-1.9.6.test.surflock_test",
        "peekOfCode": "class SurfaceLockTest(unittest.TestCase):\n    def test_lock(self):\n        sf = pygame.Surface((5, 5))\n        sf.lock()\n        self.assertEqual(sf.get_locked(), True)\n        self.assertEqual(sf.get_locks(), (sf,))\n        sf.lock()\n        self.assertEqual(sf.get_locked(), True)\n        self.assertEqual(sf.get_locks(), (sf, sf))\n        sf.unlock()",
        "detail": "pygame-1.9.6.test.surflock_test",
        "documentation": {}
    },
    {
        "label": "IS_PYPY",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.surflock_test",
        "description": "pygame-1.9.6.test.surflock_test",
        "peekOfCode": "IS_PYPY = 'PyPy' == platform.python_implementation()\n@unittest.skipIf(IS_PYPY, 'pypy skip known failure') # TODO\nclass SurfaceLockTest(unittest.TestCase):\n    def test_lock(self):\n        sf = pygame.Surface((5, 5))\n        sf.lock()\n        self.assertEqual(sf.get_locked(), True)\n        self.assertEqual(sf.get_locks(), (sf,))\n        sf.lock()\n        self.assertEqual(sf.get_locked(), True)",
        "detail": "pygame-1.9.6.test.surflock_test",
        "documentation": {}
    },
    {
        "label": "SysfontModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.sysfont_test",
        "description": "pygame-1.9.6.test.sysfont_test",
        "peekOfCode": "class SysfontModuleTest(unittest.TestCase):\n    def todo_test_create_aliases(self):\n        self.fail()\n    def todo_test_initsysfonts(self):\n        self.fail()\n    @unittest.skipIf('Darwin' not in platform.platform(), 'Not mac we skip.')\n    def test_initsysfonts_darwin(self):\n        import pygame.sysfont\n        self.assertTrue(len(pygame.sysfont.get_fonts()) > 10)\n    def test_sysfont(self):",
        "detail": "pygame-1.9.6.test.sysfont_test",
        "documentation": {}
    },
    {
        "label": "WorkerQueueTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.threads_test",
        "description": "pygame-1.9.6.test.threads_test",
        "peekOfCode": "class WorkerQueueTypeTest(unittest.TestCase):\n    def test_usage_with_different_functions(self):\n        def f(x):\n            return x+1\n        def f2(x):\n            return x+2\n        wq = WorkerQueue()\n        fr = FuncResult(f)\n        fr2 = FuncResult(f2)\n        wq.do(fr, 1)",
        "detail": "pygame-1.9.6.test.threads_test",
        "documentation": {}
    },
    {
        "label": "ThreadsModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.threads_test",
        "description": "pygame-1.9.6.test.threads_test",
        "peekOfCode": "class ThreadsModuleTest(unittest.TestCase):\n    def todo_test_benchmark_workers(self):\n        \"tags:long_running\"\n        # __doc__ (as of 2008-06-28) for pygame.threads.benchmark_workers:\n          # does a little test to see if workers are at all faster.\n          # Returns the number of workers which works best.\n          # Takes a little bit of time to run, so you should only really call\n          #   it once.\n          # You can pass in benchmark data, and functions if you want.\n          # a_bench_func - f(data)",
        "detail": "pygame-1.9.6.test.threads_test",
        "documentation": {}
    },
    {
        "label": "ClockTypeTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.time_test",
        "description": "pygame-1.9.6.test.time_test",
        "peekOfCode": "class ClockTypeTest(unittest.TestCase):\n    def test_construction(self):\n        \"\"\"Ensure a Clock object can be created\"\"\"\n        c = Clock()\n        self.assertTrue(c, \"Clock cannot be constructed\")\n    def todo_test_get_fps(self):\n        # __doc__ (as of 2008-08-02) for pygame.time.Clock.get_fps:\n          # Clock.get_fps(): return float\n          # compute the clock framerate\n          #",
        "detail": "pygame-1.9.6.test.time_test",
        "documentation": {}
    },
    {
        "label": "TimeModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.time_test",
        "description": "pygame-1.9.6.test.time_test",
        "peekOfCode": "class TimeModuleTest(unittest.TestCase):\n    def todo_test_delay(self):\n        # __doc__ (as of 2008-08-02) for pygame.time.delay:\n          # pygame.time.delay(milliseconds): return time\n          # pause the program for an amount of time\n          #\n          # Will pause for a given number of milliseconds. This function will\n          # use the processor (rather than sleeping) in order to make the delay\n          # more accurate than pygame.time.wait().\n          #",
        "detail": "pygame-1.9.6.test.time_test",
        "documentation": {}
    },
    {
        "label": "Clock",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.time_test",
        "description": "pygame-1.9.6.test.time_test",
        "peekOfCode": "Clock = pygame.time.Clock\nclass ClockTypeTest(unittest.TestCase):\n    def test_construction(self):\n        \"\"\"Ensure a Clock object can be created\"\"\"\n        c = Clock()\n        self.assertTrue(c, \"Clock cannot be constructed\")\n    def todo_test_get_fps(self):\n        # __doc__ (as of 2008-08-02) for pygame.time.Clock.get_fps:\n          # Clock.get_fps(): return float\n          # compute the clock framerate",
        "detail": "pygame-1.9.6.test.time_test",
        "documentation": {}
    },
    {
        "label": "__tags__",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.touch_tags",
        "description": "pygame-1.9.6.test.touch_tags",
        "peekOfCode": "__tags__ = ['SDL1_ignore']",
        "detail": "pygame-1.9.6.test.touch_tags",
        "documentation": {}
    },
    {
        "label": "TouchTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.touch_test",
        "description": "pygame-1.9.6.test.touch_test",
        "peekOfCode": "class TouchTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        pygame.display.init()\n    @classmethod\n    def tearDownClass(cls):\n        pygame.display.quit()\n    def test_num_devices(self):\n        touch.get_num_devices()\n    @unittest.skipIf(not has_touchdevice, 'no touch devices found')",
        "detail": "pygame-1.9.6.test.touch_test",
        "documentation": {}
    },
    {
        "label": "has_touchdevice",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.touch_test",
        "description": "pygame-1.9.6.test.touch_test",
        "peekOfCode": "has_touchdevice = touch.get_num_devices() > 0\nclass TouchTest(unittest.TestCase):\n    @classmethod\n    def setUpClass(cls):\n        pygame.display.init()\n    @classmethod\n    def tearDownClass(cls):\n        pygame.display.quit()\n    def test_num_devices(self):\n        touch.get_num_devices()",
        "detail": "pygame-1.9.6.test.touch_test",
        "documentation": {}
    },
    {
        "label": "TransformModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.transform_test",
        "description": "pygame-1.9.6.test.transform_test",
        "peekOfCode": "class TransformModuleTest( unittest.TestCase ):\n    def test_scale__alpha( self ):\n        \"\"\" see if set_alpha information is kept.\n        \"\"\"\n        s = pygame.Surface((32,32))\n        s.set_alpha(55)\n        self.assertEqual(s.get_alpha(),55)\n        s = pygame.Surface((32,32))\n        s.set_alpha(55)\n        s2 = pygame.transform.scale(s, (64,64))",
        "detail": "pygame-1.9.6.test.transform_test",
        "documentation": {}
    },
    {
        "label": "TransformDisplayModuleTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.transform_test",
        "description": "pygame-1.9.6.test.transform_test",
        "peekOfCode": "class TransformDisplayModuleTest(unittest.TestCase):\n    def setUp(self):\n        pygame.display.init()\n    def tearDown(self):\n        pygame.display.quit()\n    def test_flip(self):\n        \"\"\" honors the set_color key on the returned surface from flip.\n        \"\"\"\n        from pygame.tests.test_utils import example_path\n        pygame.display.set_mode((320, 200))",
        "detail": "pygame-1.9.6.test.transform_test",
        "documentation": {}
    },
    {
        "label": "show_image",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.transform_test",
        "description": "pygame-1.9.6.test.transform_test",
        "peekOfCode": "def show_image(s, images = []):\n    #pygame.display.init()\n    size = s.get_rect()[2:]\n    screen = pygame.display.set_mode(size)\n    screen.blit(s, (0,0))\n    pygame.display.flip()\n    pygame.event.pump()\n    going = True\n    idx = 0\n    while going:",
        "detail": "pygame-1.9.6.test.transform_test",
        "documentation": {}
    },
    {
        "label": "threshold",
        "kind": 2,
        "importPath": "pygame-1.9.6.test.transform_test",
        "description": "pygame-1.9.6.test.transform_test",
        "peekOfCode": "def threshold(return_surf, surf, color, threshold = (0,0,0), diff_color = (0,0,0), change_return = True ):\n    \"\"\" given the color it makes return_surf only have areas with the given colour.\n    \"\"\"\n    width, height =surf.get_width(), surf.get_height()\n    if change_return:\n        return_surf.fill(diff_color)\n    try:\n        r, g, b = color\n    except ValueError:\n        r, g, b, a = color",
        "detail": "pygame-1.9.6.test.transform_test",
        "documentation": {}
    },
    {
        "label": "VersionTest",
        "kind": 6,
        "importPath": "pygame-1.9.6.test.version_test",
        "description": "pygame-1.9.6.test.version_test",
        "peekOfCode": "class VersionTest(unittest.TestCase):\n    @unittest.skipIf(not os.path.isfile(pg_header),\n                     \"Skipping because we cannot find _pygame.h\")\n    def test_pg_version_consistency(self):\n        from pygame import version\n        pgh_major = -1\n        pgh_minor = -1\n        pgh_patch = -1\n        import re\n        major_exp_search = re.compile('define\\s+PG_MAJOR_VERSION\\s+([0-9]+)').search",
        "detail": "pygame-1.9.6.test.version_test",
        "documentation": {}
    },
    {
        "label": "pg_header",
        "kind": 5,
        "importPath": "pygame-1.9.6.test.version_test",
        "description": "pygame-1.9.6.test.version_test",
        "peekOfCode": "pg_header = os.path.join('src_c', '_pygame.h')\nclass VersionTest(unittest.TestCase):\n    @unittest.skipIf(not os.path.isfile(pg_header),\n                     \"Skipping because we cannot find _pygame.h\")\n    def test_pg_version_consistency(self):\n        from pygame import version\n        pgh_major = -1\n        pgh_minor = -1\n        pgh_patch = -1\n        import re",
        "detail": "pygame-1.9.6.test.version_test",
        "documentation": {}
    },
    {
        "label": "smart_install_data",
        "kind": 6,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "class smart_install_data(install_data):\n    def run(self):\n        #need to change self.install_dir to the actual library dir\n        install_cmd = self.get_finalized_command('install')\n        self.install_dir = getattr(install_cmd, 'install_lib')\n        return install_data.run(self)\ncmdclass['install_data'] = smart_install_data\nclass OurSdist(sdist):\n    def initialize_options(self):\n        sdist.initialize_options(self)",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "OurSdist",
        "kind": 6,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "class OurSdist(sdist):\n    def initialize_options(self):\n        sdist.initialize_options(self)\n        # we do not want MANIFEST.in to appear in the root cluttering up things.\n        self.template = os.path.join('buildconfig', 'MANIFEST.in')\ncmdclass['sdist'] = OurSdist\nif \"bdist_msi\" in sys.argv:\n    # if you are making an msi, we want it to overwrite files\n    # we also want to include the repository revision in the file name\n    from distutils.command import bdist_msi",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "TestCommand",
        "kind": 6,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "class TestCommand(Command):\n    user_options = [ ]\n    def initialize_options(self):\n        self._dir = os.getcwd()\n    def finalize_options(self):\n        pass\n    def run(self):\n        '''\n        runs the tests with default options.\n        '''",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "DocsCommand",
        "kind": 6,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "class DocsCommand(Command):\n    \"\"\" For building the pygame documentation with `python setup.py docs`.\n    This generates html, and documentation .h header files.\n    \"\"\"\n    user_options = [ ]\n    def initialize_options(self):\n        self._dir = os.getcwd()\n    def finalize_options(self):\n        pass\n    def run(self):",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "compilation_help",
        "kind": 2,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "def compilation_help():\n    \"\"\" On failure point people to a web page for help.\n    \"\"\"\n    import platform\n    the_system = platform.system()\n    if the_system == 'Linux':\n        if hasattr(platform, 'linux_distribution'):\n            distro = platform.linux_distribution()\n            if distro[0] == 'Ubuntu':\n                the_system = 'Ubuntu'",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "add_datafiles",
        "kind": 2,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "def add_datafiles(data_files, dest_dir, pattern):\n    \"\"\"Add directory structures to data files according to a pattern\"\"\"\n    src_dir, elements = pattern\n    def do_directory(root_dest_path, root_src_path, elements):\n        files = []\n        for e in elements:\n            if isinstance(e, list):\n                src_dir, elems = e\n                dest_path = '/'.join([root_dest_path, src_dir])\n                src_path = os.path.join(root_src_path, src_dir)",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "parse_version",
        "kind": 2,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "def parse_version(ver):\n    from re import findall\n    return ', '.join(s for s in findall('\\d+', ver)[0:3])\ndef parse_source_version():\n    pgh_major = -1\n    pgh_minor = -1\n    pgh_patch = -1\n    import re\n    major_exp_search = re.compile('define\\s+PG_MAJOR_VERSION\\s+([0-9]+)').search\n    minor_exp_search = re.compile('define\\s+PG_MINOR_VERSION\\s+([0-9]+)').search",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "parse_source_version",
        "kind": 2,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "def parse_source_version():\n    pgh_major = -1\n    pgh_minor = -1\n    pgh_patch = -1\n    import re\n    major_exp_search = re.compile('define\\s+PG_MAJOR_VERSION\\s+([0-9]+)').search\n    minor_exp_search = re.compile('define\\s+PG_MINOR_VERSION\\s+([0-9]+)').search\n    patch_exp_search = re.compile('define\\s+PG_PATCH_VERSION\\s+([0-9]+)').search\n    pg_header = os.path.join('src_c', '_pygame.h')\n    with open(pg_header) as f:",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "write_version_module",
        "kind": 2,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "def write_version_module(pygame_version, revision):\n    vernum = parse_version(pygame_version)\n    src_vernum = parse_source_version()\n    if vernum != ', '.join(str(e) for e in src_vernum):\n        raise SystemExit(\"_pygame.h version differs from 'METADATA' version\"\n                         \": %s vs %s\" % (vernum, src_vernum))\n    with open(os.path.join('buildconfig', 'version.py.in'), 'r') as header_file:\n        header = header_file.read()\n    with open(os.path.join('src_py', 'version.py'), 'w') as version_file:\n        version_file.write(header)",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "remove_old_files",
        "kind": 2,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "def remove_old_files():\n    # try and figure out where we are installed.\n    #pygame could be installed in a weird location because of\n    #  setuptools or something else.  The only sane way seems to be by trying\n    #  first to import it, and see where the imported one is.\n    #\n    # Otherwise we might delete some files from another installation.\n    try:\n        import pygame.base\n        use_pygame = 1",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "DESCRIPTION",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "DESCRIPTION = \"\"\"Pygame is a Python wrapper module for the\nSDL multimedia library. It contains python functions and classes\nthat will allow you to use SDL's support for playing cdroms,\naudio and video output, and keyboard, mouse and joystick input.\"\"\"\nEXTRAS = {}\nMETADATA = {\n    \"name\":             \"pygame\",\n    \"version\":          \"1.9.6\",\n    \"license\":          \"LGPL\",\n    \"url\":              \"https://www.pygame.org\",",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "EXTRAS",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "EXTRAS = {}\nMETADATA = {\n    \"name\":             \"pygame\",\n    \"version\":          \"1.9.6\",\n    \"license\":          \"LGPL\",\n    \"url\":              \"https://www.pygame.org\",\n    \"author\":           \"A community project.\",\n    \"author_email\":     \"pygame@pygame.org\",\n    \"description\":      \"Python Game Development\",\n    \"long_description\": DESCRIPTION,",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "METADATA",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "METADATA = {\n    \"name\":             \"pygame\",\n    \"version\":          \"1.9.6\",\n    \"license\":          \"LGPL\",\n    \"url\":              \"https://www.pygame.org\",\n    \"author\":           \"A community project.\",\n    \"author_email\":     \"pygame@pygame.org\",\n    \"description\":      \"Python Game Development\",\n    \"long_description\": DESCRIPTION,\n}",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "path",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "path = os.path.split(os.path.abspath(sys.argv[0]))[0]\nos.chdir(path)\n#os.environ[\"CFLAGS\"] = \"-W -Wall -Wpointer-arith -Wcast-qual -Winline \" + \\\n#                       \"-Wcast-align -Wconversion -Wstrict-prototypes \" + \\\n#                       \"-Wmissing-prototypes -Wmissing-declarations \" + \\\n#                       \"-Wnested-externs -Wshadow -Wredundant-decls\"\nif \"-warnings\" in sys.argv:\n    os.environ[\"CFLAGS\"] = \"-W -Wimplicit-int \" + \\\n                       \"-Wimplicit-function-declaration \" + \\\n                       \"-Wimplicit -Wmain -Wreturn-type -Wunused -Wswitch \" + \\",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "#os.environ[\"CFLAGS\"]",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "#os.environ[\"CFLAGS\"] = \"-W -Wall -Wpointer-arith -Wcast-qual -Winline \" + \\\n#                       \"-Wcast-align -Wconversion -Wstrict-prototypes \" + \\\n#                       \"-Wmissing-prototypes -Wmissing-declarations \" + \\\n#                       \"-Wnested-externs -Wshadow -Wredundant-decls\"\nif \"-warnings\" in sys.argv:\n    os.environ[\"CFLAGS\"] = \"-W -Wimplicit-int \" + \\\n                       \"-Wimplicit-function-declaration \" + \\\n                       \"-Wimplicit -Wmain -Wreturn-type -Wunused -Wswitch \" + \\\n                       \"-Wcomment -Wtrigraphs -Wformat -Wchar-subscripts \" + \\\n                       \"-Wuninitialized -Wparentheses \" +\\",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "AUTO_CONFIG",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "AUTO_CONFIG = False\nif '-auto' in sys.argv:\n    AUTO_CONFIG = True\n    sys.argv.remove('-auto')\nimport os.path, glob, stat, shutil\nimport distutils.sysconfig\nfrom distutils.core import setup, Extension, Command\nfrom distutils.extension import read_setup_file\nfrom distutils.command.install_data import install_data\nfrom distutils.command.sdist import sdist",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "revision",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "revision = ''\n# Python 3.0 patch\nif sys.version_info[0:2] == (3, 0):\n    import distutils.version\n    def _cmp(x, y):\n        try:\n            if x < y:\n                return -1\n            elif x == y:\n                return 0",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "headers",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "headers = glob.glob(os.path.join('src_c', '*.h'))\nheaders.remove(os.path.join('src_c', 'scale.h'))\n# option for not installing the headers.\nif \"-noheaders\" in sys.argv:\n    headers = []\n    sys.argv.remove (\"-noheaders\")\n#sanity check for any arguments\nif len(sys.argv) == 1 and sys.stdout.isatty():\n    if sys.version_info[0] >= 3:\n        reply = input('\\nNo Arguments Given, Perform Default Install? [Y/n]')",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "enable_newbuf",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "enable_newbuf = False\nif sys.version_info >= (2, 6, 0):\n    try:\n        sys.pypy_version_info\n    except AttributeError:\n        enable_newbuf = True\nif enable_newbuf:\n    enable_newbuf_value = '1'\nelse:\n    enable_newbuf_value = '0'",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "alternate_font",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "alternate_font = os.path.join('src_py', 'font.py')\nif os.path.exists(alternate_font):\n    os.remove(alternate_font)\nhave_font = False\nhave_freetype = False\nfor e in extensions:\n    if e.name == 'font':\n        have_font = True\n    if e.name == '_freetype':\n        have_freetype = True",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "have_font",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "have_font = False\nhave_freetype = False\nfor e in extensions:\n    if e.name == 'font':\n        have_font = True\n    if e.name == '_freetype':\n        have_freetype = True\nif not have_font and have_freetype:\n    shutil.copyfile(os.path.join('src_py', 'ftfont.py'), alternate_font)\n#extra files to install",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "have_freetype",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "have_freetype = False\nfor e in extensions:\n    if e.name == 'font':\n        have_font = True\n    if e.name == '_freetype':\n        have_freetype = True\nif not have_font and have_freetype:\n    shutil.copyfile(os.path.join('src_py', 'ftfont.py'), alternate_font)\n#extra files to install\ndata_path = os.path.join(distutils.sysconfig.get_python_lib(), 'pygame')",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "data_path",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "data_path = os.path.join(distutils.sysconfig.get_python_lib(), 'pygame')\npygame_data_files = []\ndata_files = [('pygame', pygame_data_files)]\n#add files in distribution directory\n# pygame_data_files.append('LGPL')\n# pygame_data_files.append('readme.html')\n# pygame_data_files.append('install.html')\n# add *.pyi files into distribution directory\n# type_files = glob.glob(os.path.join('buildconfig', 'pygame-stubs', '*.pyi'))\n# for type_file in type_files:",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "pygame_data_files",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "pygame_data_files = []\ndata_files = [('pygame', pygame_data_files)]\n#add files in distribution directory\n# pygame_data_files.append('LGPL')\n# pygame_data_files.append('readme.html')\n# pygame_data_files.append('install.html')\n# add *.pyi files into distribution directory\n# type_files = glob.glob(os.path.join('buildconfig', 'pygame-stubs', '*.pyi'))\n# for type_file in type_files:\n#     pygame_data_files.append(type_file)",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "data_files",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "data_files = [('pygame', pygame_data_files)]\n#add files in distribution directory\n# pygame_data_files.append('LGPL')\n# pygame_data_files.append('readme.html')\n# pygame_data_files.append('install.html')\n# add *.pyi files into distribution directory\n# type_files = glob.glob(os.path.join('buildconfig', 'pygame-stubs', '*.pyi'))\n# for type_file in type_files:\n#     pygame_data_files.append(type_file)\n#add non .py files in lib directory",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "cmdclass",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "cmdclass = {}\n#try to find DLLs and copy them too  (only on windows)\nif sys.platform == 'win32':\n    from distutils.command.build_ext import build_ext\n    #add dependency DLLs to the project\n    lib_dependencies = {}\n    for e in extensions:\n        if e.name.startswith('COPYLIB_'):\n            lib_dependencies[e.name[8:]] = e.libraries\n    def dependencies(roots):",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "cmdclass['install_data']",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "cmdclass['install_data'] = smart_install_data\nclass OurSdist(sdist):\n    def initialize_options(self):\n        sdist.initialize_options(self)\n        # we do not want MANIFEST.in to appear in the root cluttering up things.\n        self.template = os.path.join('buildconfig', 'MANIFEST.in')\ncmdclass['sdist'] = OurSdist\nif \"bdist_msi\" in sys.argv:\n    # if you are making an msi, we want it to overwrite files\n    # we also want to include the repository revision in the file name",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "cmdclass['sdist']",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "cmdclass['sdist'] = OurSdist\nif \"bdist_msi\" in sys.argv:\n    # if you are making an msi, we want it to overwrite files\n    # we also want to include the repository revision in the file name\n    from distutils.command import bdist_msi\n    import msilib\n    class bdist_msi_overwrite_on_install(bdist_msi.bdist_msi):\n        def run(self):\n            bdist_msi.bdist_msi.run(self)\n            # Remove obsolete files.",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "cmdclass['test']",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "cmdclass['test'] = TestCommand\nclass DocsCommand(Command):\n    \"\"\" For building the pygame documentation with `python setup.py docs`.\n    This generates html, and documentation .h header files.\n    \"\"\"\n    user_options = [ ]\n    def initialize_options(self):\n        self._dir = os.getcwd()\n    def finalize_options(self):\n        pass",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "cmdclass['docs']",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "cmdclass['docs'] = DocsCommand\n# Prune empty file lists.\ndate_files = [(path, files) for path, files in data_files if files]\n#finally,\n#call distutils with all needed info\nPACKAGEDATA = {\n       \"cmdclass\":    cmdclass,",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "date_files",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "date_files = [(path, files) for path, files in data_files if files]\n#finally,\n#call distutils with all needed info\nPACKAGEDATA = {\n       \"cmdclass\":    cmdclass,\n       \"packages\":    ['pygame',\n                       'pygame.threads',\n                       # 'pygame._sdl2',\n                       'pygame.tests',\n                       'pygame.tests.test_utils',",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "PACKAGEDATA",
        "kind": 5,
        "importPath": "pygame-1.9.6.setup",
        "description": "pygame-1.9.6.setup",
        "peekOfCode": "PACKAGEDATA = {\n       \"cmdclass\":    cmdclass,\n       \"packages\":    ['pygame',\n                       'pygame.threads',\n                       # 'pygame._sdl2',\n                       'pygame.tests',\n                       'pygame.tests.test_utils',\n                       'pygame.tests.run_tests__tests',\n                       'pygame.tests.run_tests__tests.all_ok',\n                       'pygame.tests.run_tests__tests.failures1',",
        "detail": "pygame-1.9.6.setup",
        "documentation": {}
    },
    {
        "label": "Graph",
        "kind": 6,
        "importPath": "graph",
        "description": "graph",
        "peekOfCode": "class Graph:\n    def __init__(self,\n                 gene,\n                 colour,\n                 display,\n                 values = []):\n        self.gene = gene\n        self.colour = colour\n        self.display = display\n        self.values = values",
        "detail": "graph",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    pygame.init()\n    clock = pygame.time.Clock()\n    sim = Simulation()\n    screen = pygame.display.set_mode((sim.screen_x,sim.screen_y))\n    pygame.display.set_caption(\"Evolution Simulation\")\n    sim.create_people()\n    sim.create_sources()\n    sim.create_graphs()\n    #######temp",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "people",
        "description": "people",
        "peekOfCode": "class Person:\n    def __init__(self,\n                 x,\n                 y,\n                 grid,\n                 direction,\n                 target,\n                 sex,\n                 genes,\n                 age,",
        "detail": "people",
        "documentation": {}
    },
    {
        "label": "Genes",
        "kind": 6,
        "importPath": "people",
        "description": "people",
        "peekOfCode": "class Genes:\n    def __init__(self,\n                 size,\n                 speed,\n                 agility,\n                 vision_range,\n                 vision_angle,\n                 fertility,\n                 virility,\n                 male_chance,",
        "detail": "people",
        "documentation": {}
    },
    {
        "label": "Simulation",
        "kind": 6,
        "importPath": "simulation",
        "description": "simulation",
        "peekOfCode": "class Simulation:\n    def __init__(self):    \n        self.people = []\n        self.sources = []\n        self.permanent_sources = []\n        self.gene_dict = {\n            \"size\": \"blue\",\n            \"speed\": \"red\",\n            \"agility\": \"yellow\",\n            \"vision_range\": \"green\",",
        "detail": "simulation",
        "documentation": {}
    },
    {
        "label": "Source",
        "kind": 6,
        "importPath": "sources",
        "description": "sources",
        "peekOfCode": "class Source:\n    def __init__(self,\n                 x,\n                 y,\n                 grid,\n                 type):\n        self.x,self.y = (x,y)\n        self.grid = grid\n        self.type = type\n    def respawn(sim):",
        "detail": "sources",
        "documentation": {}
    }
]