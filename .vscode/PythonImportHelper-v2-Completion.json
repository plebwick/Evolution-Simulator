[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "Simulation",
        "importPath": "simulation",
        "description": "simulation",
        "isExtraImport": true,
        "detail": "simulation",
        "documentation": {}
    },
    {
        "label": "uniform",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "uniform",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "uniform",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "randint",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "uniform",
        "importPath": "random",
        "description": "random",
        "isExtraImport": true,
        "detail": "random",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "sin",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "cos",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "pi",
        "importPath": "math",
        "description": "math",
        "isExtraImport": true,
        "detail": "math",
        "documentation": {}
    },
    {
        "label": "time",
        "importPath": "time",
        "description": "time",
        "isExtraImport": true,
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "pygame,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.",
        "description": "pygame.",
        "detail": "pygame.",
        "documentation": {}
    },
    {
        "label": "Source",
        "importPath": "sources",
        "description": "sources",
        "isExtraImport": true,
        "detail": "sources",
        "documentation": {}
    },
    {
        "label": "Person",
        "importPath": "people",
        "description": "people",
        "isExtraImport": true,
        "detail": "people",
        "documentation": {}
    },
    {
        "label": "Genes",
        "importPath": "people",
        "description": "people",
        "isExtraImport": true,
        "detail": "people",
        "documentation": {}
    },
    {
        "label": "clock",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "clock = pygame.time.Clock()\nsim = Simulation()\nscreen = pygame.display.set_mode((sim.screen_x,sim.screen_y))\npygame.display.set_caption(\"Evolution Simulation\")\nsim.create_people()\nsim.create_sources()\n#######temp\nfont = pygame.freetype.Font(\"font.otf\", 24)\nprevious_time = time()\nneeded = 0",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "sim",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "sim = Simulation()\nscreen = pygame.display.set_mode((sim.screen_x,sim.screen_y))\npygame.display.set_caption(\"Evolution Simulation\")\nsim.create_people()\nsim.create_sources()\n#######temp\nfont = pygame.freetype.Font(\"font.otf\", 24)\nprevious_time = time()\nneeded = 0\nprevious_needed = 0",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "screen = pygame.display.set_mode((sim.screen_x,sim.screen_y))\npygame.display.set_caption(\"Evolution Simulation\")\nsim.create_people()\nsim.create_sources()\n#######temp\nfont = pygame.freetype.Font(\"font.otf\", 24)\nprevious_time = time()\nneeded = 0\nprevious_needed = 0\ngraph_screen = 0",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "font",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "font = pygame.freetype.Font(\"font.otf\", 24)\nprevious_time = time()\nneeded = 0\nprevious_needed = 0\ngraph_screen = 0\n##############\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "previous_time",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "previous_time = time()\nneeded = 0\nprevious_needed = 0\ngraph_screen = 0\n##############\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            exit()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "needed",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "needed = 0\nprevious_needed = 0\ngraph_screen = 0\n##############\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            exit()\n    #Key Presses",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "previous_needed",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "previous_needed = 0\ngraph_screen = 0\n##############\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            exit()\n    #Key Presses\n    keys = pygame.key.get_pressed()",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "graph_screen",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "graph_screen = 0\n##############\nwhile True:\n    for event in pygame.event.get():\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            exit()\n    #Key Presses\n    keys = pygame.key.get_pressed()\n    if graph_screen != True:",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Person",
        "kind": 6,
        "importPath": "people",
        "description": "people",
        "peekOfCode": "class Person:\n    def __init__(self,\n                 x,\n                 y,\n                 direction,\n                 target,\n                 genes,\n                 age,\n                 postnatal_elapsed,\n                 gestation_period,",
        "detail": "people",
        "documentation": {}
    },
    {
        "label": "Genes",
        "kind": 6,
        "importPath": "people",
        "description": "people",
        "peekOfCode": "class Genes:\n    def __init__(self,\n                 size,\n                 speed,\n                 agility,\n                 vision_range,\n                 vision_angle,\n                 fertility,\n                 virility,\n                 male_chance,",
        "detail": "people",
        "documentation": {}
    },
    {
        "label": "Simulation",
        "kind": 6,
        "importPath": "simulation",
        "description": "simulation",
        "peekOfCode": "class Simulation:\n    def __init__(self):    \n        self.people = []\n        self.sources = []\n        self.graphs = []\n        self.FPS = 60\n        self.screen_x = 2560\n        self.screen_y = 1440\n        self.world_x_size = 10240\n        self.world_y_size = 5760",
        "detail": "simulation",
        "documentation": {}
    },
    {
        "label": "Source",
        "kind": 6,
        "importPath": "sources",
        "description": "sources",
        "peekOfCode": "class Source:\n    def __init__(self,\n                 x,\n                 y,\n                 type):\n        self.x,self.y = (x,y)\n        self.type = type\n    def respawn(sim):\n        if len(sim.sources) < (sim.food_max + sim.water_max):\n            if uniform(0,1) > 0.1:",
        "detail": "sources",
        "documentation": {}
    }
]